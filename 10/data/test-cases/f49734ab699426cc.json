{
  "uid" : "f49734ab699426cc",
  "name" : "Проверка попапа о принятии файлов cookie на странице https://pulsewave.ru/",
  "fullName" : "tests.test_footer.test_footer.TestFooter#test_get_all_cookies",
  "historyId" : "2f819b79daada525ccfcafa88755d4f6",
  "time" : {
    "start" : 1714443539864,
    "stop" : 1714443540565,
    "duration" : 701
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x556850fabe33 <unknown>\n#1 0x556850c9b567 <unknown>\n#2 0x556850c93879 <unknown>\n#3 0x556850c83852 <unknown>\n#4 0x556850c84e44 <unknown>\n#5 0x556850c83bbe <unknown>\n#6 0x556850c832e0 <unknown>\n#7 0x556850c83181 <unknown>\n#8 0x556850c810ec <unknown>\n#9 0x556850c8160a <unknown>\n#10 0x556850c9deef <unknown>\n#11 0x556850d27695 <unknown>\n#12 0x556850d08362 <unknown>\n#13 0x556850d26ae2 <unknown>\n#14 0x556850d08103 <unknown>\n#15 0x556850cd91ba <unknown>\n#16 0x556850cd9b8e <unknown>\n#17 0x556850f7059b <unknown>\n#18 0x556850f7434b <unknown>\n#19 0x556850f5c681 <unknown>\n#20 0x556850f74eb2 <unknown>\n#21 0x556850f416af <unknown>\n#22 0x556850f9b428 <unknown>\n#23 0x556850f9b600 <unknown>\n#24 0x556850faaf84 <unknown>\n#25 0x7f58dd494ac3 <unknown>",
  "statusTrace" : "self = <tests.test_footer.test_footer.TestFooter object at 0x7f17c83af5c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f9d707d4b81d95ac2b755108ac23751\")>\nurl = 'https://pulsewave.ru/'\n\n    @pytest.mark.parametrize('url', FooterConstant.PAGES)\n    @pytest.mark.smoke\n    def test_get_all_cookies(self, driver, url):\n        allure.dynamic.title(f\"Проверка попапа о принятии файлов cookie на странице {url}\")\n        page = FooterPage(driver)\n>       page.get_page_open(driver, url)\n\ntests/test_footer/test_footer.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/footer.py:50: in get_page_open\n    driver.get(url)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c7dc0f80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x556850f9b600 \\\\u003Cunknown>\\\\n#24 0x556850faaf84 \\\\u003Cunknown>\\\\n#25 0x7f58dd494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome-headless-shell=124.0.6367.60)\nE       Stacktrace:\nE       #0 0x556850fabe33 <unknown>\nE       #1 0x556850c9b567 <unknown>\nE       #2 0x556850c93879 <unknown>\nE       #3 0x556850c83852 <unknown>\nE       #4 0x556850c84e44 <unknown>\nE       #5 0x556850c83bbe <unknown>\nE       #6 0x556850c832e0 <unknown>\nE       #7 0x556850c83181 <unknown>\nE       #8 0x556850c810ec <unknown>\nE       #9 0x556850c8160a <unknown>\nE       #10 0x556850c9deef <unknown>\nE       #11 0x556850d27695 <unknown>\nE       #12 0x556850d08362 <unknown>\nE       #13 0x556850d26ae2 <unknown>\nE       #14 0x556850d08103 <unknown>\nE       #15 0x556850cd91ba <unknown>\nE       #16 0x556850cd9b8e <unknown>\nE       #17 0x556850f7059b <unknown>\nE       #18 0x556850f7434b <unknown>\nE       #19 0x556850f5c681 <unknown>\nE       #20 0x556850f74eb2 <unknown>\nE       #21 0x556850f416af <unknown>\nE       #22 0x556850f9b428 <unknown>\nE       #23 0x556850f9b600 <unknown>\nE       #24 0x556850faaf84 <unknown>\nE       #25 0x7f58dd494ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1714443483373,
      "stop" : 1714443483373,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1714443483355,
      "stop" : 1714443483372,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1714443526082,
      "stop" : 1714443539863,
      "duration" : 13781
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x556850fabe33 <unknown>\n#1 0x556850c9b567 <unknown>\n#2 0x556850c93879 <unknown>\n#3 0x556850c83852 <unknown>\n#4 0x556850c84e44 <unknown>\n#5 0x556850c83bbe <unknown>\n#6 0x556850c832e0 <unknown>\n#7 0x556850c83181 <unknown>\n#8 0x556850c810ec <unknown>\n#9 0x556850c8160a <unknown>\n#10 0x556850c9deef <unknown>\n#11 0x556850d27695 <unknown>\n#12 0x556850d08362 <unknown>\n#13 0x556850d26ae2 <unknown>\n#14 0x556850d08103 <unknown>\n#15 0x556850cd91ba <unknown>\n#16 0x556850cd9b8e <unknown>\n#17 0x556850f7059b <unknown>\n#18 0x556850f7434b <unknown>\n#19 0x556850f5c681 <unknown>\n#20 0x556850f74eb2 <unknown>\n#21 0x556850f416af <unknown>\n#22 0x556850f9b428 <unknown>\n#23 0x556850f9b600 <unknown>\n#24 0x556850faaf84 <unknown>\n#25 0x7f58dd494ac3 <unknown>",
    "statusTrace" : "self = <tests.test_footer.test_footer.TestFooter object at 0x7f17c83af5c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f9d707d4b81d95ac2b755108ac23751\")>\nurl = 'https://pulsewave.ru/'\n\n    @pytest.mark.parametrize('url', FooterConstant.PAGES)\n    @pytest.mark.smoke\n    def test_get_all_cookies(self, driver, url):\n        allure.dynamic.title(f\"Проверка попапа о принятии файлов cookie на странице {url}\")\n        page = FooterPage(driver)\n>       page.get_page_open(driver, url)\n\ntests/test_footer/test_footer.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/footer.py:50: in get_page_open\n    driver.get(url)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f17c7dc0f80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x556850f9b600 \\\\u003Cunknown>\\\\n#24 0x556850faaf84 \\\\u003Cunknown>\\\\n#25 0x7f58dd494ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome-headless-shell=124.0.6367.60)\nE       Stacktrace:\nE       #0 0x556850fabe33 <unknown>\nE       #1 0x556850c9b567 <unknown>\nE       #2 0x556850c93879 <unknown>\nE       #3 0x556850c83852 <unknown>\nE       #4 0x556850c84e44 <unknown>\nE       #5 0x556850c83bbe <unknown>\nE       #6 0x556850c832e0 <unknown>\nE       #7 0x556850c83181 <unknown>\nE       #8 0x556850c810ec <unknown>\nE       #9 0x556850c8160a <unknown>\nE       #10 0x556850c9deef <unknown>\nE       #11 0x556850d27695 <unknown>\nE       #12 0x556850d08362 <unknown>\nE       #13 0x556850d26ae2 <unknown>\nE       #14 0x556850d08103 <unknown>\nE       #15 0x556850cd91ba <unknown>\nE       #16 0x556850cd9b8e <unknown>\nE       #17 0x556850f7059b <unknown>\nE       #18 0x556850f7434b <unknown>\nE       #19 0x556850f5c681 <unknown>\nE       #20 0x556850f74eb2 <unknown>\nE       #21 0x556850f416af <unknown>\nE       #22 0x556850f9b428 <unknown>\nE       #23 0x556850f9b600 <unknown>\nE       #24 0x556850faaf84 <unknown>\nE       #25 0x7f58dd494ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException",
    "steps" : [ {
      "name" : "Открыть страницу 'https://pulsewave.ru/'",
      "time" : {
        "start" : 1714443539864,
        "stop" : 1714443540564,
        "duration" : 700
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x556850fabe33 <unknown>\n#1 0x556850c9b567 <unknown>\n#2 0x556850c93879 <unknown>\n#3 0x556850c83852 <unknown>\n#4 0x556850c84e44 <unknown>\n#5 0x556850c83bbe <unknown>\n#6 0x556850c832e0 <unknown>\n#7 0x556850c83181 <unknown>\n#8 0x556850c810ec <unknown>\n#9 0x556850c8160a <unknown>\n#10 0x556850c9deef <unknown>\n#11 0x556850d27695 <unknown>\n#12 0x556850d08362 <unknown>\n#13 0x556850d26ae2 <unknown>\n#14 0x556850d08103 <unknown>\n#15 0x556850cd91ba <unknown>\n#16 0x556850cd9b8e <unknown>\n#17 0x556850f7059b <unknown>\n#18 0x556850f7434b <unknown>\n#19 0x556850f5c681 <unknown>\n#20 0x556850f74eb2 <unknown>\n#21 0x556850f416af <unknown>\n#22 0x556850f9b428 <unknown>\n#23 0x556850f9b600 <unknown>\n#24 0x556850faaf84 <unknown>\n#25 0x7f58dd494ac3 <unknown>\n\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/pages/footer.py\", line 50, in get_page_open\n    driver.get(url)\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 356, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "c71b098f48763439",
      "name" : "Screenshot",
      "source" : "c71b098f48763439.png",
      "type" : "image/png",
      "size" : 10592
    }, {
      "uid" : "7c1e9df3f7ee4bcf",
      "name" : "HTML source",
      "source" : "7c1e9df3f7ee4bcf.html",
      "type" : "text/html",
      "size" : 39
    } ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1714443540821,
      "stop" : 1714443540876,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование Футера"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_footer"
  }, {
    "name" : "suite",
    "value" : "test_footer"
  }, {
    "name" : "subSuite",
    "value" : "TestFooter"
  }, {
    "name" : "host",
    "value" : "fv-az1385-609"
  }, {
    "name" : "thread",
    "value" : "2312-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_footer.test_footer"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "browser",
    "value" : "'chrome'"
  }, {
    "name" : "url",
    "value" : "'https://pulsewave.ru/'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 11,
        "unknown" : 0,
        "total" : 14
      },
      "items" : [ {
        "uid" : "6224ce8ba9909a30",
        "reportUrl" : "https://Nat754.github.io/PulseWave/9//#testresult/6224ce8ba9909a30",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome-headless-shell=124.0.6367.60)\nStacktrace:\n#0 0x55d70728be33 <unknown>\n#1 0x55d706f7b567 <unknown>\n#2 0x55d706f73879 <unknown>\n#3 0x55d706f63852 <unknown>\n#4 0x55d706f64e44 <unknown>\n#5 0x55d706f63bbe <unknown>\n#6 0x55d706f632e0 <unknown>\n#7 0x55d706f63181 <unknown>\n#8 0x55d706f610ec <unknown>\n#9 0x55d706f6160a <unknown>\n#10 0x55d706f7deef <unknown>\n#11 0x55d707007695 <unknown>\n#12 0x55d706fe8362 <unknown>\n#13 0x55d707006ae2 <unknown>\n#14 0x55d706fe8103 <unknown>\n#15 0x55d706fb91ba <unknown>\n#16 0x55d706fb9b8e <unknown>\n#17 0x55d70725059b <unknown>\n#18 0x55d70725434b <unknown>\n#19 0x55d70723c681 <unknown>\n#20 0x55d707254eb2 <unknown>\n#21 0x55d7072216af <unknown>\n#22 0x55d70727b428 <unknown>\n#23 0x55d70727b600 <unknown>\n#24 0x55d70728af84 <unknown>\n#25 0x7fda2d294ac3 <unknown>",
        "time" : {
          "start" : 1714357201210,
          "stop" : 1714357201516,
          "duration" : 306
        }
      }, {
        "uid" : "f31cffc81a1393f3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/8//#testresult/f31cffc81a1393f3",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x560b29808e33 <unknown>\n#1 0x560b294f8567 <unknown>\n#2 0x560b2954327d <unknown>\n#3 0x560b29543331 <unknown>\n#4 0x560b29586624 <unknown>\n#5 0x560b2956538d <unknown>\n#6 0x560b29583ae2 <unknown>\n#7 0x560b29565103 <unknown>\n#8 0x560b295361ba <unknown>\n#9 0x560b29536b8e <unknown>\n#10 0x560b297cd59b <unknown>\n#11 0x560b297d134b <unknown>\n#12 0x560b297b9681 <unknown>\n#13 0x560b297d1eb2 <unknown>\n#14 0x560b2979e6af <unknown>\n#15 0x560b297f8428 <unknown>\n#16 0x560b297f8600 <unknown>\n#17 0x560b29807f84 <unknown>\n#18 0x7f27f9894ac3 <unknown>",
        "time" : {
          "start" : 1714270994082,
          "stop" : 1714271014974,
          "duration" : 20892
        }
      }, {
        "uid" : "1ef4ee9215b47d15",
        "reportUrl" : "https://Nat754.github.io/PulseWave/7//#testresult/1ef4ee9215b47d15",
        "status" : "passed",
        "time" : {
          "start" : 1714184684817,
          "stop" : 1714184690158,
          "duration" : 5341
        }
      }, {
        "uid" : "ac215bb09ed5e371",
        "reportUrl" : "https://Nat754.github.io/PulseWave/6//#testresult/ac215bb09ed5e371",
        "status" : "passed",
        "time" : {
          "start" : 1714148207754,
          "stop" : 1714148212226,
          "duration" : 4472
        }
      }, {
        "uid" : "fd67ec6b4d98be13",
        "reportUrl" : "https://Nat754.github.io/PulseWave/6//#testresult/fd67ec6b4d98be13",
        "status" : "passed",
        "time" : {
          "start" : 1714098256135,
          "stop" : 1714098259733,
          "duration" : 3598
        }
      }, {
        "uid" : "564545adbebb5bc9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/5//#testresult/564545adbebb5bc9",
        "status" : "passed",
        "time" : {
          "start" : 1714014174078,
          "stop" : 1714014177547,
          "duration" : 3469
        }
      }, {
        "uid" : "c9c080d533f381b2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/211//#testresult/c9c080d533f381b2",
        "status" : "passed",
        "time" : {
          "start" : 1713945650881,
          "stop" : 1713945654725,
          "duration" : 3844
        }
      }, {
        "uid" : "24ae93f9649a78f0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/4//#testresult/24ae93f9649a78f0",
        "status" : "passed",
        "time" : {
          "start" : 1713925446638,
          "stop" : 1713925451513,
          "duration" : 4875
        }
      }, {
        "uid" : "8889c49f92d5f6b4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/211//#testresult/8889c49f92d5f6b4",
        "status" : "passed",
        "time" : {
          "start" : 1713901271645,
          "stop" : 1713901277193,
          "duration" : 5548
        }
      }, {
        "uid" : "d41e2467e8fd0d61",
        "reportUrl" : "https://Nat754.github.io/PulseWave/210//#testresult/d41e2467e8fd0d61",
        "status" : "passed",
        "time" : {
          "start" : 1713885416956,
          "stop" : 1713885420793,
          "duration" : 3837
        }
      }, {
        "uid" : "2b73086783ea56cc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/209//#testresult/2b73086783ea56cc",
        "status" : "passed",
        "time" : {
          "start" : 1713883330757,
          "stop" : 1713883335302,
          "duration" : 4545
        }
      }, {
        "uid" : "155178b3bb070aed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/209//#testresult/155178b3bb070aed",
        "status" : "passed",
        "time" : {
          "start" : 1713881831804,
          "stop" : 1713881836029,
          "duration" : 4225
        }
      }, {
        "uid" : "8008c6ac43aae416",
        "reportUrl" : "https://Nat754.github.io/PulseWave/208//#testresult/8008c6ac43aae416",
        "status" : "passed",
        "time" : {
          "start" : 1713879006135,
          "stop" : 1713879010060,
          "duration" : 3925
        }
      } ]
    },
    "tags" : [ "smoke" ]
  },
  "source" : "f49734ab699426cc.json",
  "parameterValues" : [ "'chrome'", "'https://pulsewave.ru/'" ]
}