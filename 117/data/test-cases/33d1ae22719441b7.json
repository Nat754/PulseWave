{
  "uid" : "33d1ae22719441b7",
  "name" : "POST Создать пользователя с корректными данными",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user",
  "historyId" : "7567ac6e35ae5b0e6a9e09369f0d3da4",
  "time" : {
    "start" : 1702502789055,
    "stop" : 1702502794888,
    "duration" : 5833
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50> = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>.code",
  "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>\n\n    @allure.title(\"POST Создать пользователя с корректными данными\")\n    def test_post_create_user(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER)\n        time.sleep(5)\n        with allure.step(f\"Expected status {self.code.STATUS_201}\"):\n>           assert response.status_code == self.code.STATUS_201, \\\n                f\"Expected status {self.code.STATUS_201}, actual status {response.status_code}\"\nE           AssertionError: Expected status 201, actual status 400\nE           assert 400 == 201\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50>.STATUS_201\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50> = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>.code\n\ntests/test_api/test_api.py:20: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1702502788984,
      "stop" : 1702502789055,
      "duration" : 71
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1702502789055,
      "stop" : 1702502789055,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50> = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>.code",
    "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>\n\n    @allure.title(\"POST Создать пользователя с корректными данными\")\n    def test_post_create_user(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER)\n        time.sleep(5)\n        with allure.step(f\"Expected status {self.code.STATUS_201}\"):\n>           assert response.status_code == self.code.STATUS_201, \\\n                f\"Expected status {self.code.STATUS_201}, actual status {response.status_code}\"\nE           AssertionError: Expected status 201, actual status 400\nE           assert 400 == 201\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50>.STATUS_201\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50> = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>.code\n\ntests/test_api/test_api.py:20: AssertionError",
    "steps" : [ {
      "name" : "Expected status 201",
      "time" : {
        "start" : 1702502794888,
        "stop" : 1702502794888,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f50d135ed50> = <tests.test_api.test_api.TestAPI object at 0x7f50d115c1d0>.code\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 20, in test_post_create_user\n    assert response.status_code == self.code.STATUS_201, \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az915-697"
  }, {
    "name" : "thread",
    "value" : "2300-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "33d1ae22719441b7.json",
  "parameterValues" : [ ]
}