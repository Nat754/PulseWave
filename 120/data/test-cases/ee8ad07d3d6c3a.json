{
  "uid" : "ee8ad07d3d6c3a",
  "name" : "Окно регистрации сообщение 'Я согласен получать новости и обновления PulseWave'",
  "fullName" : "tests.test_signup_page.test_signup_page.TestSignupPage#test_signup_message_pulsewave_policy",
  "historyId" : "82780a2a95884b044584a0aab01742ca",
  "time" : {
    "start" : 1702629067305,
    "stop" : 1702629067331,
    "duration" : 26
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Нет сообщения: \"Я согласен получать новости и обновления PulseWave\"\nassert <selenium.webdriver.remote.webelement.WebElement (session=\"c4645b18da154e76f57907fab75aa925\", element=\"B85EC0A012E70C027DB7CA4733905B9D_element_26\")> == 'Я согласен получать новости и обновления PulseWave'\n +  where 'Я согласен получать новости и обновления PulseWave' = <class 'tests.constant.Messages'>.PULSEWAVE_POLICY_MSG\n +    where <class 'tests.constant.Messages'> = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>.message",
  "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7fd267ea5410>\n\n    @allure.title(f\"Окно регистрации сообщение '{message.PULSEWAVE_POLICY_MSG}'\")\n    @pytest.mark.smoke\n    def test_signup_message_pulsewave_policy(self, signup_page_open):\n        element = signup_page_open.check_pulsewave_policy_message()\n        with allure.step(f'Проверить текст сообщения: \"{self.message.PULSEWAVE_POLICY_MSG}\"'):\n>           assert element == self.message.PULSEWAVE_POLICY_MSG, f'Нет сообщения: \"{self.message.PULSEWAVE_POLICY_MSG}\"'\nE           AssertionError: Нет сообщения: \"Я согласен получать новости и обновления PulseWave\"\nE           assert <selenium.webdriver.remote.webelement.WebElement (session=\"c4645b18da154e76f57907fab75aa925\", element=\"B85EC0A012E70C027DB7CA4733905B9D_element_26\")> == 'Я согласен получать новости и обновления PulseWave'\nE            +  where 'Я согласен получать новости и обновления PulseWave' = <class 'tests.constant.Messages'>.PULSEWAVE_POLICY_MSG\nE            +    where <class 'tests.constant.Messages'> = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>.message\n\ntests/test_signup_page/test_signup_page.py:56: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1702629065297,
      "stop" : 1702629065962,
      "duration" : 665
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1702628788362,
      "stop" : 1702628788362,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1702628788290,
      "stop" : 1702628788361,
      "duration" : 71
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "signup_page_open",
    "time" : {
      "start" : 1702629065962,
      "stop" : 1702629067305,
      "duration" : 1343
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Проверка видимости кнопки 'Принимаю все' в сообщении о принятии файлов cookie",
      "time" : {
        "start" : 1702629067251,
        "stop" : 1702629067278,
        "duration" : 27
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Нет сообщения: \"Я согласен получать новости и обновления PulseWave\"\nassert <selenium.webdriver.remote.webelement.WebElement (session=\"c4645b18da154e76f57907fab75aa925\", element=\"B85EC0A012E70C027DB7CA4733905B9D_element_26\")> == 'Я согласен получать новости и обновления PulseWave'\n +  where 'Я согласен получать новости и обновления PulseWave' = <class 'tests.constant.Messages'>.PULSEWAVE_POLICY_MSG\n +    where <class 'tests.constant.Messages'> = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>.message",
    "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7fd267ea5410>\n\n    @allure.title(f\"Окно регистрации сообщение '{message.PULSEWAVE_POLICY_MSG}'\")\n    @pytest.mark.smoke\n    def test_signup_message_pulsewave_policy(self, signup_page_open):\n        element = signup_page_open.check_pulsewave_policy_message()\n        with allure.step(f'Проверить текст сообщения: \"{self.message.PULSEWAVE_POLICY_MSG}\"'):\n>           assert element == self.message.PULSEWAVE_POLICY_MSG, f'Нет сообщения: \"{self.message.PULSEWAVE_POLICY_MSG}\"'\nE           AssertionError: Нет сообщения: \"Я согласен получать новости и обновления PulseWave\"\nE           assert <selenium.webdriver.remote.webelement.WebElement (session=\"c4645b18da154e76f57907fab75aa925\", element=\"B85EC0A012E70C027DB7CA4733905B9D_element_26\")> == 'Я согласен получать новости и обновления PulseWave'\nE            +  where 'Я согласен получать новости и обновления PulseWave' = <class 'tests.constant.Messages'>.PULSEWAVE_POLICY_MSG\nE            +    where <class 'tests.constant.Messages'> = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>.message\n\ntests/test_signup_page/test_signup_page.py:56: AssertionError",
    "steps" : [ {
      "name" : "Видимость сообщения: 'Я согласен получать новости и обновления PulseWave'",
      "time" : {
        "start" : 1702629067305,
        "stop" : 1702629067330,
        "duration" : 25
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Проверить текст сообщения: \"Я согласен получать новости и обновления PulseWave\"",
      "time" : {
        "start" : 1702629067330,
        "stop" : 1702629067331,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Нет сообщения: \"Я согласен получать новости и обновления PulseWave\"\nassert <selenium.webdriver.remote.webelement.WebElement (session=\"c4645b18da154e76f57907fab75aa925\", element=\"B85EC0A012E70C027DB7CA4733905B9D_element_26\")> == 'Я согласен получать новости и обновления PulseWave'\n +  where 'Я согласен получать новости и обновления PulseWave' = <class 'tests.constant.Messages'>.PULSEWAVE_POLICY_MSG\n +    where <class 'tests.constant.Messages'> = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fd2672e85d0>.message\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_signup_page/test_signup_page.py\", line 56, in test_signup_message_pulsewave_policy\n    assert element == self.message.PULSEWAVE_POLICY_MSG, f'Нет сообщения: \"{self.message.PULSEWAVE_POLICY_MSG}\"'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "name" : "Screenshot",
      "type" : "image/png",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1702629067376,
      "stop" : 1702629067433,
      "duration" : 57
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование страницы 'Регистрация'"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_signup_page"
  }, {
    "name" : "suite",
    "value" : "test_signup_page"
  }, {
    "name" : "subSuite",
    "value" : "TestSignupPage"
  }, {
    "name" : "host",
    "value" : "fv-az984-104"
  }, {
    "name" : "thread",
    "value" : "2311-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_signup_page.test_signup_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "smoke" ]
  },
  "source" : "ee8ad07d3d6c3a.json",
  "parameterValues" : [ ]
}