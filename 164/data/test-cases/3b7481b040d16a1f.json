{
  "uid" : "3b7481b040d16a1f",
  "name" : "1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку",
  "fullName" : "tests.test_signup_page.test_signup_page.TestSignupPage#test_signup_with_correct_data_and_agree",
  "historyId" : "3f1a9a03cb3169fb36bf4b166c8deeee",
  "time" : {
    "start" : 1707215181364,
    "stop" : 1707215317157,
    "duration" : 135793
  },
  "status" : "broken",
  "statusMessage" : "TimeoutError: [Errno 110] Connection timed out",
  "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fb936cd1a00>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7fb936cfdb20>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e769c5b9405d9fd3e39f325ed3d9ad01\")>\n\n    @allure.title(\"1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку\")\n    @pytest.mark.smoke\n    def test_signup_with_correct_data_and_agree(self, signup_page_open, driver):\n        with allure.step('Заполнить поле email корректными данными'):\n            signup_page_open.put_data_to_email_field(email1)\n        with allure.step('Заполнить поле пароль сильным паролем'):\n            signup_page_open.put_data_to_password_field(password0)\n        with allure.step('Заполнить поле подтверждение пароля сильным паролем'):\n            signup_page_open.put_data_to_confirm_password_field(password0)\n        signup_page_open.check_pulsewave_policy_message().click()\n        signup_page_open.click_button_registration()\n        element = signup_page_open.get_send_invite_message()\n        with allure.step(f'Получено сообщение необходимости подтвердить регистрацию: \"{self.signup.INVITE_MSG}\"'):\n            assert element.text == self.signup.INVITE_MSG, 'Нет сообщения успеха'\n        time.sleep(2)\n>       link = signup_page_open.get_confirm_signup_to_email(email1, password1)\n\ntests/test_signup_page/test_signup_page.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/signup_page.py:20: in get_confirm_signup_to_email\n    mail = imaplib.IMAP4_SSL('imap.mail.ru')\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1306: in __init__\n    IMAP4.__init__(self, host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:202: in __init__\n    self.open(host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1319: in open\n    IMAP4.open(self, host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:312: in open\n    self.sock = self._create_socket(timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1309: in _create_socket\n    sock = IMAP4._create_socket(self, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:302: in _create_socket\n    return socket.create_connection(address)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py:852: in create_connection\n    raise exceptions[0]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('imap.mail.ru', 993), timeout = <object object at 0x7fb938d78aa0>\nsource_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, *, all_errors=False):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default. When a connection\n        cannot be created, raises the last error if *all_errors* is False,\n        and an ExceptionGroup of all errors if *all_errors* is True.\n        \"\"\"\n    \n        host, port = address\n        exceptions = []\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: [Errno 110] Connection timed out\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py:837: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1707215179750,
      "stop" : 1707215179926,
      "duration" : 176
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "signup_page_open",
    "time" : {
      "start" : 1707215179926,
      "stop" : 1707215181363,
      "duration" : 1437
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Проверка видимости кнопки 'Принимаю все' в сообщении о принятии файлов cookie",
      "time" : {
        "start" : 1707215181307,
        "stop" : 1707215181335,
        "duration" : 28
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1707214708465,
      "stop" : 1707214708483,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1707214708483,
      "stop" : 1707214708483,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TimeoutError: [Errno 110] Connection timed out",
    "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7fb936cd1a00>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7fb936cfdb20>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e769c5b9405d9fd3e39f325ed3d9ad01\")>\n\n    @allure.title(\"1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку\")\n    @pytest.mark.smoke\n    def test_signup_with_correct_data_and_agree(self, signup_page_open, driver):\n        with allure.step('Заполнить поле email корректными данными'):\n            signup_page_open.put_data_to_email_field(email1)\n        with allure.step('Заполнить поле пароль сильным паролем'):\n            signup_page_open.put_data_to_password_field(password0)\n        with allure.step('Заполнить поле подтверждение пароля сильным паролем'):\n            signup_page_open.put_data_to_confirm_password_field(password0)\n        signup_page_open.check_pulsewave_policy_message().click()\n        signup_page_open.click_button_registration()\n        element = signup_page_open.get_send_invite_message()\n        with allure.step(f'Получено сообщение необходимости подтвердить регистрацию: \"{self.signup.INVITE_MSG}\"'):\n            assert element.text == self.signup.INVITE_MSG, 'Нет сообщения успеха'\n        time.sleep(2)\n>       link = signup_page_open.get_confirm_signup_to_email(email1, password1)\n\ntests/test_signup_page/test_signup_page.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/signup_page.py:20: in get_confirm_signup_to_email\n    mail = imaplib.IMAP4_SSL('imap.mail.ru')\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1306: in __init__\n    IMAP4.__init__(self, host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:202: in __init__\n    self.open(host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1319: in open\n    IMAP4.open(self, host, port, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:312: in open\n    self.sock = self._create_socket(timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:1309: in _create_socket\n    sock = IMAP4._create_socket(self, timeout)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py:302: in _create_socket\n    return socket.create_connection(address)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py:852: in create_connection\n    raise exceptions[0]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('imap.mail.ru', 993), timeout = <object object at 0x7fb938d78aa0>\nsource_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None, *, all_errors=False):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default. When a connection\n        cannot be created, raises the last error if *all_errors* is False,\n        and an ExceptionGroup of all errors if *all_errors* is True.\n        \"\"\"\n    \n        host, port = address\n        exceptions = []\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: [Errno 110] Connection timed out\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py:837: TimeoutError",
    "steps" : [ {
      "name" : "Заполнить поле email корректными данными",
      "time" : {
        "start" : 1707215181364,
        "stop" : 1707215181442,
        "duration" : 78
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле пароль сильным паролем",
      "time" : {
        "start" : 1707215181442,
        "stop" : 1707215181497,
        "duration" : 55
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле подтверждение пароля сильным паролем",
      "time" : {
        "start" : 1707215181497,
        "stop" : 1707215181552,
        "duration" : 55
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Видимость сообщения: 'Я согласен получать новости и обновления PulseWave'",
      "time" : {
        "start" : 1707215181552,
        "stop" : 1707215181574,
        "duration" : 22
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажать кнопку 'Регистрация'",
      "time" : {
        "start" : 1707215181658,
        "stop" : 1707215181706,
        "duration" : 48
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получено сообщения о подтверждении регистрации",
      "time" : {
        "start" : 1707215181707,
        "stop" : 1707215184785,
        "duration" : 3078
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получено сообщение необходимости подтвердить регистрацию: \"Регистрация\nМы отправили вам письмо на test_pulsewave0@mail.ru.\nДля подтверждения регистрации и активации учётной записи пройдите по ссылке в письме.\nПисьмо не пришло?\nПроверьте папку Спам и нажмите кнопку «Отправить повторно».\"",
      "time" : {
        "start" : 1707215184785,
        "stop" : 1707215184796,
        "duration" : 11
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить ссылку подтверждения регистрации пользователя на емайл",
      "time" : {
        "start" : 1707215186796,
        "stop" : 1707215317136,
        "duration" : 130340
      },
      "status" : "broken",
      "statusMessage" : "TimeoutError: [Errno 110] Connection timed out\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/pages/signup_page.py\", line 20, in get_confirm_signup_to_email\n    mail = imaplib.IMAP4_SSL('imap.mail.ru')\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 1306, in __init__\n    IMAP4.__init__(self, host, port, timeout)\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 202, in __init__\n    self.open(host, port, timeout)\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 1319, in open\n    IMAP4.open(self, host, port, timeout)\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 312, in open\n    self.sock = self._create_socket(timeout)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 1309, in _create_socket\n    sock = IMAP4._create_socket(self, timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/imaplib.py\", line 302, in _create_socket\n    return socket.create_connection(address)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py\", line 852, in create_connection\n    raise exceptions[0]\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/socket.py\", line 837, in create_connection\n    sock.connect(sa)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "5eff0886aa406b3",
      "name" : "Screenshot",
      "source" : "5eff0886aa406b3.png",
      "type" : "image/png",
      "size" : 65014
    }, {
      "uid" : "f834419bc32f72af",
      "name" : "HTML source",
      "source" : "f834419bc32f72af.html",
      "type" : "text/html",
      "size" : 95533
    } ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1707215317369,
      "stop" : 1707215317427,
      "duration" : 58
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование страницы 'Регистрация'"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_signup_page"
  }, {
    "name" : "suite",
    "value" : "test_signup_page"
  }, {
    "name" : "subSuite",
    "value" : "TestSignupPage"
  }, {
    "name" : "host",
    "value" : "fv-az1393-919"
  }, {
    "name" : "thread",
    "value" : "2192-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_signup_page.test_signup_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "browser",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 1,
        "unknown" : 0,
        "total" : 3
      },
      "items" : [ {
        "uid" : "be9b07157e6c1d5e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/164//#testresult/be9b07157e6c1d5e",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558d8dc2ed93 <unknown>\n#1 0x558d8d912337 <unknown>\n#2 0x558d8d95dd60 <unknown>\n#3 0x558d8d95de51 <unknown>\n#4 0x558d8d9a1bc4 <unknown>\n#5 0x558d8d98046d <unknown>\n#6 0x558d8d99f12d <unknown>\n#7 0x558d8d9801e3 <unknown>\n#8 0x558d8d950135 <unknown>\n#9 0x558d8d95113e <unknown>\n#10 0x558d8dbf2e4b <unknown>\n#11 0x558d8dbf6dfa <unknown>\n#12 0x558d8dbdf6d5 <unknown>\n#13 0x558d8dbf7a6f <unknown>\n#14 0x558d8dbc369f <unknown>\n#15 0x558d8dc1c098 <unknown>\n#16 0x558d8dc1c262 <unknown>\n#17 0x558d8dc2df34 <unknown>\n#18 0x7fd2d6e94ac3 <unknown>",
        "time" : {
          "start" : 1707211885958,
          "stop" : 1707211906637,
          "duration" : 20679
        }
      }, {
        "uid" : "76920d5acb8830a9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/163//#testresult/76920d5acb8830a9",
        "status" : "passed",
        "time" : {
          "start" : 1707078714012,
          "stop" : 1707078721576,
          "duration" : 7564
        }
      } ]
    },
    "tags" : [ "smoke" ]
  },
  "source" : "3b7481b040d16a1f.json",
  "parameterValues" : [ "'chrome'" ]
}