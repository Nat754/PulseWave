{
  "uid" : "9c45f4192d892fae",
  "name" : "POST Регистрация пользователя без подтверждения подписки",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user_no_subscriber",
  "historyId" : "65cde6c273276871256fcbcd8d2a7b23",
  "time" : {
    "start" : 1707235811516,
    "stop" : 1707235816907,
    "duration" : 5391
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0> = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>.code",
  "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f5da8b1ba10>\n\n    @allure.title(\"POST Регистрация пользователя без подтверждения подписки\")\n    def test_post_create_user_no_subscriber(self, use_api_base):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_SUBSCRIBER)\n        time.sleep(5)\n        print(response.json())\n        with allure.step(f\"Expected status {self.code.STATUS_201}\"):\n>           assert response.status_code == self.code.STATUS_201, \\\n                f\"Expected status {self.code.STATUS_201}, actual status {response.status_code}\"\nE           AssertionError: Expected status 201, actual status 400\nE           assert 400 == 201\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0>.STATUS_201\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0> = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>.code\n\ntests/test_api/test_api.py:738: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1707235508669,
      "stop" : 1707235508669,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1707235811515,
      "stop" : 1707235811515,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1707235508650,
      "stop" : 1707235508668,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0> = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>.code",
    "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f5da8b1ba10>\n\n    @allure.title(\"POST Регистрация пользователя без подтверждения подписки\")\n    def test_post_create_user_no_subscriber(self, use_api_base):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_SUBSCRIBER)\n        time.sleep(5)\n        print(response.json())\n        with allure.step(f\"Expected status {self.code.STATUS_201}\"):\n>           assert response.status_code == self.code.STATUS_201, \\\n                f\"Expected status {self.code.STATUS_201}, actual status {response.status_code}\"\nE           AssertionError: Expected status 201, actual status 400\nE           assert 400 == 201\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0>.STATUS_201\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0> = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>.code\n\ntests/test_api/test_api.py:738: AssertionError",
    "steps" : [ {
      "name" : "Expected status 201",
      "time" : {
        "start" : 1707235816906,
        "stop" : 1707235816907,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status 201, actual status 400\nassert 400 == 201\n +  where 400 = <Response [400]>.status_code\n +  and   201 = <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0>.STATUS_201\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f5da918e3c0> = <tests.test_api.test_api.TestAPI object at 0x7f5da9159c70>.code\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 738, in test_post_create_user_no_subscriber\n    assert response.status_code == self.code.STATUS_201, \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az885-230"
  }, {
    "name" : "thread",
    "value" : "2210-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 12,
        "unknown" : 0,
        "total" : 13
      },
      "items" : [ {
        "uid" : "34cf095b4578d3a5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/34cf095b4578d3a5",
        "status" : "passed",
        "time" : {
          "start" : 1707220015763,
          "stop" : 1707220022003,
          "duration" : 6240
        }
      }, {
        "uid" : "84be3e0f712d0e3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/84be3e0f712d0e3",
        "status" : "passed",
        "time" : {
          "start" : 1707218438359,
          "stop" : 1707218444563,
          "duration" : 6204
        }
      }, {
        "uid" : "88f569f62a1ea3f9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/88f569f62a1ea3f9",
        "status" : "passed",
        "time" : {
          "start" : 1707217473934,
          "stop" : 1707217480024,
          "duration" : 6090
        }
      }, {
        "uid" : "ea9b9c2215b5dfb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/165//#testresult/ea9b9c2215b5dfb",
        "status" : "passed",
        "time" : {
          "start" : 1707216570760,
          "stop" : 1707216576999,
          "duration" : 6239
        }
      }, {
        "uid" : "d7e68fe74136d3fe",
        "reportUrl" : "https://Nat754.github.io/PulseWave/164//#testresult/d7e68fe74136d3fe",
        "status" : "passed",
        "time" : {
          "start" : 1707214895604,
          "stop" : 1707214901796,
          "duration" : 6192
        }
      }, {
        "uid" : "549b17ac8c342825",
        "reportUrl" : "https://Nat754.github.io/PulseWave/164//#testresult/549b17ac8c342825",
        "status" : "passed",
        "time" : {
          "start" : 1707211360674,
          "stop" : 1707211367008,
          "duration" : 6334
        }
      }, {
        "uid" : "96c07f4986f7c2f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/163//#testresult/96c07f4986f7c2f",
        "status" : "passed",
        "time" : {
          "start" : 1707078421905,
          "stop" : 1707078428065,
          "duration" : 6160
        }
      }, {
        "uid" : "6f0557f9c79ca475",
        "reportUrl" : "https://Nat754.github.io/PulseWave/162//#testresult/6f0557f9c79ca475",
        "status" : "passed",
        "time" : {
          "start" : 1706456453055,
          "stop" : 1706456459401,
          "duration" : 6346
        }
      }, {
        "uid" : "af5d63a406fb6759",
        "reportUrl" : "https://Nat754.github.io/PulseWave/161//#testresult/af5d63a406fb6759",
        "status" : "passed",
        "time" : {
          "start" : 1706393136651,
          "stop" : 1706393143146,
          "duration" : 6495
        }
      }, {
        "uid" : "3c21ea6179d6693a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/161//#testresult/3c21ea6179d6693a",
        "status" : "passed",
        "time" : {
          "start" : 1706391765734,
          "stop" : 1706391772158,
          "duration" : 6424
        }
      }, {
        "uid" : "22a07d757287b273",
        "reportUrl" : "https://Nat754.github.io/PulseWave/160//#testresult/22a07d757287b273",
        "status" : "passed",
        "time" : {
          "start" : 1706133438690,
          "stop" : 1706133445079,
          "duration" : 6389
        }
      }, {
        "uid" : "f683d82c19d47fcd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/159//#testresult/f683d82c19d47fcd",
        "status" : "passed",
        "time" : {
          "start" : 1706129829902,
          "stop" : 1706129836085,
          "duration" : 6183
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "9c45f4192d892fae.json",
  "parameterValues" : [ ]
}