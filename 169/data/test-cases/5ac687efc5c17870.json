{
  "uid" : "5ac687efc5c17870",
  "name" : "POST Создать пару токенов access и refresh",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_jwt",
  "historyId" : "df6d13924542b5c34b8040231b96e396",
  "time" : {
    "start" : 1707252302685,
    "stop" : 1707252303238,
    "duration" : 553
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status 200, actual status 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980> = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>.code",
  "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>\n\n    @allure.title(\"POST Создать пару токенов access и refresh\")\n    def test_post_create_jwt(self):\n        url = f'{self.constant.BASE_URL}auth/jwt/create/'\n        response = requests.post(url, json={\"email\": email1, \"password\": password0})\n        print(response.json())\n        with allure.step(f\"Expected status {self.code.STATUS_200}\"):\n>           assert response.status_code == self.code.STATUS_200, \\\n                f\"Expected status {self.code.STATUS_200}, actual status {response.status_code}\"\nE           AssertionError: Expected status 200, actual status 401\nE           assert 401 == 200\nE            +  where 401 = <Response [401]>.status_code\nE            +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980>.STATUS_200\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980> = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>.code\n\ntests/test_api/test_api.py:150: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1707252154029,
      "stop" : 1707252154048,
      "duration" : 19
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1707252154049,
      "stop" : 1707252154049,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status 200, actual status 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980> = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>.code",
    "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>\n\n    @allure.title(\"POST Создать пару токенов access и refresh\")\n    def test_post_create_jwt(self):\n        url = f'{self.constant.BASE_URL}auth/jwt/create/'\n        response = requests.post(url, json={\"email\": email1, \"password\": password0})\n        print(response.json())\n        with allure.step(f\"Expected status {self.code.STATUS_200}\"):\n>           assert response.status_code == self.code.STATUS_200, \\\n                f\"Expected status {self.code.STATUS_200}, actual status {response.status_code}\"\nE           AssertionError: Expected status 200, actual status 401\nE           assert 401 == 200\nE            +  where 401 = <Response [401]>.status_code\nE            +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980>.STATUS_200\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980> = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>.code\n\ntests/test_api/test_api.py:150: AssertionError",
    "steps" : [ {
      "name" : "Expected status 200",
      "time" : {
        "start" : 1707252303237,
        "stop" : 1707252303237,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status 200, actual status 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7fa9b7e44980> = <tests.test_api.test_api.TestAPI object at 0x7fa9b7d85b50>.code\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 150, in test_post_create_jwt\n    assert response.status_code == self.code.STATUS_200, \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az569-69"
  }, {
    "name" : "thread",
    "value" : "2229-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 17,
        "unknown" : 0,
        "total" : 19
      },
      "items" : [ {
        "uid" : "3695097055fee0e2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/3695097055fee0e2",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected status 200, actual status 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7fafd0da7f50>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7fafd0da7f50> = <tests.test_api.test_api.TestAPI object at 0x7fafd0d9da90>.code",
        "time" : {
          "start" : 1707245105292,
          "stop" : 1707245106031,
          "duration" : 739
        }
      }, {
        "uid" : "9be29b5b66ee4070",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/9be29b5b66ee4070",
        "status" : "passed",
        "time" : {
          "start" : 1707243795164,
          "stop" : 1707243795882,
          "duration" : 718
        }
      }, {
        "uid" : "9b358fd89b139d2c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/168//#testresult/9b358fd89b139d2c",
        "status" : "passed",
        "time" : {
          "start" : 1707241809083,
          "stop" : 1707241809695,
          "duration" : 612
        }
      }, {
        "uid" : "c64e813775eaad83",
        "reportUrl" : "https://Nat754.github.io/PulseWave/168//#testresult/c64e813775eaad83",
        "status" : "passed",
        "time" : {
          "start" : 1707240845812,
          "stop" : 1707240846373,
          "duration" : 561
        }
      }, {
        "uid" : "a5f0a75eb291cbe2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/167//#testresult/a5f0a75eb291cbe2",
        "status" : "passed",
        "time" : {
          "start" : 1707239299902,
          "stop" : 1707239300639,
          "duration" : 737
        }
      }, {
        "uid" : "92ad11c8770cb7ba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/92ad11c8770cb7ba",
        "status" : "passed",
        "time" : {
          "start" : 1707235530737,
          "stop" : 1707235531306,
          "duration" : 569
        }
      }, {
        "uid" : "a622edb396f4b6b2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/a622edb396f4b6b2",
        "status" : "passed",
        "time" : {
          "start" : 1707219841923,
          "stop" : 1707219842519,
          "duration" : 596
        }
      }, {
        "uid" : "27f15fee59d7e038",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/27f15fee59d7e038",
        "status" : "passed",
        "time" : {
          "start" : 1707218147199,
          "stop" : 1707218147875,
          "duration" : 676
        }
      }, {
        "uid" : "ac7b647ad938918d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/166//#testresult/ac7b647ad938918d",
        "status" : "passed",
        "time" : {
          "start" : 1707217183130,
          "stop" : 1707217183822,
          "duration" : 692
        }
      }, {
        "uid" : "b87082c6e912e82b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/165//#testresult/b87082c6e912e82b",
        "status" : "passed",
        "time" : {
          "start" : 1707216409394,
          "stop" : 1707216410080,
          "duration" : 686
        }
      }, {
        "uid" : "12e8a9ce9cda9923",
        "reportUrl" : "https://Nat754.github.io/PulseWave/164//#testresult/12e8a9ce9cda9923",
        "status" : "passed",
        "time" : {
          "start" : 1707214729693,
          "stop" : 1707214730254,
          "duration" : 561
        }
      }, {
        "uid" : "b4b65eafd62105cb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/164//#testresult/b4b65eafd62105cb",
        "status" : "passed",
        "time" : {
          "start" : 1707211150526,
          "stop" : 1707211151275,
          "duration" : 749
        }
      }, {
        "uid" : "4159bcf516c0130",
        "reportUrl" : "https://Nat754.github.io/PulseWave/163//#testresult/4159bcf516c0130",
        "status" : "passed",
        "time" : {
          "start" : 1707078257772,
          "stop" : 1707078258344,
          "duration" : 572
        }
      }, {
        "uid" : "fabfa0ed600ae473",
        "reportUrl" : "https://Nat754.github.io/PulseWave/162//#testresult/fabfa0ed600ae473",
        "status" : "passed",
        "time" : {
          "start" : 1706456250533,
          "stop" : 1706456251294,
          "duration" : 761
        }
      }, {
        "uid" : "59742e29a3e942e4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/161//#testresult/59742e29a3e942e4",
        "status" : "passed",
        "time" : {
          "start" : 1706392952289,
          "stop" : 1706392953034,
          "duration" : 745
        }
      }, {
        "uid" : "3a6b5ff5afeb80ca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/161//#testresult/3a6b5ff5afeb80ca",
        "status" : "passed",
        "time" : {
          "start" : 1706391611677,
          "stop" : 1706391612432,
          "duration" : 755
        }
      }, {
        "uid" : "a8c205a619e82c42",
        "reportUrl" : "https://Nat754.github.io/PulseWave/160//#testresult/a8c205a619e82c42",
        "status" : "passed",
        "time" : {
          "start" : 1706133286352,
          "stop" : 1706133287797,
          "duration" : 1445
        }
      }, {
        "uid" : "fd137ee03ab233d7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/159//#testresult/fd137ee03ab233d7",
        "status" : "passed",
        "time" : {
          "start" : 1706129684322,
          "stop" : 1706129684911,
          "duration" : 589
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5ac687efc5c17870.json",
  "parameterValues" : [ ]
}