{
  "uid" : "662c6bd4132b0c29",
  "name" : "3.2, 3.2.1 Восстановить пароль на корректный емайл",
  "fullName" : "tests.test_password_recovery.test_password_recovery.TestPasswordRecoveryPage#test_recovery_password_to_fill_correct_email",
  "historyId" : "3fbb91d2b204c3d1abb80d32ac377e08",
  "time" : {
    "start" : 1709484336930,
    "stop" : 1709484349279,
    "duration" : 12349
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x5573a04d9793 <unknown>\n#1 0x5573a01cd017 <unknown>\n#2 0x5573a01b49bf <unknown>\n#3 0x5573a01b2d43 <unknown>\n#4 0x5573a01b328a <unknown>\n#5 0x5573a01cf97e <unknown>\n#6 0x5573a0259985 <unknown>\n#7 0x5573a023a3d2 <unknown>\n#8 0x5573a0258dd9 <unknown>\n#9 0x5573a023a173 <unknown>\n#10 0x5573a020b2d3 <unknown>\n#11 0x5573a020bc9e <unknown>\n#12 0x5573a049d8cb <unknown>\n#13 0x5573a04a1745 <unknown>\n#14 0x5573a048a2e1 <unknown>\n#15 0x5573a04a22d2 <unknown>\n#16 0x5573a046e17f <unknown>\n#17 0x5573a04c7dc8 <unknown>\n#18 0x5573a04c7fc3 <unknown>\n#19 0x5573a04d8944 <unknown>\n#20 0x7f48a0a94ac3 <unknown>",
  "statusTrace" : "self = <tests.test_password_recovery.test_password_recovery.TestPasswordRecoveryPage object at 0x7feeb2e1f0b0>\nrecovery_page_open = <pages.password_recovery_page.PasswordRecoveryPage object at 0x7feeb2e54b90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04ebc799a2d0d645ac1de3c7093e7679\")>\n\n    @allure.title(\"3.2, 3.2.1 Восстановить пароль на корректный емайл\")\n    @pytest.mark.regress\n    def test_recovery_password_to_fill_correct_email(self, recovery_page_open, driver):\n        with allure.step('Заполнить поле емайл'):\n            recovery_page_open.fill_email_to_recovery_password(email_auth)\n        with allure.step(\"Нажать кнопку 'Продолжить'\"):\n            recovery_page_open.click_resume_button()\n        time.sleep(10)  # Получить ссылку на емайл\n        link = self.page.get_link_recovery_password_by_email()\n>       driver.get(link)\n\ntests/test_password_recovery/test_password_recovery.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7feeb2e55bb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome-h...\\\\n#18 0x5573a04c7fc3 \\\\u003Cunknown>\\\\n#19 0x5573a04d8944 \\\\u003Cunknown>\\\\n#20 0x7f48a0a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome-headless-shell=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x5573a04d9793 <unknown>\nE       #1 0x5573a01cd017 <unknown>\nE       #2 0x5573a01b49bf <unknown>\nE       #3 0x5573a01b2d43 <unknown>\nE       #4 0x5573a01b328a <unknown>\nE       #5 0x5573a01cf97e <unknown>\nE       #6 0x5573a0259985 <unknown>\nE       #7 0x5573a023a3d2 <unknown>\nE       #8 0x5573a0258dd9 <unknown>\nE       #9 0x5573a023a173 <unknown>\nE       #10 0x5573a020b2d3 <unknown>\nE       #11 0x5573a020bc9e <unknown>\nE       #12 0x5573a049d8cb <unknown>\nE       #13 0x5573a04a1745 <unknown>\nE       #14 0x5573a048a2e1 <unknown>\nE       #15 0x5573a04a22d2 <unknown>\nE       #16 0x5573a046e17f <unknown>\nE       #17 0x5573a04c7dc8 <unknown>\nE       #18 0x5573a04c7fc3 <unknown>\nE       #19 0x5573a04d8944 <unknown>\nE       #20 0x7f48a0a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709483597901,
      "stop" : 1709483597919,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709483597919,
      "stop" : 1709483597919,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "recovery_page_open",
    "time" : {
      "start" : 1709484334806,
      "stop" : 1709484336930,
      "duration" : 2124
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Проверка видимости кнопки 'Принимаю все' в сообщении о принятии файлов cookie",
      "time" : {
        "start" : 1709484336874,
        "stop" : 1709484336900,
        "duration" : 26
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1709484334627,
      "stop" : 1709484334806,
      "duration" : 179
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome-headless-shell=122.0.6261.69)\nStacktrace:\n#0 0x5573a04d9793 <unknown>\n#1 0x5573a01cd017 <unknown>\n#2 0x5573a01b49bf <unknown>\n#3 0x5573a01b2d43 <unknown>\n#4 0x5573a01b328a <unknown>\n#5 0x5573a01cf97e <unknown>\n#6 0x5573a0259985 <unknown>\n#7 0x5573a023a3d2 <unknown>\n#8 0x5573a0258dd9 <unknown>\n#9 0x5573a023a173 <unknown>\n#10 0x5573a020b2d3 <unknown>\n#11 0x5573a020bc9e <unknown>\n#12 0x5573a049d8cb <unknown>\n#13 0x5573a04a1745 <unknown>\n#14 0x5573a048a2e1 <unknown>\n#15 0x5573a04a22d2 <unknown>\n#16 0x5573a046e17f <unknown>\n#17 0x5573a04c7dc8 <unknown>\n#18 0x5573a04c7fc3 <unknown>\n#19 0x5573a04d8944 <unknown>\n#20 0x7f48a0a94ac3 <unknown>",
    "statusTrace" : "self = <tests.test_password_recovery.test_password_recovery.TestPasswordRecoveryPage object at 0x7feeb2e1f0b0>\nrecovery_page_open = <pages.password_recovery_page.PasswordRecoveryPage object at 0x7feeb2e54b90>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04ebc799a2d0d645ac1de3c7093e7679\")>\n\n    @allure.title(\"3.2, 3.2.1 Восстановить пароль на корректный емайл\")\n    @pytest.mark.regress\n    def test_recovery_password_to_fill_correct_email(self, recovery_page_open, driver):\n        with allure.step('Заполнить поле емайл'):\n            recovery_page_open.fill_email_to_recovery_password(email_auth)\n        with allure.step(\"Нажать кнопку 'Продолжить'\"):\n            recovery_page_open.click_resume_button()\n        time.sleep(10)  # Получить ссылку на емайл\n        link = self.page.get_link_recovery_password_by_email()\n>       driver.get(link)\n\ntests/test_password_recovery/test_password_recovery.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7feeb2e55bb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome-h...\\\\n#18 0x5573a04c7fc3 \\\\u003Cunknown>\\\\n#19 0x5573a04d8944 \\\\u003Cunknown>\\\\n#20 0x7f48a0a94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome-headless-shell=122.0.6261.69)\nE       Stacktrace:\nE       #0 0x5573a04d9793 <unknown>\nE       #1 0x5573a01cd017 <unknown>\nE       #2 0x5573a01b49bf <unknown>\nE       #3 0x5573a01b2d43 <unknown>\nE       #4 0x5573a01b328a <unknown>\nE       #5 0x5573a01cf97e <unknown>\nE       #6 0x5573a0259985 <unknown>\nE       #7 0x5573a023a3d2 <unknown>\nE       #8 0x5573a0258dd9 <unknown>\nE       #9 0x5573a023a173 <unknown>\nE       #10 0x5573a020b2d3 <unknown>\nE       #11 0x5573a020bc9e <unknown>\nE       #12 0x5573a049d8cb <unknown>\nE       #13 0x5573a04a1745 <unknown>\nE       #14 0x5573a048a2e1 <unknown>\nE       #15 0x5573a04a22d2 <unknown>\nE       #16 0x5573a046e17f <unknown>\nE       #17 0x5573a04c7dc8 <unknown>\nE       #18 0x5573a04c7fc3 <unknown>\nE       #19 0x5573a04d8944 <unknown>\nE       #20 0x7f48a0a94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: InvalidArgumentException",
    "steps" : [ {
      "name" : "Заполнить поле емайл",
      "time" : {
        "start" : 1709484336930,
        "stop" : 1709484337003,
        "duration" : 73
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажать кнопку 'Продолжить'",
      "time" : {
        "start" : 1709484337003,
        "stop" : 1709484337051,
        "duration" : 48
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить ссылку для смены пароля на email",
      "time" : {
        "start" : 1709484347051,
        "stop" : 1709484349273,
        "duration" : 2222
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "dd3d0b13192a7347",
      "name" : "Screenshot",
      "source" : "dd3d0b13192a7347.png",
      "type" : "image/png",
      "size" : 60292
    }, {
      "uid" : "a3c0603b738b06aa",
      "name" : "HTML source",
      "source" : "a3c0603b738b06aa.html",
      "type" : "text/html",
      "size" : 96725
    } ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1709484349349,
      "stop" : 1709484349407,
      "duration" : 58
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование страницы 'Восстановление пароля'"
  }, {
    "name" : "tag",
    "value" : "regress"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_password_recovery"
  }, {
    "name" : "suite",
    "value" : "test_password_recovery"
  }, {
    "name" : "subSuite",
    "value" : "TestPasswordRecoveryPage"
  }, {
    "name" : "host",
    "value" : "fv-az887-104"
  }, {
    "name" : "thread",
    "value" : "2306-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_password_recovery.test_password_recovery"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "browser",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 13,
        "unknown" : 0,
        "total" : 16
      },
      "items" : [ {
        "uid" : "1db541735f10d325",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/1db541735f10d325",
        "status" : "passed",
        "time" : {
          "start" : 1709409297547,
          "stop" : 1709409313332,
          "duration" : 15785
        }
      }, {
        "uid" : "add2232734e6fa43",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/add2232734e6fa43",
        "status" : "passed",
        "time" : {
          "start" : 1709406333707,
          "stop" : 1709406348040,
          "duration" : 14333
        }
      }, {
        "uid" : "a289447604678486",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/a289447604678486",
        "status" : "passed",
        "time" : {
          "start" : 1708972546413,
          "stop" : 1708972560317,
          "duration" : 13904
        }
      }, {
        "uid" : "6ef6a526334ea996",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/6ef6a526334ea996",
        "status" : "passed",
        "time" : {
          "start" : 1708886277966,
          "stop" : 1708886292444,
          "duration" : 14478
        }
      }, {
        "uid" : "d472f8fc1e1b8188",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/d472f8fc1e1b8188",
        "status" : "passed",
        "time" : {
          "start" : 1708883346840,
          "stop" : 1708883362867,
          "duration" : 16027
        }
      }, {
        "uid" : "92f000c73adb6a3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/92f000c73adb6a3",
        "status" : "passed",
        "time" : {
          "start" : 1708806958574,
          "stop" : 1708806974454,
          "duration" : 15880
        }
      }, {
        "uid" : "1aa3c839702773a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/1aa3c839702773a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55646d673303 <unknown>\n#1 0x55646d3582b7 <unknown>\n#2 0x55646d38cb40 <unknown>\n#3 0x55646d3886e5 <unknown>\n#4 0x55646d3d2abc <unknown>\n#5 0x55646d3c6123 <unknown>\n#6 0x55646d396095 <unknown>\n#7 0x55646d39709e <unknown>\n#8 0x55646d6376ab <unknown>\n#9 0x55646d63b4ba <unknown>\n#10 0x55646d623f85 <unknown>\n#11 0x55646d63c12f <unknown>\n#12 0x55646d607e6f <unknown>\n#13 0x55646d6605f8 <unknown>\n#14 0x55646d6607c2 <unknown>\n#15 0x55646d6724a4 <unknown>\n#16 0x7fd9f2694ac3 <unknown>",
        "time" : {
          "start" : 1708805880538,
          "stop" : 1708805880538,
          "duration" : 0
        }
      }, {
        "uid" : "35dbc27c3f9ff45b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/35dbc27c3f9ff45b",
        "status" : "passed",
        "time" : {
          "start" : 1708548250180,
          "stop" : 1708548264651,
          "duration" : 14471
        }
      }, {
        "uid" : "40c22d0bd4de1bde",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/40c22d0bd4de1bde",
        "status" : "passed",
        "time" : {
          "start" : 1707851644822,
          "stop" : 1707851661319,
          "duration" : 16497
        }
      }, {
        "uid" : "b5c3aa1103a0e003",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/b5c3aa1103a0e003",
        "status" : "passed",
        "time" : {
          "start" : 1707495045090,
          "stop" : 1707495061025,
          "duration" : 15935
        }
      }, {
        "uid" : "481dc86f9a4c899b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/481dc86f9a4c899b",
        "status" : "passed",
        "time" : {
          "start" : 1707480122227,
          "stop" : 1707480137976,
          "duration" : 15749
        }
      }, {
        "uid" : "e2cdb3bbd12d8e49",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/e2cdb3bbd12d8e49",
        "status" : "passed",
        "time" : {
          "start" : 1707255467446,
          "stop" : 1707255483433,
          "duration" : 15987
        }
      }, {
        "uid" : "d1a8f210c9622a14",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/d1a8f210c9622a14",
        "status" : "passed",
        "time" : {
          "start" : 1707252742444,
          "stop" : 1707252756673,
          "duration" : 14229
        }
      }, {
        "uid" : "bbef73c45aaebd0b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/bbef73c45aaebd0b",
        "status" : "broken",
        "statusDetails" : "TimeoutError: [Errno 110] Connection timed out",
        "time" : {
          "start" : 1707245511878,
          "stop" : 1707245653437,
          "duration" : 141559
        }
      }, {
        "uid" : "40d345a133d5b417",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/40d345a133d5b417",
        "status" : "passed",
        "time" : {
          "start" : 1707244471859,
          "stop" : 1707244487616,
          "duration" : 15757
        }
      } ]
    },
    "tags" : [ "regress" ]
  },
  "source" : "662c6bd4132b0c29.json",
  "parameterValues" : [ "'chrome'" ]
}