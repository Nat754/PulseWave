{
  "uid" : "2fcd35f665198d4",
  "name" : "GET Получить список всех Рабочих пространств авторизованного пользователя",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_workspace",
  "historyId" : "f4ecae99fb523cc22bf8389dd6dd4fa6",
  "time" : {
    "start" : 1709529401554,
    "stop" : 1709529402720,
    "duration" : 1166
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfb6660>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c59d0>\n\n    @allure.title(\"GET Получить список всех Рабочих пространств авторизованного пользователя\")\n    def test_get_api_workspace(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529401553,
      "stop" : 1709529401553,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfb6660>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c59d0>\n\n    @allure.title(\"GET Получить список всех Рабочих пространств авторизованного пользователя\")\n    def test_get_api_workspace(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529401554,
        "stop" : 1709529402719,
        "duration" : 1165
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 35,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "e7f5fc713a50ec30",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/e7f5fc713a50ec30",
        "status" : "passed",
        "time" : {
          "start" : 1709495928910,
          "stop" : 1709495930584,
          "duration" : 1674
        }
      }, {
        "uid" : "defd23d4c8866f62",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/defd23d4c8866f62",
        "status" : "passed",
        "time" : {
          "start" : 1709491253548,
          "stop" : 1709491255796,
          "duration" : 2248
        }
      }, {
        "uid" : "369349af9f24642e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/369349af9f24642e",
        "status" : "passed",
        "time" : {
          "start" : 1709489652088,
          "stop" : 1709489653681,
          "duration" : 1593
        }
      }, {
        "uid" : "e05eed1071decca4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/e05eed1071decca4",
        "status" : "passed",
        "time" : {
          "start" : 1709487940594,
          "stop" : 1709487941973,
          "duration" : 1379
        }
      }, {
        "uid" : "23334985fa832b0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/23334985fa832b0c",
        "status" : "passed",
        "time" : {
          "start" : 1709485789439,
          "stop" : 1709485791082,
          "duration" : 1643
        }
      }, {
        "uid" : "7971005575940849",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/7971005575940849",
        "status" : "passed",
        "time" : {
          "start" : 1709483629506,
          "stop" : 1709483631216,
          "duration" : 1710
        }
      }, {
        "uid" : "662933a9c189549d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/662933a9c189549d",
        "status" : "passed",
        "time" : {
          "start" : 1709408534788,
          "stop" : 1709408536106,
          "duration" : 1318
        }
      }, {
        "uid" : "a0b6ca73b92d9177",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/a0b6ca73b92d9177",
        "status" : "passed",
        "time" : {
          "start" : 1709405686446,
          "stop" : 1709405687485,
          "duration" : 1039
        }
      }, {
        "uid" : "4222cf4f9baa2a9e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/4222cf4f9baa2a9e",
        "status" : "passed",
        "time" : {
          "start" : 1708971997436,
          "stop" : 1708971998537,
          "duration" : 1101
        }
      }, {
        "uid" : "5dfcd40ffe853f09",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/5dfcd40ffe853f09",
        "status" : "passed",
        "time" : {
          "start" : 1708885663916,
          "stop" : 1708885665121,
          "duration" : 1205
        }
      }, {
        "uid" : "cb28b191ad35be59",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/cb28b191ad35be59",
        "status" : "passed",
        "time" : {
          "start" : 1708882614232,
          "stop" : 1708882615558,
          "duration" : 1326
        }
      }, {
        "uid" : "c5c0071dc511b064",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/c5c0071dc511b064",
        "status" : "passed",
        "time" : {
          "start" : 1708806227166,
          "stop" : 1708806228486,
          "duration" : 1320
        }
      }, {
        "uid" : "55141b19a621432d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/55141b19a621432d",
        "status" : "passed",
        "time" : {
          "start" : 1708805636063,
          "stop" : 1708805637060,
          "duration" : 997
        }
      }, {
        "uid" : "82195b4741edcc39",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/82195b4741edcc39",
        "status" : "passed",
        "time" : {
          "start" : 1708547701487,
          "stop" : 1708547702587,
          "duration" : 1100
        }
      }, {
        "uid" : "d305646408aaefcd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/d305646408aaefcd",
        "status" : "passed",
        "time" : {
          "start" : 1707850871095,
          "stop" : 1707850872471,
          "duration" : 1376
        }
      }, {
        "uid" : "3115ffeac9f44b4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/3115ffeac9f44b4",
        "status" : "passed",
        "time" : {
          "start" : 1707494461690,
          "stop" : 1707494463031,
          "duration" : 1341
        }
      }, {
        "uid" : "8464dd8636b81d86",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/8464dd8636b81d86",
        "status" : "passed",
        "time" : {
          "start" : 1707479522075,
          "stop" : 1707479523388,
          "duration" : 1313
        }
      }, {
        "uid" : "7355035e87b57d9a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/7355035e87b57d9a",
        "status" : "passed",
        "time" : {
          "start" : 1707254891269,
          "stop" : 1707254892589,
          "duration" : 1320
        }
      }, {
        "uid" : "7c653c7dc9273a77",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/7c653c7dc9273a77",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252303264,
          "stop" : 1707252303945,
          "duration" : 681
        }
      }, {
        "uid" : "7410e154c59098d7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/7410e154c59098d7",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245106057,
          "stop" : 1707245106971,
          "duration" : 914
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2fcd35f665198d4.json",
  "parameterValues" : [ ]
}