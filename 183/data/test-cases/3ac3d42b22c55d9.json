{
  "uid" : "3ac3d42b22c55d9",
  "name" : "POST Создать Рабочее пространство",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace",
  "historyId" : "f3c3d93763c8f458fdbdaac7971a11c7",
  "time" : {
    "start" : 1709529420598,
    "stop" : 1709529421177,
    "duration" : 579
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfba0c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8d5e20>\n\n    @allure.title(\"POST Создать Рабочее пространство\")\n    def test_post_api_workspace(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529420598,
      "stop" : 1709529420598,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfba0c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8d5e20>\n\n    @allure.title(\"POST Создать Рабочее пространство\")\n    def test_post_api_workspace(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529420598,
        "stop" : 1709529421177,
        "duration" : 579
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "bb7cc46f71cc4f4c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/bb7cc46f71cc4f4c",
        "status" : "passed",
        "time" : {
          "start" : 1709496084095,
          "stop" : 1709496085742,
          "duration" : 1647
        }
      }, {
        "uid" : "6cfa2763410062e4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/6cfa2763410062e4",
        "status" : "passed",
        "time" : {
          "start" : 1709491416955,
          "stop" : 1709491418677,
          "duration" : 1722
        }
      }, {
        "uid" : "1b85ea7af3623dce",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/1b85ea7af3623dce",
        "status" : "passed",
        "time" : {
          "start" : 1709489806795,
          "stop" : 1709489808402,
          "duration" : 1607
        }
      }, {
        "uid" : "d3e367ea79a28f05",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/d3e367ea79a28f05",
        "status" : "passed",
        "time" : {
          "start" : 1709488078275,
          "stop" : 1709488079721,
          "duration" : 1446
        }
      }, {
        "uid" : "cf0e83a23451bf36",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/cf0e83a23451bf36",
        "status" : "passed",
        "time" : {
          "start" : 1709485950703,
          "stop" : 1709485952412,
          "duration" : 1709
        }
      }, {
        "uid" : "bd89edee28ca0b91",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/bd89edee28ca0b91",
        "status" : "passed",
        "time" : {
          "start" : 1709483760013,
          "stop" : 1709483761333,
          "duration" : 1320
        }
      }, {
        "uid" : "c9d50d848171b590",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/c9d50d848171b590",
        "status" : "passed",
        "time" : {
          "start" : 1709408666932,
          "stop" : 1709408668281,
          "duration" : 1349
        }
      }, {
        "uid" : "22e5a114cf82fe55",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/22e5a114cf82fe55",
        "status" : "passed",
        "time" : {
          "start" : 1709405786010,
          "stop" : 1709405787064,
          "duration" : 1054
        }
      }, {
        "uid" : "9b55693a8ed85e26",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/9b55693a8ed85e26",
        "status" : "passed",
        "time" : {
          "start" : 1708972090595,
          "stop" : 1708972091586,
          "duration" : 991
        }
      }, {
        "uid" : "bb52e8e770354bb8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/bb52e8e770354bb8",
        "status" : "passed",
        "time" : {
          "start" : 1708885762004,
          "stop" : 1708885763086,
          "duration" : 1082
        }
      }, {
        "uid" : "9c295654999a99c0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/9c295654999a99c0",
        "status" : "passed",
        "time" : {
          "start" : 1708882735944,
          "stop" : 1708882737308,
          "duration" : 1364
        }
      }, {
        "uid" : "1767da17e1c39f6f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/1767da17e1c39f6f",
        "status" : "passed",
        "time" : {
          "start" : 1708806348669,
          "stop" : 1708806350028,
          "duration" : 1359
        }
      }, {
        "uid" : "9fbf4ed889b10236",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/9fbf4ed889b10236",
        "status" : "passed",
        "time" : {
          "start" : 1708805730412,
          "stop" : 1708805731424,
          "duration" : 1012
        }
      }, {
        "uid" : "1331a51f89f2d44e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/1331a51f89f2d44e",
        "status" : "passed",
        "time" : {
          "start" : 1708547795674,
          "stop" : 1708547796674,
          "duration" : 1000
        }
      }, {
        "uid" : "d72b676cf12ff0a6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/d72b676cf12ff0a6",
        "status" : "passed",
        "time" : {
          "start" : 1707850996942,
          "stop" : 1707850998337,
          "duration" : 1395
        }
      }, {
        "uid" : "c26fca20999248d0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/c26fca20999248d0",
        "status" : "passed",
        "time" : {
          "start" : 1707494582863,
          "stop" : 1707494584215,
          "duration" : 1352
        }
      }, {
        "uid" : "af2d162fb14ae7b4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/af2d162fb14ae7b4",
        "status" : "passed",
        "time" : {
          "start" : 1707479644161,
          "stop" : 1707479645517,
          "duration" : 1356
        }
      }, {
        "uid" : "58fff974de20796a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/58fff974de20796a",
        "status" : "passed",
        "time" : {
          "start" : 1707255012791,
          "stop" : 1707255014142,
          "duration" : 1351
        }
      }, {
        "uid" : "6606c04964588cae",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/6606c04964588cae",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252317480,
          "stop" : 1707252318163,
          "duration" : 683
        }
      }, {
        "uid" : "c3c512233b99eb97",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/c3c512233b99eb97",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245122747,
          "stop" : 1707245123456,
          "duration" : 709
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "3ac3d42b22c55d9.json",
  "parameterValues" : [ ]
}