{
  "uid" : "41b15207f547acad",
  "name" : "POST Запрос на смену почты",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_auth_change_email",
  "historyId" : "b05e07f6bb5e624e3a2d1bcc8ca2be0d",
  "time" : {
    "start" : 1709529435839,
    "stop" : 1709529436418,
    "duration" : 579
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbe630>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8dd010>\n\n    @allure.title(\"POST Запрос на смену почты\")\n    def test_post_auth_change_email(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529435839,
      "stop" : 1709529435839,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbe630>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8dd010>\n\n    @allure.title(\"POST Запрос на смену почты\")\n    def test_post_auth_change_email(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529435839,
        "stop" : 1709529436417,
        "duration" : 578
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "20f48a028a7348be",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/20f48a028a7348be",
        "status" : "passed",
        "time" : {
          "start" : 1709496206391,
          "stop" : 1709496218983,
          "duration" : 12592
        }
      }, {
        "uid" : "93e35b1ae3ac67b7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/93e35b1ae3ac67b7",
        "status" : "passed",
        "time" : {
          "start" : 1709491543859,
          "stop" : 1709491556656,
          "duration" : 12797
        }
      }, {
        "uid" : "8df4f9c307358cf2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/8df4f9c307358cf2",
        "status" : "passed",
        "time" : {
          "start" : 1709489927028,
          "stop" : 1709489939701,
          "duration" : 12673
        }
      }, {
        "uid" : "412c47685388924c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/412c47685388924c",
        "status" : "passed",
        "time" : {
          "start" : 1709488182718,
          "stop" : 1709488194955,
          "duration" : 12237
        }
      }, {
        "uid" : "c35dc8e5c3e58807",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/c35dc8e5c3e58807",
        "status" : "passed",
        "time" : {
          "start" : 1709486077529,
          "stop" : 1709486089998,
          "duration" : 12469
        }
      }, {
        "uid" : "ac364bb4850ca13a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/ac364bb4850ca13a",
        "status" : "passed",
        "time" : {
          "start" : 1709483854235,
          "stop" : 1709483866485,
          "duration" : 12250
        }
      }, {
        "uid" : "5024f874d18bc4a6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/5024f874d18bc4a6",
        "status" : "passed",
        "time" : {
          "start" : 1709408771226,
          "stop" : 1709408783521,
          "duration" : 12295
        }
      }, {
        "uid" : "e93eeca5dd0f3293",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/e93eeca5dd0f3293",
        "status" : "passed",
        "time" : {
          "start" : 1709405868951,
          "stop" : 1709405880937,
          "duration" : 11986
        }
      }, {
        "uid" : "6011b3cc402e0112",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/6011b3cc402e0112",
        "status" : "passed",
        "time" : {
          "start" : 1708972145088,
          "stop" : 1708972156919,
          "duration" : 11831
        }
      }, {
        "uid" : "7e893d8bea1d81b6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/7e893d8bea1d81b6",
        "status" : "passed",
        "time" : {
          "start" : 1708885820205,
          "stop" : 1708885832253,
          "duration" : 12048
        }
      }, {
        "uid" : "94e0e16b506c12a1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/94e0e16b506c12a1",
        "status" : "passed",
        "time" : {
          "start" : 1708882808914,
          "stop" : 1708882821130,
          "duration" : 12216
        }
      }, {
        "uid" : "96fcad04771cbf62",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/96fcad04771cbf62",
        "status" : "passed",
        "time" : {
          "start" : 1708806421265,
          "stop" : 1708806433767,
          "duration" : 12502
        }
      }, {
        "uid" : "84aef41f0c485410",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/84aef41f0c485410",
        "status" : "passed",
        "time" : {
          "start" : 1708805784838,
          "stop" : 1708805796762,
          "duration" : 11924
        }
      }, {
        "uid" : "d16f275c298624ca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/d16f275c298624ca",
        "status" : "passed",
        "time" : {
          "start" : 1708547849589,
          "stop" : 1708547861373,
          "duration" : 11784
        }
      }, {
        "uid" : "249d763a0af1bfcf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/249d763a0af1bfcf",
        "status" : "passed",
        "time" : {
          "start" : 1707851072110,
          "stop" : 1707851084303,
          "duration" : 12193
        }
      }, {
        "uid" : "ecb8bb1091fac78b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/ecb8bb1091fac78b",
        "status" : "passed",
        "time" : {
          "start" : 1707494631435,
          "stop" : 1707494643625,
          "duration" : 12190
        }
      }, {
        "uid" : "9e3008e8f302d353",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/9e3008e8f302d353",
        "status" : "passed",
        "time" : {
          "start" : 1707479692618,
          "stop" : 1707479704862,
          "duration" : 12244
        }
      }, {
        "uid" : "e32bd1e3ff9b6fca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/e32bd1e3ff9b6fca",
        "status" : "passed",
        "time" : {
          "start" : 1707255061133,
          "stop" : 1707255073162,
          "duration" : 12029
        }
      }, {
        "uid" : "32b61afd9e7983f1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/32b61afd9e7983f1",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252332699,
          "stop" : 1707252333263,
          "duration" : 564
        }
      }, {
        "uid" : "c0553170ecb71f37",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/c0553170ecb71f37",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245140294,
          "stop" : 1707245141004,
          "duration" : 710
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "41b15207f547acad.json",
  "parameterValues" : [ ]
}