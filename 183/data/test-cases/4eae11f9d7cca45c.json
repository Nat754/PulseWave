{
  "uid" : "4eae11f9d7cca45c",
  "name" : "POST Создать доску",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace_id_boards",
  "historyId" : "e0c89310e54d7f413d275ba53f8bf728",
  "time" : {
    "start" : 1709529407106,
    "stop" : 1709529408092,
    "duration" : 986
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfb8b30>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8cbda0>\n\n    @allure.title(\"POST Создать доску\")\n    def test_post_api_workspace_id_boards(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529407106,
      "stop" : 1709529407106,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfb8b30>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8cbda0>\n\n    @allure.title(\"POST Создать доску\")\n    def test_post_api_workspace_id_boards(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529407106,
        "stop" : 1709529408092,
        "duration" : 986
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "4e2445ea6708880b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/4e2445ea6708880b",
        "status" : "passed",
        "time" : {
          "start" : 1709495963972,
          "stop" : 1709495967219,
          "duration" : 3247
        }
      }, {
        "uid" : "e0fffcc941db41b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/e0fffcc941db41b",
        "status" : "passed",
        "time" : {
          "start" : 1709491292316,
          "stop" : 1709491295659,
          "duration" : 3343
        }
      }, {
        "uid" : "70c26912a8e28978",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/70c26912a8e28978",
        "status" : "passed",
        "time" : {
          "start" : 1709489687269,
          "stop" : 1709489690564,
          "duration" : 3295
        }
      }, {
        "uid" : "2729d0b289328992",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/2729d0b289328992",
        "status" : "passed",
        "time" : {
          "start" : 1709487972415,
          "stop" : 1709487975317,
          "duration" : 2902
        }
      }, {
        "uid" : "79cc01ef69a17627",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/79cc01ef69a17627",
        "status" : "passed",
        "time" : {
          "start" : 1709485825971,
          "stop" : 1709485829356,
          "duration" : 3385
        }
      }, {
        "uid" : "d64ad64e9dd02264",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/d64ad64e9dd02264",
        "status" : "passed",
        "time" : {
          "start" : 1709483662615,
          "stop" : 1709483665597,
          "duration" : 2982
        }
      }, {
        "uid" : "a6b8d29ea7ab5a75",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/a6b8d29ea7ab5a75",
        "status" : "passed",
        "time" : {
          "start" : 1709408567098,
          "stop" : 1709408569783,
          "duration" : 2685
        }
      }, {
        "uid" : "a46f6bffd2c45f71",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/a46f6bffd2c45f71",
        "status" : "passed",
        "time" : {
          "start" : 1709405707452,
          "stop" : 1709405709553,
          "duration" : 2101
        }
      }, {
        "uid" : "c6061e217e65b1e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/c6061e217e65b1e",
        "status" : "passed",
        "time" : {
          "start" : 1708972015883,
          "stop" : 1708972017882,
          "duration" : 1999
        }
      }, {
        "uid" : "c574c50b42842e50",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/c574c50b42842e50",
        "status" : "passed",
        "time" : {
          "start" : 1708885683247,
          "stop" : 1708885685363,
          "duration" : 2116
        }
      }, {
        "uid" : "682456b67b51fafb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/682456b67b51fafb",
        "status" : "passed",
        "time" : {
          "start" : 1708882635901,
          "stop" : 1708882638600,
          "duration" : 2699
        }
      }, {
        "uid" : "50d7a835cc307e16",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/50d7a835cc307e16",
        "status" : "passed",
        "time" : {
          "start" : 1708806248602,
          "stop" : 1708806251289,
          "duration" : 2687
        }
      }, {
        "uid" : "2df6db7daacabfd9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/2df6db7daacabfd9",
        "status" : "passed",
        "time" : {
          "start" : 1708805656336,
          "stop" : 1708805658348,
          "duration" : 2012
        }
      }, {
        "uid" : "d52cc18817c9597e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/d52cc18817c9597e",
        "status" : "passed",
        "time" : {
          "start" : 1708547721397,
          "stop" : 1708547723388,
          "duration" : 1991
        }
      }, {
        "uid" : "e58ed2baa99aa7fe",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/e58ed2baa99aa7fe",
        "status" : "passed",
        "time" : {
          "start" : 1707850892386,
          "stop" : 1707850895763,
          "duration" : 3377
        }
      }, {
        "uid" : "e220bd3268883125",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/e220bd3268883125",
        "status" : "passed",
        "time" : {
          "start" : 1707494483082,
          "stop" : 1707494485775,
          "duration" : 2693
        }
      }, {
        "uid" : "ab517a796189af6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/ab517a796189af6",
        "status" : "passed",
        "time" : {
          "start" : 1707479543983,
          "stop" : 1707479546897,
          "duration" : 2914
        }
      }, {
        "uid" : "85608b770846e4e5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/85608b770846e4e5",
        "status" : "passed",
        "time" : {
          "start" : 1707254912570,
          "stop" : 1707254915237,
          "duration" : 2667
        }
      }, {
        "uid" : "194b72eaff4cb436",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/194b72eaff4cb436",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252305272,
          "stop" : 1707252305960,
          "duration" : 688
        }
      }, {
        "uid" : "2a32abf651bc9b2e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/2a32abf651bc9b2e",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245108502,
          "stop" : 1707245109212,
          "duration" : 710
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4eae11f9d7cca45c.json",
  "parameterValues" : [ ]
}