{
  "uid" : "4eb303937c481cc2",
  "name" : "GET Список всех пользователей доски для назначения ответственных",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_board_users",
  "historyId" : "3039b8220f9c62adade969be42ff992d",
  "time" : {
    "start" : 1709529410725,
    "stop" : 1709529411705,
    "duration" : 980
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbb8f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c6360>\n\n    @allure.title(\"GET Список всех пользователей доски для назначения ответственных\")\n    def test_get_api_board_users(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529410725,
      "stop" : 1709529410725,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbb8f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c6360>\n\n    @allure.title(\"GET Список всех пользователей доски для назначения ответственных\")\n    def test_get_api_board_users(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529410726,
        "stop" : 1709529411704,
        "duration" : 978
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "30d3ffce348b7462",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/30d3ffce348b7462",
        "status" : "passed",
        "time" : {
          "start" : 1709495983641,
          "stop" : 1709495986961,
          "duration" : 3320
        }
      }, {
        "uid" : "b38ed8add22b37e6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/b38ed8add22b37e6",
        "status" : "passed",
        "time" : {
          "start" : 1709491312497,
          "stop" : 1709491315815,
          "duration" : 3318
        }
      }, {
        "uid" : "53d358a137731b1e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/53d358a137731b1e",
        "status" : "passed",
        "time" : {
          "start" : 1709489706770,
          "stop" : 1709489709982,
          "duration" : 3212
        }
      }, {
        "uid" : "46d6842b82cb40ce",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/46d6842b82cb40ce",
        "status" : "passed",
        "time" : {
          "start" : 1709487989946,
          "stop" : 1709487992832,
          "duration" : 2886
        }
      }, {
        "uid" : "6bd00f5d46748b7b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/6bd00f5d46748b7b",
        "status" : "passed",
        "time" : {
          "start" : 1709485846487,
          "stop" : 1709485849836,
          "duration" : 3349
        }
      }, {
        "uid" : "952324a2d556a34d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/952324a2d556a34d",
        "status" : "passed",
        "time" : {
          "start" : 1709483678903,
          "stop" : 1709483681611,
          "duration" : 2708
        }
      }, {
        "uid" : "5b72f46738d97b7e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/5b72f46738d97b7e",
        "status" : "passed",
        "time" : {
          "start" : 1709408583234,
          "stop" : 1709408585926,
          "duration" : 2692
        }
      }, {
        "uid" : "7af4b717bab3eb8f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/7af4b717bab3eb8f",
        "status" : "passed",
        "time" : {
          "start" : 1709405720229,
          "stop" : 1709405722325,
          "duration" : 2096
        }
      }, {
        "uid" : "e6c1218a315eb8ae",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/e6c1218a315eb8ae",
        "status" : "passed",
        "time" : {
          "start" : 1708972028251,
          "stop" : 1708972030196,
          "duration" : 1945
        }
      }, {
        "uid" : "f267aaf5f99d8ed6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/f267aaf5f99d8ed6",
        "status" : "passed",
        "time" : {
          "start" : 1708885696063,
          "stop" : 1708885698174,
          "duration" : 2111
        }
      }, {
        "uid" : "1b07fdb22453feba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/1b07fdb22453feba",
        "status" : "passed",
        "time" : {
          "start" : 1708882652054,
          "stop" : 1708882654739,
          "duration" : 2685
        }
      }, {
        "uid" : "f1c963aa4615b4cd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/f1c963aa4615b4cd",
        "status" : "passed",
        "time" : {
          "start" : 1708806264762,
          "stop" : 1708806267437,
          "duration" : 2675
        }
      }, {
        "uid" : "b8015c0569ae3f0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/b8015c0569ae3f0a",
        "status" : "passed",
        "time" : {
          "start" : 1708805668417,
          "stop" : 1708805670389,
          "duration" : 1972
        }
      }, {
        "uid" : "fa8db8d30096fd41",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/fa8db8d30096fd41",
        "status" : "passed",
        "time" : {
          "start" : 1708547734474,
          "stop" : 1708547736440,
          "duration" : 1966
        }
      }, {
        "uid" : "65bcfc6afbfcceca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/65bcfc6afbfcceca",
        "status" : "passed",
        "time" : {
          "start" : 1707850909785,
          "stop" : 1707850912565,
          "duration" : 2780
        }
      }, {
        "uid" : "ae9955bc3a67ffa9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/ae9955bc3a67ffa9",
        "status" : "passed",
        "time" : {
          "start" : 1707494499239,
          "stop" : 1707494501900,
          "duration" : 2661
        }
      }, {
        "uid" : "e54a63dda5ed48fa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/e54a63dda5ed48fa",
        "status" : "passed",
        "time" : {
          "start" : 1707479560388,
          "stop" : 1707479563034,
          "duration" : 2646
        }
      }, {
        "uid" : "2a401c1033bb0856",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/2a401c1033bb0856",
        "status" : "passed",
        "time" : {
          "start" : 1707254928882,
          "stop" : 1707254931525,
          "duration" : 2643
        }
      }, {
        "uid" : "681c75169f97786f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/681c75169f97786f",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252308470,
          "stop" : 1707252309147,
          "duration" : 677
        }
      }, {
        "uid" : "9f49ea953a308488",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/9f49ea953a308488",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245112256,
          "stop" : 1707245112977,
          "duration" : 721
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4eb303937c481cc2.json",
  "parameterValues" : [ ]
}