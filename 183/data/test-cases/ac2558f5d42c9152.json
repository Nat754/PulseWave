{
  "uid" : "ac2558f5d42c9152",
  "name" : "GET Информация о конкретной доске",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_workspace_id_boards_id",
  "historyId" : "598466f1e967902f5c12e56dfbd26f4c",
  "time" : {
    "start" : 1709529408152,
    "stop" : 1709529408733,
    "duration" : 581
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfba9c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c84a0>\n\n    @allure.title(\"GET Информация о конкретной доске\")\n    def test_get_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529408152,
      "stop" : 1709529408152,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfba9c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8c84a0>\n\n    @allure.title(\"GET Информация о конкретной доске\")\n    def test_get_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529408152,
        "stop" : 1709529408733,
        "duration" : 581
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 0,
        "passed" : 34,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "4f0ae0702d6ec51a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/4f0ae0702d6ec51a",
        "status" : "passed",
        "time" : {
          "start" : 1709495967221,
          "stop" : 1709495972284,
          "duration" : 5063
        }
      }, {
        "uid" : "d0256abf5baec379",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/d0256abf5baec379",
        "status" : "passed",
        "time" : {
          "start" : 1709491295662,
          "stop" : 1709491300733,
          "duration" : 5071
        }
      }, {
        "uid" : "f8532de55d5e8c2d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/f8532de55d5e8c2d",
        "status" : "passed",
        "time" : {
          "start" : 1709489690566,
          "stop" : 1709489695387,
          "duration" : 4821
        }
      }, {
        "uid" : "ac855f1be2e8c29d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/ac855f1be2e8c29d",
        "status" : "passed",
        "time" : {
          "start" : 1709487975319,
          "stop" : 1709487979740,
          "duration" : 4421
        }
      }, {
        "uid" : "a94d83c8b14622b6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/a94d83c8b14622b6",
        "status" : "passed",
        "time" : {
          "start" : 1709485829358,
          "stop" : 1709485834542,
          "duration" : 5184
        }
      }, {
        "uid" : "766e718d52019e2d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/766e718d52019e2d",
        "status" : "passed",
        "time" : {
          "start" : 1709483665598,
          "stop" : 1709483669582,
          "duration" : 3984
        }
      }, {
        "uid" : "2a46f8eba411d95d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/2a46f8eba411d95d",
        "status" : "passed",
        "time" : {
          "start" : 1709408569785,
          "stop" : 1709408573796,
          "duration" : 4011
        }
      }, {
        "uid" : "95e55942fd5ef80d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/95e55942fd5ef80d",
        "status" : "passed",
        "time" : {
          "start" : 1709405709556,
          "stop" : 1709405712761,
          "duration" : 3205
        }
      }, {
        "uid" : "319380d7e73db4ea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/319380d7e73db4ea",
        "status" : "passed",
        "time" : {
          "start" : 1708972017884,
          "stop" : 1708972021104,
          "duration" : 3220
        }
      }, {
        "uid" : "e747fc22fff2e325",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/e747fc22fff2e325",
        "status" : "passed",
        "time" : {
          "start" : 1708885685365,
          "stop" : 1708885688558,
          "duration" : 3193
        }
      }, {
        "uid" : "e8c75cc591caaf0d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/e8c75cc591caaf0d",
        "status" : "passed",
        "time" : {
          "start" : 1708882638602,
          "stop" : 1708882642628,
          "duration" : 4026
        }
      }, {
        "uid" : "192d351cab5d1a9a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/192d351cab5d1a9a",
        "status" : "passed",
        "time" : {
          "start" : 1708806251291,
          "stop" : 1708806255315,
          "duration" : 4024
        }
      }, {
        "uid" : "1a249bbeaf31c4f5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/1a249bbeaf31c4f5",
        "status" : "passed",
        "time" : {
          "start" : 1708805658350,
          "stop" : 1708805661303,
          "duration" : 2953
        }
      }, {
        "uid" : "c7562c00b85c4f48",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/c7562c00b85c4f48",
        "status" : "passed",
        "time" : {
          "start" : 1708547723390,
          "stop" : 1708547726725,
          "duration" : 3335
        }
      }, {
        "uid" : "efb97e059da9de1d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/efb97e059da9de1d",
        "status" : "passed",
        "time" : {
          "start" : 1707850895766,
          "stop" : 1707850899955,
          "duration" : 4189
        }
      }, {
        "uid" : "d94d38b36bd17a0b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/d94d38b36bd17a0b",
        "status" : "passed",
        "time" : {
          "start" : 1707494485777,
          "stop" : 1707494489764,
          "duration" : 3987
        }
      }, {
        "uid" : "a7c4a333771221a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/a7c4a333771221a",
        "status" : "passed",
        "time" : {
          "start" : 1707479546899,
          "stop" : 1707479550907,
          "duration" : 4008
        }
      }, {
        "uid" : "14910c5719ae7d21",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/14910c5719ae7d21",
        "status" : "passed",
        "time" : {
          "start" : 1707254915239,
          "stop" : 1707254919276,
          "duration" : 4037
        }
      }, {
        "uid" : "db37f8f5d9f5fbd5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/db37f8f5d9f5fbd5",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707252305992,
          "stop" : 1707252306672,
          "duration" : 680
        }
      }, {
        "uid" : "cfe2b3717e2ba66c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/cfe2b3717e2ba66c",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1707245109243,
          "stop" : 1707245109955,
          "duration" : 712
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "ac2558f5d42c9152.json",
  "parameterValues" : [ ]
}