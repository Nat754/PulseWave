{
  "uid" : "b07c1b2645543d46",
  "name" : "POST Регистрация пользователя без пароля",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user_no_passwrd",
  "historyId" : "f6950d9b2602969f3fea01b98051c6e4",
  "time" : {
    "start" : 1709529439639,
    "stop" : 1709529440220,
    "duration" : 581
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbfd70>\n\n    @allure.title(\"POST Регистрация пользователя без пароля\")\n    def test_post_create_user_no_passwrd(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_PASSWORD)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"password\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n\ntests/test_api/test_api.py:665: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbfd70>\n\n    @allure.title(\"POST Регистрация пользователя без пароля\")\n    def test_post_create_user_no_passwrd(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_PASSWORD)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"password\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n\ntests/test_api/test_api.py:665: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Expected message: ['Это поле не может быть пустым.']",
      "time" : {
        "start" : 1709529440219,
        "stop" : 1709529440219,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 665, in test_post_create_user_no_passwrd\n    f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n                                                                                           ^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "ecb72ec18d1f7c48",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/ecb72ec18d1f7c48",
        "status" : "passed",
        "time" : {
          "start" : 1709496244354,
          "stop" : 1709496244913,
          "duration" : 559
        }
      }, {
        "uid" : "f14887e14b00b87a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/f14887e14b00b87a",
        "status" : "passed",
        "time" : {
          "start" : 1709491582927,
          "stop" : 1709491583520,
          "duration" : 593
        }
      }, {
        "uid" : "ffa5ae552cdfb236",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/ffa5ae552cdfb236",
        "status" : "passed",
        "time" : {
          "start" : 1709489965503,
          "stop" : 1709489966064,
          "duration" : 561
        }
      }, {
        "uid" : "792f72ad85e51379",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/792f72ad85e51379",
        "status" : "passed",
        "time" : {
          "start" : 1709488217303,
          "stop" : 1709488217754,
          "duration" : 451
        }
      }, {
        "uid" : "109786606e5a0159",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/109786606e5a0159",
        "status" : "passed",
        "time" : {
          "start" : 1709486115701,
          "stop" : 1709486116300,
          "duration" : 599
        }
      }, {
        "uid" : "d7afecc3906b57fc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/d7afecc3906b57fc",
        "status" : "passed",
        "time" : {
          "start" : 1709483887906,
          "stop" : 1709483888313,
          "duration" : 407
        }
      }, {
        "uid" : "c1b78e6b9b2fd631",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/c1b78e6b9b2fd631",
        "status" : "passed",
        "time" : {
          "start" : 1709408806901,
          "stop" : 1709408807476,
          "duration" : 575
        }
      }, {
        "uid" : "654a656b72dad8b7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/654a656b72dad8b7",
        "status" : "passed",
        "time" : {
          "start" : 1709405902295,
          "stop" : 1709405902733,
          "duration" : 438
        }
      }, {
        "uid" : "724d5077e96d9546",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/724d5077e96d9546",
        "status" : "passed",
        "time" : {
          "start" : 1708972177005,
          "stop" : 1708972177399,
          "duration" : 394
        }
      }, {
        "uid" : "c06e1bbf4dcc6f67",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/c06e1bbf4dcc6f67",
        "status" : "passed",
        "time" : {
          "start" : 1708885852684,
          "stop" : 1708885853114,
          "duration" : 430
        }
      }, {
        "uid" : "9736b2c124c4bed1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/9736b2c124c4bed1",
        "status" : "passed",
        "time" : {
          "start" : 1708882844647,
          "stop" : 1708882845221,
          "duration" : 574
        }
      }, {
        "uid" : "dc24a8e0dcc75475",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/dc24a8e0dcc75475",
        "status" : "passed",
        "time" : {
          "start" : 1708806456473,
          "stop" : 1708806457045,
          "duration" : 572
        }
      }, {
        "uid" : "c97614d9658b51a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/c97614d9658b51a",
        "status" : "passed",
        "time" : {
          "start" : 1708805817040,
          "stop" : 1708805817440,
          "duration" : 400
        }
      }, {
        "uid" : "1de2aca87c5d22c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/1de2aca87c5d22c",
        "status" : "passed",
        "time" : {
          "start" : 1708547881149,
          "stop" : 1708547881555,
          "duration" : 406
        }
      }, {
        "uid" : "1654475028a90651",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/1654475028a90651",
        "status" : "passed",
        "time" : {
          "start" : 1707851109005,
          "stop" : 1707851109604,
          "duration" : 599
        }
      }, {
        "uid" : "8a743bcafcbaf371",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/8a743bcafcbaf371",
        "status" : "passed",
        "time" : {
          "start" : 1707494666637,
          "stop" : 1707494667206,
          "duration" : 569
        }
      }, {
        "uid" : "73a61827805a1076",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/73a61827805a1076",
        "status" : "passed",
        "time" : {
          "start" : 1707479728141,
          "stop" : 1707479728711,
          "duration" : 570
        }
      }, {
        "uid" : "419620d405e4aa3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/419620d405e4aa3",
        "status" : "passed",
        "time" : {
          "start" : 1707255096272,
          "stop" : 1707255096842,
          "duration" : 570
        }
      }, {
        "uid" : "a221d5e7ba39f34",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/a221d5e7ba39f34",
        "status" : "passed",
        "time" : {
          "start" : 1707252335529,
          "stop" : 1707252335914,
          "duration" : 385
        }
      }, {
        "uid" : "aef0a31822259de9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/aef0a31822259de9",
        "status" : "passed",
        "time" : {
          "start" : 1707245144062,
          "stop" : 1707245144617,
          "duration" : 555
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b07c1b2645543d46.json",
  "parameterValues" : [ ]
}