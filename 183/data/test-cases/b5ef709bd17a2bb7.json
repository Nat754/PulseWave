{
  "uid" : "b5ef709bd17a2bb7",
  "name" : "PATCH Отметить прочтение уведомления",
  "fullName" : "tests.test_api.test_api.TestAPI#test_patch_api_notification_id_read",
  "historyId" : "e2b6f38de87a9a6ca0e23bc7e49b974d",
  "time" : {
    "start" : 1709529422470,
    "stop" : 1709529423051,
    "duration" : 581
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbb4d0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8d5520>\n\n    @allure.title(\"PATCH Отметить прочтение уведомления\")\n    def test_patch_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529422469,
      "stop" : 1709529422469,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbb4d0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8d5520>\n\n    @allure.title(\"PATCH Отметить прочтение уведомления\")\n    def test_patch_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529422470,
        "stop" : 1709529423051,
        "duration" : 581
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 29,
        "unknown" : 0,
        "total" : 31
      },
      "items" : [ {
        "uid" : "c7eea4180330df45",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/c7eea4180330df45",
        "status" : "passed",
        "time" : {
          "start" : 1709496088738,
          "stop" : 1709496090881,
          "duration" : 2143
        }
      }, {
        "uid" : "f570425a35a5d3ba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/f570425a35a5d3ba",
        "status" : "passed",
        "time" : {
          "start" : 1709491421641,
          "stop" : 1709491423897,
          "duration" : 2256
        }
      }, {
        "uid" : "d9eb0f51863c446b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/d9eb0f51863c446b",
        "status" : "passed",
        "time" : {
          "start" : 1709489811104,
          "stop" : 1709489813293,
          "duration" : 2189
        }
      }, {
        "uid" : "77180f3f4d106f1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/77180f3f4d106f1",
        "status" : "passed",
        "time" : {
          "start" : 1709488082162,
          "stop" : 1709488084023,
          "duration" : 1861
        }
      }, {
        "uid" : "d29ef1faba0fadb3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/d29ef1faba0fadb3",
        "status" : "passed",
        "time" : {
          "start" : 1709485955281,
          "stop" : 1709485957616,
          "duration" : 2335
        }
      }, {
        "uid" : "64496b82ba16bd53",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/64496b82ba16bd53",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1709483762747,
          "stop" : 1709483763161,
          "duration" : 414
        }
      }, {
        "uid" : "ff07d1df77efa563",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/ff07d1df77efa563",
        "status" : "passed",
        "time" : {
          "start" : 1709408673507,
          "stop" : 1709408675414,
          "duration" : 1907
        }
      }, {
        "uid" : "e3c794766b73b554",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/e3c794766b73b554",
        "status" : "passed",
        "time" : {
          "start" : 1709405791839,
          "stop" : 1709405793336,
          "duration" : 1497
        }
      }, {
        "uid" : "4e6c0d537431d038",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/4e6c0d537431d038",
        "status" : "passed",
        "time" : {
          "start" : 1708972096630,
          "stop" : 1708972098001,
          "duration" : 1371
        }
      }, {
        "uid" : "601438b04ae96a8c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/601438b04ae96a8c",
        "status" : "passed",
        "time" : {
          "start" : 1708885767829,
          "stop" : 1708885769310,
          "duration" : 1481
        }
      }, {
        "uid" : "636b09911e221f0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/636b09911e221f0c",
        "status" : "passed",
        "time" : {
          "start" : 1708882742619,
          "stop" : 1708882744540,
          "duration" : 1921
        }
      }, {
        "uid" : "8f7ec5fa60810803",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/8f7ec5fa60810803",
        "status" : "passed",
        "time" : {
          "start" : 1708806355020,
          "stop" : 1708806356927,
          "duration" : 1907
        }
      }, {
        "uid" : "2e8357ac5f78d3ea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/2e8357ac5f78d3ea",
        "status" : "passed",
        "time" : {
          "start" : 1708805736030,
          "stop" : 1708805737453,
          "duration" : 1423
        }
      }, {
        "uid" : "979a0afb2b620a01",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/979a0afb2b620a01",
        "status" : "passed",
        "time" : {
          "start" : 1708547801261,
          "stop" : 1708547802635,
          "duration" : 1374
        }
      }, {
        "uid" : "6315db08d1ad8446",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/6315db08d1ad8446",
        "status" : "passed",
        "time" : {
          "start" : 1707851004071,
          "stop" : 1707851006073,
          "duration" : 2002
        }
      }, {
        "uid" : "b759750b01cdaf54",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/b759750b01cdaf54",
        "status" : "passed",
        "time" : {
          "start" : 1707494589872,
          "stop" : 1707494591787,
          "duration" : 1915
        }
      }, {
        "uid" : "ae2e083cd0c9122e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/ae2e083cd0c9122e",
        "status" : "passed",
        "time" : {
          "start" : 1707479651041,
          "stop" : 1707479652968,
          "duration" : 1927
        }
      }, {
        "uid" : "41c2a74799692ea7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/41c2a74799692ea7",
        "status" : "passed",
        "time" : {
          "start" : 1707255019608,
          "stop" : 1707255021510,
          "duration" : 1902
        }
      }, {
        "uid" : "d30bceed1ccc14ca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/d30bceed1ccc14ca",
        "status" : "passed",
        "time" : {
          "start" : 1707252322772,
          "stop" : 1707252324109,
          "duration" : 1337
        }
      }, {
        "uid" : "da8f4bbdbeec0d68",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/da8f4bbdbeec0d68",
        "status" : "passed",
        "time" : {
          "start" : 1707245128353,
          "stop" : 1707245130178,
          "duration" : 1825
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b5ef709bd17a2bb7.json",
  "parameterValues" : [ ]
}