{
  "uid" : "c2d67ed1b87bfe12",
  "name" : "GET Получение комментария",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_task_id_comment",
  "historyId" : "0676f9cd255bfab810907c313091928a",
  "time" : {
    "start" : 1709529425640,
    "stop" : 1709529426222,
    "duration" : 582
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbd850>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8ddc10>\n\n    @allure.title(\"GET Получение комментария\")\n    def test_get_task_id_comment(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:461: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1709529425640,
      "stop" : 1709529425640,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfbd850>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7ff88d8ddc10>\n\n    @allure.title(\"GET Получение комментария\")\n    def test_get_task_id_comment(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:461: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1709529425640,
        "stop" : 1709529426222,
        "duration" : 582
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 15,
        "unknown" : 0,
        "total" : 16
      },
      "items" : [ {
        "uid" : "9eaa6ee5205da3ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/9eaa6ee5205da3ed",
        "status" : "passed",
        "time" : {
          "start" : 1709496112887,
          "stop" : 1709496121714,
          "duration" : 8827
        }
      }, {
        "uid" : "425e09889952a368",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/425e09889952a368",
        "status" : "passed",
        "time" : {
          "start" : 1709491446959,
          "stop" : 1709491456129,
          "duration" : 9170
        }
      }, {
        "uid" : "2f136299a8374a33",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/2f136299a8374a33",
        "status" : "passed",
        "time" : {
          "start" : 1709489835131,
          "stop" : 1709489843757,
          "duration" : 8626
        }
      }, {
        "uid" : "ed6be0d52669f061",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/ed6be0d52669f061",
        "status" : "passed",
        "time" : {
          "start" : 1709488103117,
          "stop" : 1709488110561,
          "duration" : 7444
        }
      }, {
        "uid" : "5ca328d86a3f7a5b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/5ca328d86a3f7a5b",
        "status" : "passed",
        "time" : {
          "start" : 1709485980425,
          "stop" : 1709485989520,
          "duration" : 9095
        }
      }, {
        "uid" : "5e53a5bf57b10e0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/5e53a5bf57b10e0",
        "status" : "passed",
        "time" : {
          "start" : 1709483779497,
          "stop" : 1709483786555,
          "duration" : 7058
        }
      }, {
        "uid" : "7415740eae080433",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/7415740eae080433",
        "status" : "passed",
        "time" : {
          "start" : 1709408693886,
          "stop" : 1709408701164,
          "duration" : 7278
        }
      }, {
        "uid" : "28e0911e13500039",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/28e0911e13500039",
        "status" : "passed",
        "time" : {
          "start" : 1709405807898,
          "stop" : 1709405813653,
          "duration" : 5755
        }
      }, {
        "uid" : "e004a5cc7a3a1e0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/e004a5cc7a3a1e0c",
        "status" : "passed",
        "time" : {
          "start" : 1708972111610,
          "stop" : 1708972116977,
          "duration" : 5367
        }
      }, {
        "uid" : "1dd0e5574d9cc06c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/1dd0e5574d9cc06c",
        "status" : "passed",
        "time" : {
          "start" : 1708885784083,
          "stop" : 1708885789888,
          "duration" : 5805
        }
      }, {
        "uid" : "7adad743eff7e515",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/7adad743eff7e515",
        "status" : "passed",
        "time" : {
          "start" : 1708882763043,
          "stop" : 1708882770378,
          "duration" : 7335
        }
      }, {
        "uid" : "2776348fcde07598",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/2776348fcde07598",
        "status" : "passed",
        "time" : {
          "start" : 1708806375367,
          "stop" : 1708806382696,
          "duration" : 7329
        }
      }, {
        "uid" : "90645f3da27a02",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/90645f3da27a02",
        "status" : "passed",
        "time" : {
          "start" : 1708805751037,
          "stop" : 1708805756420,
          "duration" : 5383
        }
      }, {
        "uid" : "3966a8a6f452d75a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/3966a8a6f452d75a",
        "status" : "passed",
        "time" : {
          "start" : 1708547816134,
          "stop" : 1708547821462,
          "duration" : 5328
        }
      }, {
        "uid" : "c75f6febaffb5d93",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/c75f6febaffb5d93",
        "status" : "passed",
        "time" : {
          "start" : 1707851025308,
          "stop" : 1707851032907,
          "duration" : 7599
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c2d67ed1b87bfe12.json",
  "parameterValues" : [ ]
}