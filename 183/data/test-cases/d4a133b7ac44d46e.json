{
  "uid" : "d4a133b7ac44d46e",
  "name" : "POST Регистрация пользователя без электронной почты",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user_no_email",
  "historyId" : "3264f1f7ef33726afff2a1ca864c49f1",
  "time" : {
    "start" : 1709529439012,
    "stop" : 1709529439591,
    "duration" : 579
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfc0290>\n\n    @allure.title(\"POST Регистрация пользователя без электронной почты\")\n    def test_post_create_user_no_email(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_EMAIL)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"email\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n\ntests/test_api/test_api.py:656: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfc0290>\n\n    @allure.title(\"POST Регистрация пользователя без электронной почты\")\n    def test_post_create_user_no_email(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_EMAIL)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"email\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n\ntests/test_api/test_api.py:656: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Expected message: ['Это поле не может быть пустым.']",
      "time" : {
        "start" : 1709529439591,
        "stop" : 1709529439591,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 656, in test_post_create_user_no_email\n    f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n                                                                                        ^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 36,
        "unknown" : 0,
        "total" : 37
      },
      "items" : [ {
        "uid" : "579d56605284ee18",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/579d56605284ee18",
        "status" : "passed",
        "time" : {
          "start" : 1709496243784,
          "stop" : 1709496244352,
          "duration" : 568
        }
      }, {
        "uid" : "d2028a37e950fdb3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/d2028a37e950fdb3",
        "status" : "passed",
        "time" : {
          "start" : 1709491582149,
          "stop" : 1709491582925,
          "duration" : 776
        }
      }, {
        "uid" : "1fb9c97c629ec84a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/1fb9c97c629ec84a",
        "status" : "passed",
        "time" : {
          "start" : 1709489964948,
          "stop" : 1709489965501,
          "duration" : 553
        }
      }, {
        "uid" : "a165726a3303dcb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/a165726a3303dcb",
        "status" : "passed",
        "time" : {
          "start" : 1709488216856,
          "stop" : 1709488217302,
          "duration" : 446
        }
      }, {
        "uid" : "3f369cd0f6dd1ec0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/3f369cd0f6dd1ec0",
        "status" : "passed",
        "time" : {
          "start" : 1709486115112,
          "stop" : 1709486115699,
          "duration" : 587
        }
      }, {
        "uid" : "fd9aef1a6aa2aca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/fd9aef1a6aa2aca",
        "status" : "passed",
        "time" : {
          "start" : 1709483887505,
          "stop" : 1709483887904,
          "duration" : 399
        }
      }, {
        "uid" : "37cffeca5f374f0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/37cffeca5f374f0a",
        "status" : "passed",
        "time" : {
          "start" : 1709408806328,
          "stop" : 1709408806899,
          "duration" : 571
        }
      }, {
        "uid" : "66a70407a6ed8741",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/66a70407a6ed8741",
        "status" : "passed",
        "time" : {
          "start" : 1709405901869,
          "stop" : 1709405902293,
          "duration" : 424
        }
      }, {
        "uid" : "a3cf66acde6c287d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/a3cf66acde6c287d",
        "status" : "passed",
        "time" : {
          "start" : 1708972176603,
          "stop" : 1708972177003,
          "duration" : 400
        }
      }, {
        "uid" : "6372cbd6d2012463",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/6372cbd6d2012463",
        "status" : "passed",
        "time" : {
          "start" : 1708885852256,
          "stop" : 1708885852683,
          "duration" : 427
        }
      }, {
        "uid" : "3f0b44067d50dd70",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/3f0b44067d50dd70",
        "status" : "passed",
        "time" : {
          "start" : 1708882844071,
          "stop" : 1708882844645,
          "duration" : 574
        }
      }, {
        "uid" : "dcab8cd34500efed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/dcab8cd34500efed",
        "status" : "passed",
        "time" : {
          "start" : 1708806455902,
          "stop" : 1708806456472,
          "duration" : 570
        }
      }, {
        "uid" : "970a8c7b16fb3f64",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/970a8c7b16fb3f64",
        "status" : "passed",
        "time" : {
          "start" : 1708805816650,
          "stop" : 1708805817038,
          "duration" : 388
        }
      }, {
        "uid" : "a1f851bda915f3bc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/a1f851bda915f3bc",
        "status" : "passed",
        "time" : {
          "start" : 1708547880757,
          "stop" : 1708547881147,
          "duration" : 390
        }
      }, {
        "uid" : "c60f4c5ee0a52c1b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/c60f4c5ee0a52c1b",
        "status" : "passed",
        "time" : {
          "start" : 1707851108410,
          "stop" : 1707851109004,
          "duration" : 594
        }
      }, {
        "uid" : "9a9bc967367cb8bf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/9a9bc967367cb8bf",
        "status" : "passed",
        "time" : {
          "start" : 1707494666070,
          "stop" : 1707494666635,
          "duration" : 565
        }
      }, {
        "uid" : "a6424bdcd77ed243",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/a6424bdcd77ed243",
        "status" : "passed",
        "time" : {
          "start" : 1707479727569,
          "stop" : 1707479728139,
          "duration" : 570
        }
      }, {
        "uid" : "5156c995a0ac743c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/5156c995a0ac743c",
        "status" : "passed",
        "time" : {
          "start" : 1707255095702,
          "stop" : 1707255096270,
          "duration" : 568
        }
      }, {
        "uid" : "d4a9efa894802b58",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/d4a9efa894802b58",
        "status" : "passed",
        "time" : {
          "start" : 1707252335147,
          "stop" : 1707252335527,
          "duration" : 380
        }
      }, {
        "uid" : "fc6f383d2d4f6527",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/fc6f383d2d4f6527",
        "status" : "passed",
        "time" : {
          "start" : 1707245143513,
          "stop" : 1707245144060,
          "duration" : 547
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d4a133b7ac44d46e.json",
  "parameterValues" : [ ]
}