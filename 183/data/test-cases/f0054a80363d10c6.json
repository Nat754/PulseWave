{
  "uid" : "f0054a80363d10c6",
  "name" : "POST Регистрация ранее зарегистрированного пользователя",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_auth_user",
  "historyId" : "ce220593eb18c8976b98ac28948b279f",
  "time" : {
    "start" : 1709529399907,
    "stop" : 1709529400488,
    "duration" : 581
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7ff88ecbbda0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>nginx/1.25.4</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7ff88dfb4a10>\n\n    @allure.title(\"POST Регистрация ранее зарегистрированного пользователя\")\n    def test_post_create_auth_user(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER)\n>       print(response.json())\n\ntests/test_api/test_api.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1709529380531,
      "stop" : 1709529380531,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1709529380513,
      "stop" : 1709529380531,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1148-702"
  }, {
    "name" : "thread",
    "value" : "2266-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 37,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "98d80039f7e0fed1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/98d80039f7e0fed1",
        "status" : "passed",
        "time" : {
          "start" : 1709495927271,
          "stop" : 1709495927844,
          "duration" : 573
        }
      }, {
        "uid" : "95a276d2cb10f830",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/95a276d2cb10f830",
        "status" : "passed",
        "time" : {
          "start" : 1709491251919,
          "stop" : 1709491252514,
          "duration" : 595
        }
      }, {
        "uid" : "a587440b1625c871",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/a587440b1625c871",
        "status" : "passed",
        "time" : {
          "start" : 1709489650516,
          "stop" : 1709489651075,
          "duration" : 559
        }
      }, {
        "uid" : "5cc2a4b1f9fec20a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/5cc2a4b1f9fec20a",
        "status" : "passed",
        "time" : {
          "start" : 1709487939173,
          "stop" : 1709487939642,
          "duration" : 469
        }
      }, {
        "uid" : "161dcc45c544dccd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/161dcc45c544dccd",
        "status" : "passed",
        "time" : {
          "start" : 1709485787235,
          "stop" : 1709485787830,
          "duration" : 595
        }
      }, {
        "uid" : "f0915181392ff3b5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/f0915181392ff3b5",
        "status" : "passed",
        "time" : {
          "start" : 1709483627982,
          "stop" : 1709483628632,
          "duration" : 650
        }
      }, {
        "uid" : "a007e6e81a0890a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/180//#testresult/a007e6e81a0890a",
        "status" : "passed",
        "time" : {
          "start" : 1709408533466,
          "stop" : 1709408534038,
          "duration" : 572
        }
      }, {
        "uid" : "7797da7630a70c9f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/179//#testresult/7797da7630a70c9f",
        "status" : "passed",
        "time" : {
          "start" : 1709405684818,
          "stop" : 1709405685687,
          "duration" : 869
        }
      }, {
        "uid" : "7019ec7e3036fca0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/178//#testresult/7019ec7e3036fca0",
        "status" : "passed",
        "time" : {
          "start" : 1708971996337,
          "stop" : 1708971996858,
          "duration" : 521
        }
      }, {
        "uid" : "10b3cdf05877b918",
        "reportUrl" : "https://Nat754.github.io/PulseWave/177//#testresult/10b3cdf05877b918",
        "status" : "passed",
        "time" : {
          "start" : 1708885662871,
          "stop" : 1708885663308,
          "duration" : 437
        }
      }, {
        "uid" : "c73be1afd4b0e57b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/176//#testresult/c73be1afd4b0e57b",
        "status" : "passed",
        "time" : {
          "start" : 1708882612908,
          "stop" : 1708882613479,
          "duration" : 571
        }
      }, {
        "uid" : "df2285f9b9f142cd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/175//#testresult/df2285f9b9f142cd",
        "status" : "passed",
        "time" : {
          "start" : 1708806225668,
          "stop" : 1708806226421,
          "duration" : 753
        }
      }, {
        "uid" : "1775b6e5d85a5ffc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/174//#testresult/1775b6e5d85a5ffc",
        "status" : "passed",
        "time" : {
          "start" : 1708805634512,
          "stop" : 1708805635034,
          "duration" : 522
        }
      }, {
        "uid" : "8df8f1afeaea30c6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/173//#testresult/8df8f1afeaea30c6",
        "status" : "passed",
        "time" : {
          "start" : 1708547700522,
          "stop" : 1708547700921,
          "duration" : 399
        }
      }, {
        "uid" : "92b5a19c50006a02",
        "reportUrl" : "https://Nat754.github.io/PulseWave/172//#testresult/92b5a19c50006a02",
        "status" : "passed",
        "time" : {
          "start" : 1707850869723,
          "stop" : 1707850870321,
          "duration" : 598
        }
      }, {
        "uid" : "13f603e45ccf626a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/13f603e45ccf626a",
        "status" : "passed",
        "time" : {
          "start" : 1707494460176,
          "stop" : 1707494460938,
          "duration" : 762
        }
      }, {
        "uid" : "2887b2242b7db43f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/171//#testresult/2887b2242b7db43f",
        "status" : "passed",
        "time" : {
          "start" : 1707479520747,
          "stop" : 1707479521316,
          "duration" : 569
        }
      }, {
        "uid" : "52ab971ef20b5b87",
        "reportUrl" : "https://Nat754.github.io/PulseWave/170//#testresult/52ab971ef20b5b87",
        "status" : "passed",
        "time" : {
          "start" : 1707254889947,
          "stop" : 1707254890520,
          "duration" : 573
        }
      }, {
        "uid" : "af85643c9da13b60",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/af85643c9da13b60",
        "status" : "passed",
        "time" : {
          "start" : 1707252302168,
          "stop" : 1707252302683,
          "duration" : 515
        }
      }, {
        "uid" : "33b4e431211f13ac",
        "reportUrl" : "https://Nat754.github.io/PulseWave/169//#testresult/33b4e431211f13ac",
        "status" : "passed",
        "time" : {
          "start" : 1707245104751,
          "stop" : 1707245105290,
          "duration" : 539
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f0054a80363d10c6.json",
  "parameterValues" : [ ]
}