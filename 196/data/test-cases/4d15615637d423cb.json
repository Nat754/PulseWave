{
  "uid" : "4d15615637d423cb",
  "name" : "PUT Обновить стикер",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_task_id_sticker_id",
  "historyId" : "3bc6b38e7f2ba2cc4bc8334ec59ed7a5",
  "time" : {
    "start" : 1713101350345,
    "stop" : 1713101364399,
    "duration" : 14054
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f714f788a70>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f714e8a2750>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f714e215df0>\n\n    @allure.title(\"PUT Обновить стикер\")\n    def test_put_api_task_id_sticker_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        column_id, task_id = use_api_base.get_column_task_id()\n        sticker_new = {\"name\": faker.first_name(), \"color\": random.choice(self.constant.COLOR_STICKER)}\n        headers = {'accept': 'application/json', 'Authorization': f\"{jwt}\"}\n        url = f'{self.constant.BASE_URL}api/task/{task_id}/sticker/'\n        response = requests.post(url, headers=headers, json=sticker_new)\n>       sticker_id = response.json()['id']\n\ntests/test_api/test_api.py:506: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713100955920,
      "stop" : 1713100955920,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713101350345,
      "stop" : 1713101350345,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713100955904,
      "stop" : 1713100955920,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f714f788a70>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f714e8a2750>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f714e215df0>\n\n    @allure.title(\"PUT Обновить стикер\")\n    def test_put_api_task_id_sticker_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        column_id, task_id = use_api_base.get_column_task_id()\n        sticker_new = {\"name\": faker.first_name(), \"color\": random.choice(self.constant.COLOR_STICKER)}\n        headers = {'accept': 'application/json', 'Authorization': f\"{jwt}\"}\n        url = f'{self.constant.BASE_URL}api/task/{task_id}/sticker/'\n        response = requests.post(url, headers=headers, json=sticker_new)\n>       sticker_id = response.json()['id']\n\ntests/test_api/test_api.py:506: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713101350345,
        "stop" : 1713101352301,
        "duration" : 1956
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id задачи",
      "time" : {
        "start" : 1713101352302,
        "stop" : 1713101363674,
        "duration" : 11372
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713101352302,
          "stop" : 1713101354076,
          "duration" : 1774
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id колонки",
        "time" : {
          "start" : 1713101354077,
          "stop" : 1713101362780,
          "duration" : 8703
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713101354077,
            "stop" : 1713101356161,
            "duration" : 2084
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Получить id доски",
          "time" : {
            "start" : 1713101356162,
            "stop" : 1713101361388,
            "duration" : 5226
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Получить access токен пользователя на емайл",
            "time" : {
              "start" : 1713101356162,
              "stop" : 1713101358199,
              "duration" : 2037
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Получить id рабочего пространства",
            "time" : {
              "start" : 1713101358200,
              "stop" : 1713101360656,
              "duration" : 2456
            },
            "status" : "passed",
            "steps" : [ {
              "name" : "Получить access токен пользователя на емайл",
              "time" : {
                "start" : 1713101358200,
                "stop" : 1713101359896,
                "duration" : 1696
              },
              "status" : "passed",
              "steps" : [ ],
              "attachments" : [ ],
              "parameters" : [ ],
              "stepsCount" : 0,
              "attachmentsCount" : 0,
              "shouldDisplayMessage" : false,
              "hasContent" : false
            } ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 1,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : true
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 3,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 5,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az693-968"
  }, {
    "name" : "thread",
    "value" : "2383-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 21,
        "unknown" : 0,
        "total" : 23
      },
      "items" : [ {
        "uid" : "b32da732029d7b3f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/b32da732029d7b3f",
        "status" : "passed",
        "time" : {
          "start" : 1711136735172,
          "stop" : 1711136744688,
          "duration" : 9516
        }
      }, {
        "uid" : "3dfaeb3e67788d83",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/3dfaeb3e67788d83",
        "status" : "passed",
        "time" : {
          "start" : 1710361058118,
          "stop" : 1710361070010,
          "duration" : 11892
        }
      }, {
        "uid" : "6df2e7384b67f03f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/6df2e7384b67f03f",
        "status" : "passed",
        "time" : {
          "start" : 1710226472450,
          "stop" : 1710226482549,
          "duration" : 10099
        }
      }, {
        "uid" : "5b93f459001c545c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/5b93f459001c545c",
        "status" : "passed",
        "time" : {
          "start" : 1710181454801,
          "stop" : 1710181462537,
          "duration" : 7736
        }
      }, {
        "uid" : "b9e4bec05f78c965",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/b9e4bec05f78c965",
        "status" : "passed",
        "time" : {
          "start" : 1710081003037,
          "stop" : 1710081010593,
          "duration" : 7556
        }
      }, {
        "uid" : "b841c60c2def3a37",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/b841c60c2def3a37",
        "status" : "passed",
        "time" : {
          "start" : 1709990411511,
          "stop" : 1709990420798,
          "duration" : 9287
        }
      }, {
        "uid" : "8e6b1d96e4ab9f8a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/8e6b1d96e4ab9f8a",
        "status" : "passed",
        "time" : {
          "start" : 1709988635582,
          "stop" : 1709988644810,
          "duration" : 9228
        }
      }, {
        "uid" : "684e8b59363ec591",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/684e8b59363ec591",
        "status" : "passed",
        "time" : {
          "start" : 1709931588670,
          "stop" : 1709931598088,
          "duration" : 9418
        }
      }, {
        "uid" : "fc46058c853d9d21",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/fc46058c853d9d21",
        "status" : "passed",
        "time" : {
          "start" : 1709929545877,
          "stop" : 1709929555252,
          "duration" : 9375
        }
      }, {
        "uid" : "3deb8481854b4e92",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/3deb8481854b4e92",
        "status" : "passed",
        "time" : {
          "start" : 1709814046543,
          "stop" : 1709814054126,
          "duration" : 7583
        }
      }, {
        "uid" : "5222e825df23498d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/5222e825df23498d",
        "status" : "passed",
        "time" : {
          "start" : 1709750425939,
          "stop" : 1709750433628,
          "duration" : 7689
        }
      }, {
        "uid" : "6f37b1d95b2be400",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/6f37b1d95b2be400",
        "status" : "passed",
        "time" : {
          "start" : 1709748846929,
          "stop" : 1709748857312,
          "duration" : 10383
        }
      }, {
        "uid" : "1227daba833692e3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/184//#testresult/1227daba833692e3",
        "status" : "passed",
        "time" : {
          "start" : 1709534897292,
          "stop" : 1709534903532,
          "duration" : 6240
        }
      }, {
        "uid" : "74ebb16833bc891",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/74ebb16833bc891",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1709529428212,
          "stop" : 1709529428795,
          "duration" : 583
        }
      }, {
        "uid" : "e95cfb1b8b421e14",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/e95cfb1b8b421e14",
        "status" : "passed",
        "time" : {
          "start" : 1709496149570,
          "stop" : 1709496159016,
          "duration" : 9446
        }
      }, {
        "uid" : "4609dabca91722ea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/4609dabca91722ea",
        "status" : "passed",
        "time" : {
          "start" : 1709491484875,
          "stop" : 1709491494686,
          "duration" : 9811
        }
      }, {
        "uid" : "5eaf5d7b4a838c37",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/5eaf5d7b4a838c37",
        "status" : "passed",
        "time" : {
          "start" : 1709489871052,
          "stop" : 1709489880357,
          "duration" : 9305
        }
      }, {
        "uid" : "7ea2e2ebce5f1424",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/7ea2e2ebce5f1424",
        "status" : "passed",
        "time" : {
          "start" : 1709488134158,
          "stop" : 1709488142122,
          "duration" : 7964
        }
      }, {
        "uid" : "dd73277f439ad89e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/dd73277f439ad89e",
        "status" : "passed",
        "time" : {
          "start" : 1709486017921,
          "stop" : 1709486027784,
          "duration" : 9863
        }
      }, {
        "uid" : "4a7e6c810a76fd0d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/4a7e6c810a76fd0d",
        "status" : "passed",
        "time" : {
          "start" : 1709483808971,
          "stop" : 1709483816641,
          "duration" : 7670
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "4d15615637d423cb.json",
  "parameterValues" : [ ]
}