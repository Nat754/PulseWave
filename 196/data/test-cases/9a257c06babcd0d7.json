{
  "uid" : "9a257c06babcd0d7",
  "name" : "GET Представление одного стикера",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_task_id_sticker_id",
  "historyId" : "316afcee8c3256c5f8354b9363f84cc3",
  "time" : {
    "start" : 1713101334370,
    "stop" : 1713101350270,
    "duration" : 15900
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f714f788a70>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f714e8a12b0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f714e20dfd0>\n\n    @allure.title(\"GET Представление одного стикера\")\n    def test_get_api_task_id_sticker_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        column_id, task_id = use_api_base.get_column_task_id()\n        url = f'{self.constant.BASE_URL}api/task/{task_id}/sticker/'\n        response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"},\n                                 json={\"name\": faker.first_name(), \"color\": random.choice(self.constant.COLOR_STICKER)})\n>       sticker_id = response.json()['id']\n\ntests/test_api/test_api.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713100955920,
      "stop" : 1713100955920,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713101334370,
      "stop" : 1713101334370,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713100955904,
      "stop" : 1713100955920,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f714f788a70>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f714e8a12b0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f714e20dfd0>\n\n    @allure.title(\"GET Представление одного стикера\")\n    def test_get_api_task_id_sticker_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        column_id, task_id = use_api_base.get_column_task_id()\n        url = f'{self.constant.BASE_URL}api/task/{task_id}/sticker/'\n        response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"},\n                                 json={\"name\": faker.first_name(), \"color\": random.choice(self.constant.COLOR_STICKER)})\n>       sticker_id = response.json()['id']\n\ntests/test_api/test_api.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.2/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713101334370,
        "stop" : 1713101336701,
        "duration" : 2331
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id задачи",
      "time" : {
        "start" : 1713101336702,
        "stop" : 1713101349327,
        "duration" : 12625
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713101336702,
          "stop" : 1713101338446,
          "duration" : 1744
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id колонки",
        "time" : {
          "start" : 1713101338447,
          "stop" : 1713101348576,
          "duration" : 10129
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713101338447,
            "stop" : 1713101340484,
            "duration" : 2037
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Получить id доски",
          "time" : {
            "start" : 1713101340485,
            "stop" : 1713101347012,
            "duration" : 6527
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Получить access токен пользователя на емайл",
            "time" : {
              "start" : 1713101340485,
              "stop" : 1713101342626,
              "duration" : 2141
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Получить id рабочего пространства",
            "time" : {
              "start" : 1713101342627,
              "stop" : 1713101346348,
              "duration" : 3721
            },
            "status" : "passed",
            "steps" : [ {
              "name" : "Получить access токен пользователя на емайл",
              "time" : {
                "start" : 1713101342627,
                "stop" : 1713101345116,
                "duration" : 2489
              },
              "status" : "passed",
              "steps" : [ ],
              "attachments" : [ ],
              "parameters" : [ ],
              "stepsCount" : 0,
              "attachmentsCount" : 0,
              "shouldDisplayMessage" : false,
              "hasContent" : false
            } ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 1,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : true
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 3,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 5,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az693-968"
  }, {
    "name" : "thread",
    "value" : "2383-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 46,
        "unknown" : 0,
        "total" : 51
      },
      "items" : [ {
        "uid" : "fd4bdf99c23ce07f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/fd4bdf99c23ce07f",
        "status" : "passed",
        "time" : {
          "start" : 1711136726004,
          "stop" : 1711136735169,
          "duration" : 9165
        }
      }, {
        "uid" : "fa9ce38d820f3fc0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/fa9ce38d820f3fc0",
        "status" : "passed",
        "time" : {
          "start" : 1710361046603,
          "stop" : 1710361058115,
          "duration" : 11512
        }
      }, {
        "uid" : "c6323d514af4430c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/c6323d514af4430c",
        "status" : "passed",
        "time" : {
          "start" : 1710226462622,
          "stop" : 1710226472448,
          "duration" : 9826
        }
      }, {
        "uid" : "887c385aa8185d74",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/887c385aa8185d74",
        "status" : "passed",
        "time" : {
          "start" : 1710181447284,
          "stop" : 1710181454799,
          "duration" : 7515
        }
      }, {
        "uid" : "30e03c50272fb21e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/30e03c50272fb21e",
        "status" : "passed",
        "time" : {
          "start" : 1710080995461,
          "stop" : 1710081003035,
          "duration" : 7574
        }
      }, {
        "uid" : "912b294e3a0c0980",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/912b294e3a0c0980",
        "status" : "passed",
        "time" : {
          "start" : 1709990402194,
          "stop" : 1709990411509,
          "duration" : 9315
        }
      }, {
        "uid" : "f32de1573ba7d1e9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/f32de1573ba7d1e9",
        "status" : "passed",
        "time" : {
          "start" : 1709988626307,
          "stop" : 1709988635580,
          "duration" : 9273
        }
      }, {
        "uid" : "2a36af613180a04b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/2a36af613180a04b",
        "status" : "passed",
        "time" : {
          "start" : 1709931579354,
          "stop" : 1709931588668,
          "duration" : 9314
        }
      }, {
        "uid" : "44a6ae07313b5d98",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/44a6ae07313b5d98",
        "status" : "passed",
        "time" : {
          "start" : 1709929536476,
          "stop" : 1709929545875,
          "duration" : 9399
        }
      }, {
        "uid" : "b70f3b4930d0cbe9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/b70f3b4930d0cbe9",
        "status" : "passed",
        "time" : {
          "start" : 1709814038897,
          "stop" : 1709814046541,
          "duration" : 7644
        }
      }, {
        "uid" : "145b62fbd38a1d78",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/145b62fbd38a1d78",
        "status" : "passed",
        "time" : {
          "start" : 1709750418240,
          "stop" : 1709750425937,
          "duration" : 7697
        }
      }, {
        "uid" : "56a755f1ee3de9f4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/56a755f1ee3de9f4",
        "status" : "passed",
        "time" : {
          "start" : 1709748836923,
          "stop" : 1709748846926,
          "duration" : 10003
        }
      }, {
        "uid" : "d9b5dbbb702e9d2c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/184//#testresult/d9b5dbbb702e9d2c",
        "status" : "passed",
        "time" : {
          "start" : 1709534891009,
          "stop" : 1709534897290,
          "duration" : 6281
        }
      }, {
        "uid" : "c7bfd2c6f8052c9f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/c7bfd2c6f8052c9f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1709529427575,
          "stop" : 1709529428156,
          "duration" : 581
        }
      }, {
        "uid" : "a1749514916f827",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/a1749514916f827",
        "status" : "passed",
        "time" : {
          "start" : 1709496140092,
          "stop" : 1709496149568,
          "duration" : 9476
        }
      }, {
        "uid" : "5e3ed842cccad31e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/5e3ed842cccad31e",
        "status" : "passed",
        "time" : {
          "start" : 1709491475184,
          "stop" : 1709491484873,
          "duration" : 9689
        }
      }, {
        "uid" : "96d4c089d72fd9aa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/96d4c089d72fd9aa",
        "status" : "passed",
        "time" : {
          "start" : 1709489861644,
          "stop" : 1709489871050,
          "duration" : 9406
        }
      }, {
        "uid" : "307884f60a5f0257",
        "reportUrl" : "https://Nat754.github.io/PulseWave/182//#testresult/307884f60a5f0257",
        "status" : "passed",
        "time" : {
          "start" : 1709488126095,
          "stop" : 1709488134156,
          "duration" : 8061
        }
      }, {
        "uid" : "a2f0281090c12a4e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/a2f0281090c12a4e",
        "status" : "passed",
        "time" : {
          "start" : 1709486008339,
          "stop" : 1709486017919,
          "duration" : 9580
        }
      }, {
        "uid" : "1dbc960d46b2a0d9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/181//#testresult/1dbc960d46b2a0d9",
        "status" : "passed",
        "time" : {
          "start" : 1709483801171,
          "stop" : 1709483808969,
          "duration" : 7798
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "9a257c06babcd0d7.json",
  "parameterValues" : [ ]
}