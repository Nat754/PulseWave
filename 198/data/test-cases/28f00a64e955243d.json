{
  "uid" : "28f00a64e955243d",
  "name" : "GET Список всех колонок доски",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_boards_id_column",
  "historyId" : "0b324773507a93de799493cecf909336",
  "time" : {
    "start" : 1713592786468,
    "stop" : 1713592792830,
    "duration" : 6362
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6bb371eed0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bb289bcb0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bb2277110>\n\n    @allure.title(\"GET Список всех колонок доски\")\n    def test_get_api_boards_id_column(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       board_id = use_api_base.get_board_id()[1]\n\ntests/test_api/test_api.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713592786467,
      "stop" : 1713592786468,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713592659434,
      "stop" : 1713592659451,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713592659451,
      "stop" : 1713592659452,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6bb371eed0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bb289bcb0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bb2277110>\n\n    @allure.title(\"GET Список всех колонок доски\")\n    def test_get_api_boards_id_column(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       board_id = use_api_base.get_board_id()[1]\n\ntests/test_api/test_api.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713592786468,
        "stop" : 1713592787955,
        "duration" : 1487
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id доски",
      "time" : {
        "start" : 1713592787956,
        "stop" : 1713592792830,
        "duration" : 4874
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713592787956,
          "stop" : 1713592789509,
          "duration" : 1553
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id рабочего пространства",
        "time" : {
          "start" : 1713592789509,
          "stop" : 1713592791818,
          "duration" : 2309
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713592789510,
            "stop" : 1713592790961,
            "duration" : 1451
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1206-36"
  }, {
    "name" : "thread",
    "value" : "2375-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 49,
        "unknown" : 0,
        "total" : 54
      },
      "items" : [ {
        "uid" : "6fc22d681e610011",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/6fc22d681e610011",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713435612072,
          "stop" : 1713435620228,
          "duration" : 8156
        }
      }, {
        "uid" : "37416025b834c075",
        "reportUrl" : "https://Nat754.github.io/PulseWave/197//#testresult/37416025b834c075",
        "status" : "passed",
        "time" : {
          "start" : 1713198521532,
          "stop" : 1713198529650,
          "duration" : 8118
        }
      }, {
        "uid" : "830551ae3d4123cd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/830551ae3d4123cd",
        "status" : "passed",
        "time" : {
          "start" : 1713101095155,
          "stop" : 1713101103116,
          "duration" : 7961
        }
      }, {
        "uid" : "e7ac182607c6f48a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/e7ac182607c6f48a",
        "status" : "passed",
        "time" : {
          "start" : 1711136580676,
          "stop" : 1711136585914,
          "duration" : 5238
        }
      }, {
        "uid" : "8f41af71102504dc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/8f41af71102504dc",
        "status" : "passed",
        "time" : {
          "start" : 1710360860031,
          "stop" : 1710360866294,
          "duration" : 6263
        }
      }, {
        "uid" : "5395e3a772306290",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/5395e3a772306290",
        "status" : "passed",
        "time" : {
          "start" : 1710226303997,
          "stop" : 1710226309093,
          "duration" : 5096
        }
      }, {
        "uid" : "5c48ecac77083ff8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/5c48ecac77083ff8",
        "status" : "passed",
        "time" : {
          "start" : 1710181325393,
          "stop" : 1710181329495,
          "duration" : 4102
        }
      }, {
        "uid" : "cf5222a77f4a59f7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/cf5222a77f4a59f7",
        "status" : "passed",
        "time" : {
          "start" : 1710080874405,
          "stop" : 1710080878297,
          "duration" : 3892
        }
      }, {
        "uid" : "c2f17576d1a255de",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/c2f17576d1a255de",
        "status" : "passed",
        "time" : {
          "start" : 1709990255741,
          "stop" : 1709990260610,
          "duration" : 4869
        }
      }, {
        "uid" : "885b4a0cc9e895ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/885b4a0cc9e895ed",
        "status" : "passed",
        "time" : {
          "start" : 1709988480605,
          "stop" : 1709988485432,
          "duration" : 4827
        }
      }, {
        "uid" : "3b8cf0e6ec6e6775",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/3b8cf0e6ec6e6775",
        "status" : "passed",
        "time" : {
          "start" : 1709931429150,
          "stop" : 1709931434248,
          "duration" : 5098
        }
      }, {
        "uid" : "16fe5564fcbde66f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/16fe5564fcbde66f",
        "status" : "passed",
        "time" : {
          "start" : 1709929387715,
          "stop" : 1709929392573,
          "duration" : 4858
        }
      }, {
        "uid" : "9d9f1f0fa39ce926",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/9d9f1f0fa39ce926",
        "status" : "passed",
        "time" : {
          "start" : 1709813916711,
          "stop" : 1709813920685,
          "duration" : 3974
        }
      }, {
        "uid" : "bb18477e5ed6b3dd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/bb18477e5ed6b3dd",
        "status" : "passed",
        "time" : {
          "start" : 1709750297197,
          "stop" : 1709750301175,
          "duration" : 3978
        }
      }, {
        "uid" : "b7e8e494c0a3076c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/b7e8e494c0a3076c",
        "status" : "passed",
        "time" : {
          "start" : 1709748679010,
          "stop" : 1709748684134,
          "duration" : 5124
        }
      }, {
        "uid" : "5da730dc4291bbe9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/184//#testresult/5da730dc4291bbe9",
        "status" : "passed",
        "time" : {
          "start" : 1709534790628,
          "stop" : 1709534793832,
          "duration" : 3204
        }
      }, {
        "uid" : "e3050136045b6f8f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/e3050136045b6f8f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1709529412400,
          "stop" : 1709529412981,
          "duration" : 581
        }
      }, {
        "uid" : "9ec699093069166b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/9ec699093069166b",
        "status" : "passed",
        "time" : {
          "start" : 1709495991920,
          "stop" : 1709495996831,
          "duration" : 4911
        }
      }, {
        "uid" : "ba140f06dcb845d3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/ba140f06dcb845d3",
        "status" : "passed",
        "time" : {
          "start" : 1709491320884,
          "stop" : 1709491325844,
          "duration" : 4960
        }
      }, {
        "uid" : "924ab7556e442a31",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/924ab7556e442a31",
        "status" : "passed",
        "time" : {
          "start" : 1709489714886,
          "stop" : 1709489719683,
          "duration" : 4797
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "28f00a64e955243d.json",
  "parameterValues" : [ ]
}