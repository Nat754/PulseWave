{
  "uid" : "9204c8095ae6a688",
  "name" : "PATCH Частично обновить задачу",
  "fullName" : "tests.test_api.test_api.TestAPI#test_patch_api_column_id_task_id",
  "historyId" : "dfe2f9a63692d074fcb147be38701049",
  "time" : {
    "start" : 1713778857079,
    "stop" : 1713778865319,
    "duration" : 8240
  },
  "description" : "Перемещение между колонками возможно только PUT запросом",
  "descriptionHtml" : "<p>Перемещение между колонками возможно только PUT запросом</p>\n",
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f27d85831d0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27d77ae3f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f27d7106030>\n\n    @pytest.mark.xfail\n    @allure.title(\"PATCH Частично обновить задачу\")\n    def test_patch_api_column_id_task_id(self, use_api_base):\n        \"\"\"Перемещение между колонками возможно только PUT запросом\"\"\"\n        jwt = use_api_base.create_jwt(email1, password0)\n>       column_id, task_id = use_api_base.get_column_task_id()\n\ntests/test_api/test_api.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:177: in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\napi_testing/api_base.py:163: in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713778689817,
      "stop" : 1713778689834,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713778689834,
      "stop" : 1713778689834,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713778857079,
      "stop" : 1713778857079,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Перемещение между колонками возможно только PUT запросом",
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f27d85831d0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27d77ae3f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f27d7106030>\n\n    @pytest.mark.xfail\n    @allure.title(\"PATCH Частично обновить задачу\")\n    def test_patch_api_column_id_task_id(self, use_api_base):\n        \"\"\"Перемещение между колонками возможно только PUT запросом\"\"\"\n        jwt = use_api_base.create_jwt(email1, password0)\n>       column_id, task_id = use_api_base.get_column_task_id()\n\ntests/test_api/test_api.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:177: in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\napi_testing/api_base.py:163: in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713778857079,
        "stop" : 1713778858323,
        "duration" : 1244
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id задачи",
      "time" : {
        "start" : 1713778858324,
        "stop" : 1713778865318,
        "duration" : 6994
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 177, in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 163, in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\n                             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713778858324,
          "stop" : 1713778859916,
          "duration" : 1592
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id колонки",
        "time" : {
          "start" : 1713778859917,
          "stop" : 1713778865318,
          "duration" : 5401
        },
        "status" : "broken",
        "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
        "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 163, in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\n                             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713778859917,
            "stop" : 1713778861225,
            "duration" : 1308
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Получить id доски",
          "time" : {
            "start" : 1713778861226,
            "stop" : 1713778865318,
            "duration" : 4092
          },
          "status" : "broken",
          "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
          "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
          "steps" : [ {
            "name" : "Получить access токен пользователя на емайл",
            "time" : {
              "start" : 1713778861226,
              "stop" : 1713778862632,
              "duration" : 1406
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          }, {
            "name" : "Получить id рабочего пространства",
            "time" : {
              "start" : 1713778862633,
              "stop" : 1713778864601,
              "duration" : 1968
            },
            "status" : "passed",
            "steps" : [ {
              "name" : "Получить access токен пользователя на емайл",
              "time" : {
                "start" : 1713778862633,
                "stop" : 1713778863904,
                "duration" : 1271
              },
              "status" : "passed",
              "steps" : [ ],
              "attachments" : [ ],
              "parameters" : [ ],
              "stepsCount" : 0,
              "attachmentsCount" : 0,
              "shouldDisplayMessage" : false,
              "hasContent" : false
            } ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 1,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : true
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 3,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : true,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 5,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 7,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az975-714"
  }, {
    "name" : "thread",
    "value" : "2239-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 1,
        "passed" : 23,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "760da4650d45125d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/2//#testresult/760da4650d45125d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713752504748,
          "stop" : 1713752511895,
          "duration" : 7147
        }
      }, {
        "uid" : "5022e3695688569a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/1//#testresult/5022e3695688569a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713666167218,
          "stop" : 1713666176602,
          "duration" : 9384
        }
      }, {
        "uid" : "84326cf460c224ec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/198//#testresult/84326cf460c224ec",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713592850839,
          "stop" : 1713592860181,
          "duration" : 9342
        }
      }, {
        "uid" : "8d6fba5bc6a6caca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/8d6fba5bc6a6caca",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713435697231,
          "stop" : 1713435708789,
          "duration" : 11558
        }
      }, {
        "uid" : "2c040e2b8813981b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/197//#testresult/2c040e2b8813981b",
        "status" : "passed",
        "time" : {
          "start" : 1713198611704,
          "stop" : 1713198627091,
          "duration" : 15387
        }
      }, {
        "uid" : "1c32cf9321f66a4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/1c32cf9321f66a4",
        "status" : "passed",
        "time" : {
          "start" : 1713101192126,
          "stop" : 1713101209737,
          "duration" : 17611
        }
      }, {
        "uid" : "db29ec66c232321b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/db29ec66c232321b",
        "status" : "passed",
        "time" : {
          "start" : 1711136640476,
          "stop" : 1711136651287,
          "duration" : 10811
        }
      }, {
        "uid" : "998a2862f37382ec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/998a2862f37382ec",
        "status" : "passed",
        "time" : {
          "start" : 1710360936369,
          "stop" : 1710360949636,
          "duration" : 13267
        }
      }, {
        "uid" : "bfe7b9101733017a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/bfe7b9101733017a",
        "status" : "passed",
        "time" : {
          "start" : 1710226369086,
          "stop" : 1710226380291,
          "duration" : 11205
        }
      }, {
        "uid" : "42e9ccd4e5b31aea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/42e9ccd4e5b31aea",
        "status" : "passed",
        "time" : {
          "start" : 1710181375556,
          "stop" : 1710181384028,
          "duration" : 8472
        }
      }, {
        "uid" : "53f29d14cc398aea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/53f29d14cc398aea",
        "status" : "passed",
        "time" : {
          "start" : 1710080924284,
          "stop" : 1710080933569,
          "duration" : 9285
        }
      }, {
        "uid" : "ad6bd3dddbc2fa77",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/ad6bd3dddbc2fa77",
        "status" : "passed",
        "time" : {
          "start" : 1709990315958,
          "stop" : 1709990326169,
          "duration" : 10211
        }
      }, {
        "uid" : "49bc3f78cf4789d3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/49bc3f78cf4789d3",
        "status" : "passed",
        "time" : {
          "start" : 1709988540428,
          "stop" : 1709988550735,
          "duration" : 10307
        }
      }, {
        "uid" : "1fadf4942fc043f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/1fadf4942fc043f",
        "status" : "passed",
        "time" : {
          "start" : 1709931491513,
          "stop" : 1709931502075,
          "duration" : 10562
        }
      }, {
        "uid" : "24d919ad33145f20",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/24d919ad33145f20",
        "status" : "passed",
        "time" : {
          "start" : 1709929448904,
          "stop" : 1709929459349,
          "duration" : 10445
        }
      }, {
        "uid" : "5e24ba802fae2961",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/5e24ba802fae2961",
        "status" : "passed",
        "time" : {
          "start" : 1709813966453,
          "stop" : 1709813974900,
          "duration" : 8447
        }
      }, {
        "uid" : "748257ff10a80533",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/748257ff10a80533",
        "status" : "passed",
        "time" : {
          "start" : 1709750346951,
          "stop" : 1709750355421,
          "duration" : 8470
        }
      }, {
        "uid" : "f8f161d7b4847554",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/f8f161d7b4847554",
        "status" : "passed",
        "time" : {
          "start" : 1709748743641,
          "stop" : 1709748754624,
          "duration" : 10983
        }
      }, {
        "uid" : "3b0a6e647e0d8315",
        "reportUrl" : "https://Nat754.github.io/PulseWave/184//#testresult/3b0a6e647e0d8315",
        "status" : "passed",
        "time" : {
          "start" : 1709534830799,
          "stop" : 1709534837676,
          "duration" : 6877
        }
      }, {
        "uid" : "a12222642f023715",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/a12222642f023715",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1709529418060,
          "stop" : 1709529418641,
          "duration" : 581
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "9204c8095ae6a688.json",
  "parameterValues" : [ ]
}