{
  "uid" : "c2131e1ca2461313",
  "name" : "PUT Обновить доску",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_workspace_id_boards_id",
  "historyId" : "059274d599378196954cee6d2bc38e47",
  "time" : {
    "start" : 1713778776193,
    "stop" : 1713778781355,
    "duration" : 5162
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f27d85831d0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27d77acf50>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f27d70f96d0>\n\n    @pytest.mark.xfail\n    @allure.title(\"PUT Обновить доску\")\n    def test_put_api_workspace_id_boards_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       workspace_id, board_id = use_api_base.get_board_id()\n\ntests/test_api/test_api.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713778776193,
      "stop" : 1713778776193,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713778689817,
      "stop" : 1713778689834,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713778689834,
      "stop" : 1713778689834,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f27d85831d0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27d77acf50>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f27d70f96d0>\n\n    @pytest.mark.xfail\n    @allure.title(\"PUT Обновить доску\")\n    def test_put_api_workspace_id_boards_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       workspace_id, board_id = use_api_base.get_board_id()\n\ntests/test_api/test_api.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713778776193,
        "stop" : 1713778777487,
        "duration" : 1294
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id доски",
      "time" : {
        "start" : 1713778777488,
        "stop" : 1713778781355,
        "duration" : 3867
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713778777488,
          "stop" : 1713778778730,
          "duration" : 1242
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id рабочего пространства",
        "time" : {
          "start" : 1713778778730,
          "stop" : 1713778780624,
          "duration" : 1894
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713778778730,
            "stop" : 1713778779960,
            "duration" : 1230
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 5,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az975-714"
  }, {
    "name" : "thread",
    "value" : "2239-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 1,
        "passed" : 49,
        "unknown" : 0,
        "total" : 57
      },
      "items" : [ {
        "uid" : "e1215bb195f0930d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/2//#testresult/e1215bb195f0930d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713752430966,
          "stop" : 1713752435931,
          "duration" : 4965
        }
      }, {
        "uid" : "c0a673859511062d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/1//#testresult/c0a673859511062d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713666076699,
          "stop" : 1713666082917,
          "duration" : 6218
        }
      }, {
        "uid" : "75538a0322d4e6b1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/198//#testresult/75538a0322d4e6b1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713592759750,
          "stop" : 1713592766145,
          "duration" : 6395
        }
      }, {
        "uid" : "9396dfb6072c06ce",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/9396dfb6072c06ce",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713435579266,
          "stop" : 1713435586647,
          "duration" : 7381
        }
      }, {
        "uid" : "72dd26d5dab249ea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/197//#testresult/72dd26d5dab249ea",
        "status" : "passed",
        "time" : {
          "start" : 1713198491128,
          "stop" : 1713198498852,
          "duration" : 7724
        }
      }, {
        "uid" : "cc2c20f4293b0548",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/cc2c20f4293b0548",
        "status" : "passed",
        "time" : {
          "start" : 1713101062050,
          "stop" : 1713101069949,
          "duration" : 7899
        }
      }, {
        "uid" : "c1de0d1b12d206cc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/c1de0d1b12d206cc",
        "status" : "passed",
        "time" : {
          "start" : 1711136561444,
          "stop" : 1711136566497,
          "duration" : 5053
        }
      }, {
        "uid" : "b13cc76639bba186",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/b13cc76639bba186",
        "status" : "passed",
        "time" : {
          "start" : 1710360834478,
          "stop" : 1710360840958,
          "duration" : 6480
        }
      }, {
        "uid" : "9fc4700b62880a36",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/9fc4700b62880a36",
        "status" : "passed",
        "time" : {
          "start" : 1710226282860,
          "stop" : 1710226288247,
          "duration" : 5387
        }
      }, {
        "uid" : "152d6840427363f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/152d6840427363f",
        "status" : "passed",
        "time" : {
          "start" : 1710181308441,
          "stop" : 1710181312512,
          "duration" : 4071
        }
      }, {
        "uid" : "102af9c335951aa3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/102af9c335951aa3",
        "status" : "passed",
        "time" : {
          "start" : 1710080856917,
          "stop" : 1710080861730,
          "duration" : 4813
        }
      }, {
        "uid" : "ae2294d09ebca727",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/ae2294d09ebca727",
        "status" : "passed",
        "time" : {
          "start" : 1709990236022,
          "stop" : 1709990241145,
          "duration" : 5123
        }
      }, {
        "uid" : "c6c1591120b72256",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/c6c1591120b72256",
        "status" : "passed",
        "time" : {
          "start" : 1709988461229,
          "stop" : 1709988466029,
          "duration" : 4800
        }
      }, {
        "uid" : "634811b9fe97de2f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/634811b9fe97de2f",
        "status" : "passed",
        "time" : {
          "start" : 1709931409650,
          "stop" : 1709931414590,
          "duration" : 4940
        }
      }, {
        "uid" : "6dc6c1622e613177",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/6dc6c1622e613177",
        "status" : "passed",
        "time" : {
          "start" : 1709929368209,
          "stop" : 1709929373048,
          "duration" : 4839
        }
      }, {
        "uid" : "103ea7ed3c59c842",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/103ea7ed3c59c842",
        "status" : "passed",
        "time" : {
          "start" : 1709813900542,
          "stop" : 1709813904530,
          "duration" : 3988
        }
      }, {
        "uid" : "3f2296064faae8ec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/3f2296064faae8ec",
        "status" : "passed",
        "time" : {
          "start" : 1709750279862,
          "stop" : 1709750284022,
          "duration" : 4160
        }
      }, {
        "uid" : "5bd6e2ed40650366",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/5bd6e2ed40650366",
        "status" : "passed",
        "time" : {
          "start" : 1709748657917,
          "stop" : 1709748663208,
          "duration" : 5291
        }
      }, {
        "uid" : "3aa56772cbfb3a51",
        "reportUrl" : "https://Nat754.github.io/PulseWave/184//#testresult/3aa56772cbfb3a51",
        "status" : "passed",
        "time" : {
          "start" : 1709534777873,
          "stop" : 1709534781092,
          "duration" : 3219
        }
      }, {
        "uid" : "dbeee39220bca682",
        "reportUrl" : "https://Nat754.github.io/PulseWave/183//#testresult/dbeee39220bca682",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1709529408811,
          "stop" : 1709529409393,
          "duration" : 582
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "c2131e1ca2461313.json",
  "parameterValues" : [ ]
}