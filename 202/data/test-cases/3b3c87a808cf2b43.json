{
  "uid" : "3b3c87a808cf2b43",
  "name" : "Проверка недействительности кеша доски",
  "fullName" : "tests.test_api.test_api.TestAPI#test_api_invalidation_board",
  "historyId" : "67d1cbc0123b76dfbcd2881be0607554",
  "time" : {
    "start" : 1713788509451,
    "stop" : 1713788512146,
    "duration" : 2695
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f49652a23f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f4964499eb0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f4963e71910>\n\n    @pytest.mark.xfail\n    @allure.title(\"Проверка недействительности кеша доски\")\n    def test_api_invalidation_board(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        url = f'{self.constant.BASE_URL}api/workspace/'\n        with allure.step(\"GET Получить список всех Рабочих пространств авторизованного пользователя\"):\n            response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"})\n            workspaces_id = [item['id'] for item in response.json()]\n            workspace_id = random.choice(workspaces_id)\n        with allure.step(\"Создать доску\"):\n            url = f'{self.constant.BASE_URL}api/workspace/{workspace_id}/boards/'\n            response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                     json={\"name\": faker.job(), \"work_space\": f\"{workspace_id}\"})\n>           board_id = response.json()['id']\n\ntests/test_api/test_api.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713788485406,
      "stop" : 1713788485406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713788485388,
      "stop" : 1713788485405,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713788509450,
      "stop" : 1713788509450,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f49652a23f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f4964499eb0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f4963e71910>\n\n    @pytest.mark.xfail\n    @allure.title(\"Проверка недействительности кеша доски\")\n    def test_api_invalidation_board(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        url = f'{self.constant.BASE_URL}api/workspace/'\n        with allure.step(\"GET Получить список всех Рабочих пространств авторизованного пользователя\"):\n            response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"})\n            workspaces_id = [item['id'] for item in response.json()]\n            workspace_id = random.choice(workspaces_id)\n        with allure.step(\"Создать доску\"):\n            url = f'{self.constant.BASE_URL}api/workspace/{workspace_id}/boards/'\n            response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                     json={\"name\": faker.job(), \"work_space\": f\"{workspace_id}\"})\n>           board_id = response.json()['id']\n\ntests/test_api/test_api.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713788509451,
        "stop" : 1713788510617,
        "duration" : 1166
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "GET Получить список всех Рабочих пространств авторизованного пользователя",
      "time" : {
        "start" : 1713788510618,
        "stop" : 1713788511226,
        "duration" : 608
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Создать доску",
      "time" : {
        "start" : 1713788511226,
        "stop" : 1713788512119,
        "duration" : 893
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 90, in test_api_invalidation_board\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1113-401"
  }, {
    "name" : "thread",
    "value" : "2298-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 7,
        "skipped" : 3,
        "passed" : 49,
        "unknown" : 0,
        "total" : 60
      },
      "items" : [ {
        "uid" : "1b05dda4b3f55afd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/201//#testresult/1b05dda4b3f55afd",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713781796871,
          "stop" : 1713781799264,
          "duration" : 2393
        }
      }, {
        "uid" : "c68cfa2f8755d0a0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/200//#testresult/c68cfa2f8755d0a0",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713778717093,
          "stop" : 1713778720854,
          "duration" : 3761
        }
      }, {
        "uid" : "af4f937d53e12849",
        "reportUrl" : "https://Nat754.github.io/PulseWave/2//#testresult/af4f937d53e12849",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713752373118,
          "stop" : 1713752375934,
          "duration" : 2816
        }
      }, {
        "uid" : "7ebdc05df0fd3817",
        "reportUrl" : "https://Nat754.github.io/PulseWave/1//#testresult/7ebdc05df0fd3817",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713666006080,
          "stop" : 1713666010612,
          "duration" : 4532
        }
      }, {
        "uid" : "11596ca17b7ccdd8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/198//#testresult/11596ca17b7ccdd8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713592692321,
          "stop" : 1713592695728,
          "duration" : 3407
        }
      }, {
        "uid" : "f806543f17c36672",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/f806543f17c36672",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713435498688,
          "stop" : 1713435503222,
          "duration" : 4534
        }
      }, {
        "uid" : "62ba0b1ffaf4ee9d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/197//#testresult/62ba0b1ffaf4ee9d",
        "status" : "passed",
        "time" : {
          "start" : 1713198410995,
          "stop" : 1713198416404,
          "duration" : 5409
        }
      }, {
        "uid" : "54d009103a071b63",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/54d009103a071b63",
        "status" : "passed",
        "time" : {
          "start" : 1713100987136,
          "stop" : 1713100992284,
          "duration" : 5148
        }
      }, {
        "uid" : "de1841a2be40f61d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/de1841a2be40f61d",
        "status" : "passed",
        "time" : {
          "start" : 1711136506739,
          "stop" : 1711136511405,
          "duration" : 4666
        }
      }, {
        "uid" : "b25c4add2ebe5c39",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/b25c4add2ebe5c39",
        "status" : "passed",
        "time" : {
          "start" : 1710360773308,
          "stop" : 1710360777053,
          "duration" : 3745
        }
      }, {
        "uid" : "f1366bcde242b75",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/f1366bcde242b75",
        "status" : "passed",
        "time" : {
          "start" : 1710226226282,
          "stop" : 1710226231158,
          "duration" : 4876
        }
      }, {
        "uid" : "a75901db61487c1f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/a75901db61487c1f",
        "status" : "passed",
        "time" : {
          "start" : 1710181259117,
          "stop" : 1710181263300,
          "duration" : 4183
        }
      }, {
        "uid" : "508f33830423ec90",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/508f33830423ec90",
        "status" : "passed",
        "time" : {
          "start" : 1710080809226,
          "stop" : 1710080812694,
          "duration" : 3468
        }
      }, {
        "uid" : "f7e863cc50fe5e68",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/f7e863cc50fe5e68",
        "status" : "passed",
        "time" : {
          "start" : 1709990184741,
          "stop" : 1709990188249,
          "duration" : 3508
        }
      }, {
        "uid" : "f917aab9002a2056",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/f917aab9002a2056",
        "status" : "passed",
        "time" : {
          "start" : 1709988410654,
          "stop" : 1709988414286,
          "duration" : 3632
        }
      }, {
        "uid" : "ad4486365467e83c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/ad4486365467e83c",
        "status" : "passed",
        "time" : {
          "start" : 1709931358683,
          "stop" : 1709931362134,
          "duration" : 3451
        }
      }, {
        "uid" : "e0cbe06bbf8978a4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/e0cbe06bbf8978a4",
        "status" : "passed",
        "time" : {
          "start" : 1709929317008,
          "stop" : 1709929320468,
          "duration" : 3460
        }
      }, {
        "uid" : "ad8666a5e0213432",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/ad8666a5e0213432",
        "status" : "passed",
        "time" : {
          "start" : 1709813851828,
          "stop" : 1709813855674,
          "duration" : 3846
        }
      }, {
        "uid" : "bf3655b7e22a93e4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/bf3655b7e22a93e4",
        "status" : "passed",
        "time" : {
          "start" : 1709750229452,
          "stop" : 1709750233208,
          "duration" : 3756
        }
      }, {
        "uid" : "7b1764422f3ae8a8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/7b1764422f3ae8a8",
        "status" : "passed",
        "time" : {
          "start" : 1709748600773,
          "stop" : 1709748605457,
          "duration" : 4684
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "3b3c87a808cf2b43.json",
  "parameterValues" : [ ]
}