{
  "uid" : "a0ad767fcdceb884",
  "name" : "GET Получение комментария",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_task_id_comment",
  "historyId" : "0676f9cd255bfab810907c313091928a",
  "time" : {
    "start" : 1713788692997,
    "stop" : 1713788700334,
    "duration" : 7337
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f49652a23f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f496449fda0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f4963e74bc0>\n\n    @pytest.mark.xfail\n    @allure.title(\"GET Получение комментария\")\n    def test_get_task_id_comment(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       column_id, task_id = use_api_base.get_column_task_id()\n\ntests/test_api/test_api.py:481: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:177: in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\napi_testing/api_base.py:163: in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1713788485406,
      "stop" : 1713788485406,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1713788485388,
      "stop" : 1713788485405,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1713788692997,
      "stop" : 1713788692997,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f49652a23f0>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f496449fda0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f4963e74bc0>\n\n    @pytest.mark.xfail\n    @allure.title(\"GET Получение комментария\")\n    def test_get_task_id_comment(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n>       column_id, task_id = use_api_base.get_column_task_id()\n\ntests/test_api/test_api.py:481: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:177: in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\napi_testing/api_base.py:163: in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\napi_testing/api_base.py:157: in get_board_id\n    board_id = response.json()['id']\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1713788692998,
        "stop" : 1713788694114,
        "duration" : 1116
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Получить id задачи",
      "time" : {
        "start" : 1713788694116,
        "stop" : 1713788700334,
        "duration" : 6218
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 177, in get_column_task_id\n    board_id, column_id = self.get_board_column_id()\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 163, in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\n                             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1713788694116,
          "stop" : 1713788695272,
          "duration" : 1156
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false,
        "stepsCount" : 0
      }, {
        "name" : "Получить id колонки",
        "time" : {
          "start" : 1713788695273,
          "stop" : 1713788700334,
          "duration" : 5061
        },
        "status" : "broken",
        "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
        "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 163, in get_board_column_id\n    workspace_id, board_id = self.get_board_id()\n                             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1713788695273,
            "stop" : 1713788696645,
            "duration" : 1372
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false,
          "stepsCount" : 0
        }, {
          "name" : "Получить id доски",
          "time" : {
            "start" : 1713788696645,
            "stop" : 1713788700333,
            "duration" : 3688
          },
          "status" : "broken",
          "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
          "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 157, in get_board_id\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
          "steps" : [ {
            "name" : "Получить access токен пользователя на емайл",
            "time" : {
              "start" : 1713788696645,
              "stop" : 1713788697802,
              "duration" : 1157
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false,
            "stepsCount" : 0
          }, {
            "name" : "Получить id рабочего пространства",
            "time" : {
              "start" : 1713788697803,
              "stop" : 1713788699689,
              "duration" : 1886
            },
            "status" : "passed",
            "steps" : [ {
              "name" : "Получить access токен пользователя на емайл",
              "time" : {
                "start" : 1713788697803,
                "stop" : 1713788699055,
                "duration" : 1252
              },
              "status" : "passed",
              "steps" : [ ],
              "attachments" : [ ],
              "parameters" : [ ],
              "attachmentsCount" : 0,
              "shouldDisplayMessage" : false,
              "hasContent" : false,
              "stepsCount" : 0
            } ],
            "attachments" : [ ],
            "parameters" : [ ],
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : true,
            "stepsCount" : 1
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : true,
          "hasContent" : true,
          "stepsCount" : 3
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true,
        "stepsCount" : 5
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 7
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 9
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1113-401"
  }, {
    "name" : "thread",
    "value" : "2298-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 3,
        "passed" : 30,
        "unknown" : 0,
        "total" : 38
      },
      "items" : [ {
        "uid" : "ff628688ac0ce59a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/201//#testresult/ff628688ac0ce59a",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713781979408,
          "stop" : 1713781986851,
          "duration" : 7443
        }
      }, {
        "uid" : "e73a845c7e771a76",
        "reportUrl" : "https://Nat754.github.io/PulseWave/200//#testresult/e73a845c7e771a76",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713778913660,
          "stop" : 1713778921929,
          "duration" : 8269
        }
      }, {
        "uid" : "e502398cb2d55cf1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/2//#testresult/e502398cb2d55cf1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713752555650,
          "stop" : 1713752562789,
          "duration" : 7139
        }
      }, {
        "uid" : "a28629990a205d0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/1//#testresult/a28629990a205d0a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713666233288,
          "stop" : 1713666243026,
          "duration" : 9738
        }
      }, {
        "uid" : "2b7070d84cab6ad9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/198//#testresult/2b7070d84cab6ad9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713592916475,
          "stop" : 1713592926085,
          "duration" : 9610
        }
      }, {
        "uid" : "56dbf31527a452a1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/56dbf31527a452a1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1713435781910,
          "stop" : 1713435793626,
          "duration" : 11716
        }
      }, {
        "uid" : "2bf354c767fb6271",
        "reportUrl" : "https://Nat754.github.io/PulseWave/197//#testresult/2bf354c767fb6271",
        "status" : "passed",
        "time" : {
          "start" : 1713198697007,
          "stop" : 1713198710884,
          "duration" : 13877
        }
      }, {
        "uid" : "8a969b24a36e54d8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/8a969b24a36e54d8",
        "status" : "passed",
        "time" : {
          "start" : 1713101290564,
          "stop" : 1713101304890,
          "duration" : 14326
        }
      }, {
        "uid" : "9e4c84a54ab7f806",
        "reportUrl" : "https://Nat754.github.io/PulseWave/196//#testresult/9e4c84a54ab7f806",
        "status" : "passed",
        "time" : {
          "start" : 1711136699929,
          "stop" : 1711136708580,
          "duration" : 8651
        }
      }, {
        "uid" : "e7eebd8b661bdac4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/195//#testresult/e7eebd8b661bdac4",
        "status" : "passed",
        "time" : {
          "start" : 1710361013584,
          "stop" : 1710361024264,
          "duration" : 10680
        }
      }, {
        "uid" : "7f4ce70f25be57f1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/194//#testresult/7f4ce70f25be57f1",
        "status" : "passed",
        "time" : {
          "start" : 1710226433778,
          "stop" : 1710226443109,
          "duration" : 9331
        }
      }, {
        "uid" : "84a99ae4b7a67c74",
        "reportUrl" : "https://Nat754.github.io/PulseWave/193//#testresult/84a99ae4b7a67c74",
        "status" : "passed",
        "time" : {
          "start" : 1710181424942,
          "stop" : 1710181432207,
          "duration" : 7265
        }
      }, {
        "uid" : "1364a6474d441cd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/192//#testresult/1364a6474d441cd",
        "status" : "passed",
        "time" : {
          "start" : 1710080973836,
          "stop" : 1710080981013,
          "duration" : 7177
        }
      }, {
        "uid" : "deb92bf806c12d49",
        "reportUrl" : "https://Nat754.github.io/PulseWave/191//#testresult/deb92bf806c12d49",
        "status" : "passed",
        "time" : {
          "start" : 1709990375410,
          "stop" : 1709990384039,
          "duration" : 8629
        }
      }, {
        "uid" : "556cc7a6422d3bd5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/190//#testresult/556cc7a6422d3bd5",
        "status" : "passed",
        "time" : {
          "start" : 1709988599752,
          "stop" : 1709988608412,
          "duration" : 8660
        }
      }, {
        "uid" : "f03b0959776b6743",
        "reportUrl" : "https://Nat754.github.io/PulseWave/189//#testresult/f03b0959776b6743",
        "status" : "passed",
        "time" : {
          "start" : 1709931552234,
          "stop" : 1709931560975,
          "duration" : 8741
        }
      }, {
        "uid" : "ccaf38651911bd28",
        "reportUrl" : "https://Nat754.github.io/PulseWave/188//#testresult/ccaf38651911bd28",
        "status" : "passed",
        "time" : {
          "start" : 1709929509555,
          "stop" : 1709929518263,
          "duration" : 8708
        }
      }, {
        "uid" : "7d6936bebfa1b381",
        "reportUrl" : "https://Nat754.github.io/PulseWave/187//#testresult/7d6936bebfa1b381",
        "status" : "passed",
        "time" : {
          "start" : 1709814015838,
          "stop" : 1709814023098,
          "duration" : 7260
        }
      }, {
        "uid" : "a12576e6cecbc933",
        "reportUrl" : "https://Nat754.github.io/PulseWave/186//#testresult/a12576e6cecbc933",
        "status" : "passed",
        "time" : {
          "start" : 1709750396360,
          "stop" : 1709750403496,
          "duration" : 7136
        }
      }, {
        "uid" : "ac6348cc35da453",
        "reportUrl" : "https://Nat754.github.io/PulseWave/185//#testresult/ac6348cc35da453",
        "status" : "passed",
        "time" : {
          "start" : 1709748808153,
          "stop" : 1709748817427,
          "duration" : 9274
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "a0ad767fcdceb884.json",
  "parameterValues" : [ ]
}