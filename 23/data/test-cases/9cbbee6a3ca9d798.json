{
  "uid" : "9cbbee6a3ca9d798",
  "name" : "Проверка недействительности кеша доски",
  "fullName" : "tests.test_api.test_api.TestAPI#test_api_invalidation_board",
  "historyId" : "67d1cbc0123b76dfbcd2881be0607554",
  "time" : {
    "start" : 1715567045622,
    "stop" : 1715567049383,
    "duration" : 3761
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
  "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb38b837110>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fb38aaa2b10>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7fb38a3b5bb0>\n\n    @pytest.mark.xfail\n    @allure.title(\"Проверка недействительности кеша доски\")\n    def test_api_invalidation_board(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        url = f'{self.constant.BASE_URL}api/workspace/'\n        with allure.step(\"GET Получить список всех Рабочих пространств авторизованного пользователя\"):\n            response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"})\n            workspaces_id = [item['id'] for item in response.json()]\n            workspace_id = random.choice(workspaces_id)\n        with allure.step(\"Создать доску\"):\n            url = f'{self.constant.BASE_URL}api/workspace/{workspace_id}/boards/'\n            response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                     json={\"name\": faker.job(), \"work_space\": f\"{workspace_id}\"})\n>           board_id = response.json()['id']\n\ntests/test_api/test_api.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1715567045621,
      "stop" : 1715567045622,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1715567017743,
      "stop" : 1715567017759,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1715567017760,
      "stop" : 1715567017760,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
    "statusTrace" : "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb38b837110>\ns = '\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Server Error (500)</title>\\n</head>\\n<body>\\n  <h1>Server Error (500)</h1><p></p>\\n</body>\\n</html>\\n'\nidx = 1\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fb38aaa2b10>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7fb38a3b5bb0>\n\n    @pytest.mark.xfail\n    @allure.title(\"Проверка недействительности кеша доски\")\n    def test_api_invalidation_board(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        url = f'{self.constant.BASE_URL}api/workspace/'\n        with allure.step(\"GET Получить список всех Рабочих пространств авторизованного пользователя\"):\n            response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"{jwt}\"})\n            workspaces_id = [item['id'] for item in response.json()]\n            workspace_id = random.choice(workspaces_id)\n        with allure.step(\"Создать доску\"):\n            url = f'{self.constant.BASE_URL}api/workspace/{workspace_id}/boards/'\n            response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                     json={\"name\": faker.job(), \"work_space\": f\"{workspace_id}\"})\n>           board_id = response.json()['id']\n\ntests/test_api/test_api.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\n/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1715567045622,
        "stop" : 1715567048055,
        "duration" : 2433
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "GET Получить список всех Рабочих пространств авторизованного пользователя",
      "time" : {
        "start" : 1715567048056,
        "stop" : 1715567048684,
        "duration" : 628
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Создать доску",
      "time" : {
        "start" : 1715567048684,
        "stop" : 1715567049374,
        "duration" : 690
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 90, in test_api_invalidation_board\n    board_id = response.json()['id']\n               ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.3/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 3,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az840-631"
  }, {
    "name" : "thread",
    "value" : "2307-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 28,
        "passed" : 0,
        "unknown" : 0,
        "total" : 28
      },
      "items" : [ {
        "uid" : "ef4241a9c51e3568",
        "reportUrl" : "https://Nat754.github.io/PulseWave/22//#testresult/ef4241a9c51e3568",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715480598016,
          "stop" : 1715480602115,
          "duration" : 4099
        }
      }, {
        "uid" : "993c77d581d058ff",
        "reportUrl" : "https://Nat754.github.io/PulseWave/21//#testresult/993c77d581d058ff",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715393919645,
          "stop" : 1715393922138,
          "duration" : 2493
        }
      }, {
        "uid" : "ce24e017e2ee51a7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/20//#testresult/ce24e017e2ee51a7",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715307919521,
          "stop" : 1715307923745,
          "duration" : 4224
        }
      }, {
        "uid" : "87e0ec39cfbf4d21",
        "reportUrl" : "https://Nat754.github.io/PulseWave/19//#testresult/87e0ec39cfbf4d21",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715221403340,
          "stop" : 1715221406960,
          "duration" : 3620
        }
      }, {
        "uid" : "d097258383942930",
        "reportUrl" : "https://Nat754.github.io/PulseWave/18//#testresult/d097258383942930",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715134098684,
          "stop" : 1715134101537,
          "duration" : 2853
        }
      }, {
        "uid" : "36f5182ab10c2f8f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/17//#testresult/36f5182ab10c2f8f",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1715048748248,
          "stop" : 1715048751740,
          "duration" : 3492
        }
      }, {
        "uid" : "5fab4c18c3a967d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/16//#testresult/5fab4c18c3a967d",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714962150725,
          "stop" : 1714962154202,
          "duration" : 3477
        }
      }, {
        "uid" : "c2c970da120b310b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/15//#testresult/c2c970da120b310b",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714875702256,
          "stop" : 1714875705797,
          "duration" : 3541
        }
      }, {
        "uid" : "6e4f3c6514093008",
        "reportUrl" : "https://Nat754.github.io/PulseWave/14//#testresult/6e4f3c6514093008",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714827284154,
          "stop" : 1714827287231,
          "duration" : 3077
        }
      }, {
        "uid" : "b00431e34a592b3d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/14//#testresult/b00431e34a592b3d",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nKeyError: 'access'",
        "time" : {
          "start" : 1714789002810,
          "stop" : 1714789004444,
          "duration" : 1634
        }
      }, {
        "uid" : "ed954fc715758ec1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/13//#testresult/ed954fc715758ec1",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nKeyError: 'access'",
        "time" : {
          "start" : 1714702868679,
          "stop" : 1714702870049,
          "duration" : 1370
        }
      }, {
        "uid" : "35ee001e34acbce6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/12//#testresult/35ee001e34acbce6",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nKeyError: 'access'",
        "time" : {
          "start" : 1714616319207,
          "stop" : 1714616320522,
          "duration" : 1315
        }
      }, {
        "uid" : "fedd476ba4ac7bbd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/11//#testresult/fedd476ba4ac7bbd",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nKeyError: 'access'",
        "time" : {
          "start" : 1714530255594,
          "stop" : 1714530256787,
          "duration" : 1193
        }
      }, {
        "uid" : "4e22979e4c93a999",
        "reportUrl" : "https://Nat754.github.io/PulseWave/10//#testresult/4e22979e4c93a999",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='owa.pulsewave.ru', port=443): Max retries exceeded with url: /auth/jwt/create/ (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f17c7d7ae40>: Failed to establish a new connection: [Errno 111] Connection refused'))",
        "time" : {
          "start" : 1714443489823,
          "stop" : 1714443490356,
          "duration" : 533
        }
      }, {
        "uid" : "310cc2a64c665b36",
        "reportUrl" : "https://Nat754.github.io/PulseWave/9//#testresult/310cc2a64c665b36",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.ConnectionError: HTTPSConnectionPool(host='owa.pulsewave.ru', port=443): Max retries exceeded with url: /auth/jwt/create/ (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f7971dbcf50>: Failed to establish a new connection: [Errno 111] Connection refused'))",
        "time" : {
          "start" : 1714357164844,
          "stop" : 1714357165358,
          "duration" : 514
        }
      }, {
        "uid" : "da0952d04dd773c9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/8//#testresult/da0952d04dd773c9",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.SSLError: HTTPSConnectionPool(host='owa.pulsewave.ru', port=443): Max retries exceeded with url: /auth/jwt/create/ (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate (_ssl.c:1000)')))",
        "time" : {
          "start" : 1714270949739,
          "stop" : 1714270950992,
          "duration" : 1253
        }
      }, {
        "uid" : "8d2343486b113cb4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/7//#testresult/8d2343486b113cb4",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714184276142,
          "stop" : 1714184279389,
          "duration" : 3247
        }
      }, {
        "uid" : "c9151ac1370bc812",
        "reportUrl" : "https://Nat754.github.io/PulseWave/6//#testresult/c9151ac1370bc812",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714147850100,
          "stop" : 1714147853855,
          "duration" : 3755
        }
      }, {
        "uid" : "43e759114d851ebb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/6//#testresult/43e759114d851ebb",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714097908321,
          "stop" : 1714097911315,
          "duration" : 2994
        }
      }, {
        "uid" : "77629a56d3e99dcf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/5//#testresult/77629a56d3e99dcf",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)",
        "time" : {
          "start" : 1714013833627,
          "stop" : 1714013836394,
          "duration" : 2767
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "9cbbee6a3ca9d798.json",
  "parameterValues" : [ ]
}