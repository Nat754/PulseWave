{
  "uid" : "309bb4dc011be283",
  "name" : "POST Создать доску без указания РП",
  "fullName" : "tests.api_tests.api_test.TestAPI#test_post_api_board_create",
  "historyId" : "286dc6599169ed0669baa254855d689a",
  "time" : {
    "start" : 1752343921824,
    "stop" : 1752343924301,
    "duration" : 2477
  },
  "description" : "Создание доски без указания РП, будет создано дефолтное РП для этой доски",
  "descriptionHtml" : "<p>Создание доски без указания РП, будет создано дефолтное РП для этой доски</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Unexpected status code. Expected: 201. Actual: 400",
  "statusTrace" : "self = <tests.api_tests.api_test.TestAPI object at 0x7feac2b0d7f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7feac2b3e9c0>\n\n    @allure.title(\"POST Создать доску без указания РП\")\n    def test_post_api_board_create(self, use_api_base):\n        \"\"\"Создание доски без указания РП, будет создано дефолтное РП для этой доски\"\"\"\n        jwt = use_api_base.create_tokens(email1, password0)[0]\n        url = f'{self.link.BASE_URL}api/board_create/'\n        response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                 json=self.constant.BOARD_CREATE)\n>       Assertions.assert_status_code(response, self.code.STATUS_201)\n\ntests/api_tests/api_test.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_status_code = 201\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int):\n        actual_status_code = response.status_code\n        with allure.step(f\"Expected status {expected_status_code}\"):\n>           assert actual_status_code == expected_status_code, \\\n                f\"Unexpected status code. Expected: {expected_status_code}. Actual: {actual_status_code}\"\nE           AssertionError: Unexpected status code. Expected: 201. Actual: 400\n\napi_testing/assertions.py:11: AssertionError",
  "flaky" : false,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1752343878889,
      "stop" : 1752343878904,
      "duration" : 15
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1752343878904,
      "stop" : 1752343878904,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1752343921824,
      "stop" : 1752343921824,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "Создание доски без указания РП, будет создано дефолтное РП для этой доски",
    "status" : "failed",
    "statusMessage" : "AssertionError: Unexpected status code. Expected: 201. Actual: 400",
    "statusTrace" : "self = <tests.api_tests.api_test.TestAPI object at 0x7feac2b0d7f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7feac2b3e9c0>\n\n    @allure.title(\"POST Создать доску без указания РП\")\n    def test_post_api_board_create(self, use_api_base):\n        \"\"\"Создание доски без указания РП, будет создано дефолтное РП для этой доски\"\"\"\n        jwt = use_api_base.create_tokens(email1, password0)[0]\n        url = f'{self.link.BASE_URL}api/board_create/'\n        response = requests.post(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                 json=self.constant.BOARD_CREATE)\n>       Assertions.assert_status_code(response, self.code.STATUS_201)\n\ntests/api_tests/api_test.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>, expected_status_code = 201\n\n    @staticmethod\n    def assert_status_code(response: Response, expected_status_code: int):\n        actual_status_code = response.status_code\n        with allure.step(f\"Expected status {expected_status_code}\"):\n>           assert actual_status_code == expected_status_code, \\\n                f\"Unexpected status code. Expected: {expected_status_code}. Actual: {actual_status_code}\"\nE           AssertionError: Unexpected status code. Expected: 201. Actual: 400\n\napi_testing/assertions.py:11: AssertionError",
    "steps" : [ {
      "name" : "Получить access токен пользователя",
      "time" : {
        "start" : 1752343921824,
        "stop" : 1752343922595,
        "duration" : 771
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false,
      "stepsCount" : 0
    }, {
      "name" : "Expected status 201",
      "time" : {
        "start" : 1752343924300,
        "stop" : 1752343924300,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Unexpected status code. Expected: 201. Actual: 400\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/assertions.py\", line 11, in assert_status_code\n    assert actual_status_code == expected_status_code, \\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 2
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.api_tests"
  }, {
    "name" : "suite",
    "value" : "api_test"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "pkrvmq0rgcvqdmg"
  }, {
    "name" : "thread",
    "value" : "2549-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.api_tests.api_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 1,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 15,
        "unknown" : 0,
        "total" : 16
      },
      "items" : [ {
        "uid" : "bfab12970c242a74",
        "reportUrl" : "https://Nat754.github.io/PulseWave/447//#testresult/bfab12970c242a74",
        "status" : "passed",
        "time" : {
          "start" : 1752333664821,
          "stop" : 1752333666641,
          "duration" : 1820
        }
      }, {
        "uid" : "3f44ace4d6ab802c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/447//#testresult/3f44ace4d6ab802c",
        "status" : "passed",
        "time" : {
          "start" : 1752257589664,
          "stop" : 1752257591057,
          "duration" : 1393
        }
      }, {
        "uid" : "239514bf28a19013",
        "reportUrl" : "https://Nat754.github.io/PulseWave/446//#testresult/239514bf28a19013",
        "status" : "passed",
        "time" : {
          "start" : 1752171200736,
          "stop" : 1752171202282,
          "duration" : 1546
        }
      }, {
        "uid" : "7d0bd521c7b6b78b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/445//#testresult/7d0bd521c7b6b78b",
        "status" : "passed",
        "time" : {
          "start" : 1752084806739,
          "stop" : 1752084808485,
          "duration" : 1746
        }
      }, {
        "uid" : "64c1cccdff1ed4d0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/444//#testresult/64c1cccdff1ed4d0",
        "status" : "passed",
        "time" : {
          "start" : 1751998403644,
          "stop" : 1751998405425,
          "duration" : 1781
        }
      }, {
        "uid" : "75625e21d5260d50",
        "reportUrl" : "https://Nat754.github.io/PulseWave/443//#testresult/75625e21d5260d50",
        "status" : "passed",
        "time" : {
          "start" : 1751911996836,
          "stop" : 1751911998088,
          "duration" : 1252
        }
      }, {
        "uid" : "cd8adad84d438941",
        "reportUrl" : "https://Nat754.github.io/PulseWave/442//#testresult/cd8adad84d438941",
        "status" : "passed",
        "time" : {
          "start" : 1751825483586,
          "stop" : 1751825485035,
          "duration" : 1449
        }
      }, {
        "uid" : "7151d49805f61a81",
        "reportUrl" : "https://Nat754.github.io/PulseWave/441//#testresult/7151d49805f61a81",
        "status" : "passed",
        "time" : {
          "start" : 1751739065274,
          "stop" : 1751739067093,
          "duration" : 1819
        }
      }, {
        "uid" : "acdedc8052b580a7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/440//#testresult/acdedc8052b580a7",
        "status" : "passed",
        "time" : {
          "start" : 1751652751786,
          "stop" : 1751652754214,
          "duration" : 2428
        }
      }, {
        "uid" : "c5f580aaacf9ef0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/439//#testresult/c5f580aaacf9ef0c",
        "status" : "passed",
        "time" : {
          "start" : 1751566367370,
          "stop" : 1751566368855,
          "duration" : 1485
        }
      }, {
        "uid" : "7044995a253f9b32",
        "reportUrl" : "https://Nat754.github.io/PulseWave/438//#testresult/7044995a253f9b32",
        "status" : "passed",
        "time" : {
          "start" : 1751490917995,
          "stop" : 1751490919301,
          "duration" : 1306
        }
      }, {
        "uid" : "d1d943e584f67b5a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/438//#testresult/d1d943e584f67b5a",
        "status" : "passed",
        "time" : {
          "start" : 1751480015239,
          "stop" : 1751480017040,
          "duration" : 1801
        }
      }, {
        "uid" : "8db123b2f655e543",
        "reportUrl" : "https://Nat754.github.io/PulseWave/437//#testresult/8db123b2f655e543",
        "status" : "passed",
        "time" : {
          "start" : 1751393602764,
          "stop" : 1751393604802,
          "duration" : 2038
        }
      }, {
        "uid" : "8c2d453fce9e05ca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/436//#testresult/8c2d453fce9e05ca",
        "status" : "passed",
        "time" : {
          "start" : 1751307182243,
          "stop" : 1751307183940,
          "duration" : 1697
        }
      }, {
        "uid" : "b94d7cc5554c111c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/236//#testresult/b94d7cc5554c111c",
        "status" : "passed",
        "time" : {
          "start" : 1751289852929,
          "stop" : 1751289854476,
          "duration" : 1547
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "309bb4dc011be283.json",
  "parameterValues" : [ ]
}