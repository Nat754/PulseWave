{
  "uid" : "c351eeee2bff219d",
  "name" : "PUT Обновить колонку (название и порядковый номер)",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_board_id_column_id",
  "historyId" : "c2588ccebb2728c0b5bd02b9a4b15bde",
  "time" : {
    "start" : 1717900295533,
    "stop" : 1717900307342,
    "duration" : 11809
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Expected status 200,                     actual status 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7faca3647740>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7faca3647740> = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>.code",
  "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7faca306cf20>\n\n    @allure.title(\"PUT Обновить колонку (название и порядковый номер)\")\n    def test_put_api_board_id_column_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        board_id, column_id = use_api_base.get_board_column_id()\n        url = f'{ApiConstant.BASE_URL}api/boards/{board_id}/column/'\n        response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"})\n        columns_id = [i['id'] for i in response.json()]\n        column_id_index = columns_id.index(column_id)\n        column_id_new_index = random.randint(0, len(columns_id) - 1)\n        print('board', board_id, 'all', columns_id, 'choice', column_id, column_id_index)\n        url = f'{self.constant.BASE_URL}api/boards/{board_id}/column/{column_id}/'\n        response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"})\n        column_name = response.json()['name']\n        response = requests.put(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                json={'name': faker.job(), 'index': column_id_new_index})\n        print('board', board_id, 'all', columns_id, 'choice', column_id, column_id_new_index)\n        column_name_new = response.json()['name']\n        with allure.step(f\"Expected status {self.code.STATUS_200}\"):\n>           assert response.status_code == self.code.STATUS_200, f\"Expected status {self.code.STATUS_200}, \\\n                    actual status {response.status_code}\"\nE           AssertionError: Expected status 200,                     actual status 400\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7faca3647740>.STATUS_200\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7faca3647740> = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>.code\n\ntests/test_api/test_api.py:293: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1717900146504,
      "stop" : 1717900146521,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1717900295533,
      "stop" : 1717900295533,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1717900146521,
      "stop" : 1717900146521,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Expected status 200,                     actual status 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7faca3647740>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7faca3647740> = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>.code",
    "statusTrace" : "self = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7faca306cf20>\n\n    @allure.title(\"PUT Обновить колонку (название и порядковый номер)\")\n    def test_put_api_board_id_column_id(self, use_api_base):\n        jwt = use_api_base.create_jwt(email1, password0)\n        board_id, column_id = use_api_base.get_board_column_id()\n        url = f'{ApiConstant.BASE_URL}api/boards/{board_id}/column/'\n        response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"})\n        columns_id = [i['id'] for i in response.json()]\n        column_id_index = columns_id.index(column_id)\n        column_id_new_index = random.randint(0, len(columns_id) - 1)\n        print('board', board_id, 'all', columns_id, 'choice', column_id, column_id_index)\n        url = f'{self.constant.BASE_URL}api/boards/{board_id}/column/{column_id}/'\n        response = requests.get(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"})\n        column_name = response.json()['name']\n        response = requests.put(url, headers={'accept': 'application/json', 'Authorization': f\"\"\"{jwt}\"\"\"},\n                                json={'name': faker.job(), 'index': column_id_new_index})\n        print('board', board_id, 'all', columns_id, 'choice', column_id, column_id_new_index)\n        column_name_new = response.json()['name']\n        with allure.step(f\"Expected status {self.code.STATUS_200}\"):\n>           assert response.status_code == self.code.STATUS_200, f\"Expected status {self.code.STATUS_200}, \\\n                    actual status {response.status_code}\"\nE           AssertionError: Expected status 200,                     actual status 400\nE           assert 400 == 200\nE            +  where 400 = <Response [400]>.status_code\nE            +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7faca3647740>.STATUS_200\nE            +    where <tests.test_api.api_constant.StatusCode object at 0x7faca3647740> = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>.code\n\ntests/test_api/test_api.py:293: AssertionError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1717900295533,
        "stop" : 1717900296981,
        "duration" : 1448
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить id колонки",
      "time" : {
        "start" : 1717900296982,
        "stop" : 1717900304853,
        "duration" : 7871
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Получить access токен пользователя на емайл",
        "time" : {
          "start" : 1717900296982,
          "stop" : 1717900298496,
          "duration" : 1514
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Получить id доски",
        "time" : {
          "start" : 1717900298497,
          "stop" : 1717900303189,
          "duration" : 4692
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "Получить access токен пользователя на емайл",
          "time" : {
            "start" : 1717900298497,
            "stop" : 1717900299934,
            "duration" : 1437
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : false
        }, {
          "name" : "Получить id рабочего пространства",
          "time" : {
            "start" : 1717900299935,
            "stop" : 1717900302341,
            "duration" : 2406
          },
          "status" : "passed",
          "steps" : [ {
            "name" : "Получить access токен пользователя на емайл",
            "time" : {
              "start" : 1717900299935,
              "stop" : 1717900301491,
              "duration" : 1556
            },
            "status" : "passed",
            "steps" : [ ],
            "attachments" : [ ],
            "parameters" : [ ],
            "stepsCount" : 0,
            "attachmentsCount" : 0,
            "shouldDisplayMessage" : false,
            "hasContent" : false
          } ],
          "attachments" : [ ],
          "parameters" : [ ],
          "stepsCount" : 1,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 3,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 5,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Expected status 200",
      "time" : {
        "start" : 1717900307341,
        "stop" : 1717900307341,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Expected status 200,                     actual status 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7faca3647740>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7faca3647740> = <tests.test_api.test_api.TestAPI object at 0x7faca36a2990>.code\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 293, in test_put_api_board_id_column_id\n    assert response.status_code == self.code.STATUS_200, f\"Expected status {self.code.STATUS_200}, \\\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 8,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1022-774"
  }, {
    "name" : "thread",
    "value" : "2254-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 1,
        "skipped" : 28,
        "passed" : 26,
        "unknown" : 0,
        "total" : 57
      },
      "items" : [ {
        "uid" : "8e5e5ffc9982c165",
        "reportUrl" : "https://Nat754.github.io/PulseWave/49//#testresult/8e5e5ffc9982c165",
        "status" : "passed",
        "time" : {
          "start" : 1717813588078,
          "stop" : 1717813597393,
          "duration" : 9315
        }
      }, {
        "uid" : "3b81e6d86d74920d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/48//#testresult/3b81e6d86d74920d",
        "status" : "passed",
        "time" : {
          "start" : 1717727336314,
          "stop" : 1717727347200,
          "duration" : 10886
        }
      }, {
        "uid" : "873cc21a77d50c3f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/47//#testresult/873cc21a77d50c3f",
        "status" : "passed",
        "time" : {
          "start" : 1717640807314,
          "stop" : 1717640818262,
          "duration" : 10948
        }
      }, {
        "uid" : "877ff06a13700671",
        "reportUrl" : "https://Nat754.github.io/PulseWave/46//#testresult/877ff06a13700671",
        "status" : "passed",
        "time" : {
          "start" : 1717554400877,
          "stop" : 1717554409547,
          "duration" : 8670
        }
      }, {
        "uid" : "e7a9b56664ee0ae2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/45//#testresult/e7a9b56664ee0ae2",
        "status" : "passed",
        "time" : {
          "start" : 1717468005291,
          "stop" : 1717468014124,
          "duration" : 8833
        }
      }, {
        "uid" : "4bce1dc8d1981d97",
        "reportUrl" : "https://Nat754.github.io/PulseWave/44//#testresult/4bce1dc8d1981d97",
        "status" : "passed",
        "time" : {
          "start" : 1717381687760,
          "stop" : 1717381699622,
          "duration" : 11862
        }
      }, {
        "uid" : "85b93ecc314e21e6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/43//#testresult/85b93ecc314e21e6",
        "status" : "passed",
        "time" : {
          "start" : 1717295418682,
          "stop" : 1717295427772,
          "duration" : 9090
        }
      }, {
        "uid" : "58e51c1b7aaa0d3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/42//#testresult/58e51c1b7aaa0d3",
        "status" : "passed",
        "time" : {
          "start" : 1717208990341,
          "stop" : 1717209002045,
          "duration" : 11704
        }
      }, {
        "uid" : "a9bbf5800b5e468d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/41//#testresult/a9bbf5800b5e468d",
        "status" : "failed",
        "statusDetails" : "AssertionError: Expected status 200,                     actual status 400\nassert 400 == 200\n +  where 400 = <Response [400]>.status_code\n +  and   200 = <tests.test_api.api_constant.StatusCode object at 0x7f09523736b0>.STATUS_200\n +    where <tests.test_api.api_constant.StatusCode object at 0x7f09523736b0> = <tests.test_api.test_api.TestAPI object at 0x7f09523acdd0>.code",
        "time" : {
          "start" : 1717122401937,
          "stop" : 1717122413117,
          "duration" : 11180
        }
      }, {
        "uid" : "3a9b8f741669c50e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/40//#testresult/3a9b8f741669c50e",
        "status" : "passed",
        "time" : {
          "start" : 1717035989974,
          "stop" : 1717035998911,
          "duration" : 8937
        }
      }, {
        "uid" : "342e81ed07b6f7f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/39//#testresult/342e81ed07b6f7f",
        "status" : "passed",
        "time" : {
          "start" : 1716949652774,
          "stop" : 1716949661451,
          "duration" : 8677
        }
      }, {
        "uid" : "56789c95474ceb9d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/38//#testresult/56789c95474ceb9d",
        "status" : "passed",
        "time" : {
          "start" : 1716863166296,
          "stop" : 1716863175535,
          "duration" : 9239
        }
      }, {
        "uid" : "b8bd357dd06ad152",
        "reportUrl" : "https://Nat754.github.io/PulseWave/37//#testresult/b8bd357dd06ad152",
        "status" : "passed",
        "time" : {
          "start" : 1716776782265,
          "stop" : 1716776791698,
          "duration" : 9433
        }
      }, {
        "uid" : "1fb50ccc081c328e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/36//#testresult/1fb50ccc081c328e",
        "status" : "passed",
        "time" : {
          "start" : 1716690450552,
          "stop" : 1716690460861,
          "duration" : 10309
        }
      }, {
        "uid" : "748227deefa5ae36",
        "reportUrl" : "https://Nat754.github.io/PulseWave/34//#testresult/748227deefa5ae36",
        "status" : "passed",
        "time" : {
          "start" : 1716638619465,
          "stop" : 1716638628284,
          "duration" : 8819
        }
      }, {
        "uid" : "b41c60fdc961913d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/35//#testresult/b41c60fdc961913d",
        "status" : "passed",
        "time" : {
          "start" : 1716603757895,
          "stop" : 1716603767296,
          "duration" : 9401
        }
      }, {
        "uid" : "d0a04f2618437dbd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/34//#testresult/d0a04f2618437dbd",
        "status" : "broken",
        "statusDetails" : "KeyError: 'access'",
        "time" : {
          "start" : 1716517403112,
          "stop" : 1716517404258,
          "duration" : 1146
        }
      }, {
        "uid" : "1e51fa61d5a9cf39",
        "reportUrl" : "https://Nat754.github.io/PulseWave/33//#testresult/1e51fa61d5a9cf39",
        "status" : "passed",
        "time" : {
          "start" : 1716431078894,
          "stop" : 1716431091012,
          "duration" : 12118
        }
      }, {
        "uid" : "12c7119a7ee8fc49",
        "reportUrl" : "https://Nat754.github.io/PulseWave/32//#testresult/12c7119a7ee8fc49",
        "status" : "passed",
        "time" : {
          "start" : 1716344687729,
          "stop" : 1716344699616,
          "duration" : 11887
        }
      }, {
        "uid" : "ee092d345724db8c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/31//#testresult/ee092d345724db8c",
        "status" : "passed",
        "time" : {
          "start" : 1716258212746,
          "stop" : 1716258221593,
          "duration" : 8847
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c351eeee2bff219d.json",
  "parameterValues" : [ ]
}