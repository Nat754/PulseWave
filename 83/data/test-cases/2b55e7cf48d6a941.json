{
  "uid" : "2b55e7cf48d6a941",
  "name" : "GET Получение одной задачи",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_task_id",
  "historyId" : "151f5082517d31b0e5b273b6a9d9ff31",
  "time" : {
    "start" : 1720751276545,
    "stop" : 1720751277127,
    "duration" : 582
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca3f20>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf639280>\n\n    @allure.title(\"GET Получение одной задачи\")\n    def test_get_task_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720751239489,
      "stop" : 1720751239506,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720751276545,
      "stop" : 1720751276545,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720751239506,
      "stop" : 1720751239506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca3f20>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf639280>\n\n    @allure.title(\"GET Получение одной задачи\")\n    def test_get_task_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720751276545,
        "stop" : 1720751277127,
        "duration" : 582
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1424-7"
  }, {
    "name" : "thread",
    "value" : "2286-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 90
      },
      "items" : [ {
        "uid" : "49dcb30b8eb2bec4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/49dcb30b8eb2bec4",
        "status" : "passed",
        "time" : {
          "start" : 1720665148798,
          "stop" : 1720665158425,
          "duration" : 9627
        }
      }, {
        "uid" : "61efd1db346afb29",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/61efd1db346afb29",
        "status" : "passed",
        "time" : {
          "start" : 1720578618229,
          "stop" : 1720578628459,
          "duration" : 10230
        }
      }, {
        "uid" : "1e84138af8449d37",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/1e84138af8449d37",
        "status" : "passed",
        "time" : {
          "start" : 1720492240440,
          "stop" : 1720492250057,
          "duration" : 9617
        }
      }, {
        "uid" : "c5c0754b14047a66",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/c5c0754b14047a66",
        "status" : "passed",
        "time" : {
          "start" : 1720405901769,
          "stop" : 1720405914128,
          "duration" : 12359
        }
      }, {
        "uid" : "6ec0f05dbbd64542",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/6ec0f05dbbd64542",
        "status" : "passed",
        "time" : {
          "start" : 1720319593153,
          "stop" : 1720319602670,
          "duration" : 9517
        }
      }, {
        "uid" : "6051b48a1dbdb6ba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/6051b48a1dbdb6ba",
        "status" : "passed",
        "time" : {
          "start" : 1720232781995,
          "stop" : 1720232791226,
          "duration" : 9231
        }
      }, {
        "uid" : "6b2e3c0e731110d8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/6b2e3c0e731110d8",
        "status" : "passed",
        "time" : {
          "start" : 1720146516054,
          "stop" : 1720146525491,
          "duration" : 9437
        }
      }, {
        "uid" : "bb8963ee6c1e9593",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/bb8963ee6c1e9593",
        "status" : "passed",
        "time" : {
          "start" : 1720060193001,
          "stop" : 1720060202494,
          "duration" : 9493
        }
      }, {
        "uid" : "d04831e5a0c0818e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/d04831e5a0c0818e",
        "status" : "passed",
        "time" : {
          "start" : 1719973700613,
          "stop" : 1719973710011,
          "duration" : 9398
        }
      }, {
        "uid" : "e9703553260fcf5e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/e9703553260fcf5e",
        "status" : "passed",
        "time" : {
          "start" : 1719887364798,
          "stop" : 1719887374480,
          "duration" : 9682
        }
      }, {
        "uid" : "3dbda87523501bf3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/3dbda87523501bf3",
        "status" : "passed",
        "time" : {
          "start" : 1719801384721,
          "stop" : 1719801394101,
          "duration" : 9380
        }
      }, {
        "uid" : "a11d3bafd90e745f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/a11d3bafd90e745f",
        "status" : "passed",
        "time" : {
          "start" : 1719714804719,
          "stop" : 1719714814154,
          "duration" : 9435
        }
      }, {
        "uid" : "70fcc2b125f38796",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/70fcc2b125f38796",
        "status" : "passed",
        "time" : {
          "start" : 1719628088370,
          "stop" : 1719628101041,
          "duration" : 12671
        }
      }, {
        "uid" : "6312904d95aff189",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/6312904d95aff189",
        "status" : "passed",
        "time" : {
          "start" : 1719541816175,
          "stop" : 1719541826019,
          "duration" : 9844
        }
      }, {
        "uid" : "cf25b13787c423c7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/cf25b13787c423c7",
        "status" : "passed",
        "time" : {
          "start" : 1719455302427,
          "stop" : 1719455311963,
          "duration" : 9536
        }
      }, {
        "uid" : "8b31f95e846ef823",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/8b31f95e846ef823",
        "status" : "passed",
        "time" : {
          "start" : 1719368938349,
          "stop" : 1719368950301,
          "duration" : 11952
        }
      }, {
        "uid" : "c6a240fe743f624d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/c6a240fe743f624d",
        "status" : "passed",
        "time" : {
          "start" : 1719282575280,
          "stop" : 1719282587465,
          "duration" : 12185
        }
      }, {
        "uid" : "92ac8302bbe8e125",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/92ac8302bbe8e125",
        "status" : "passed",
        "time" : {
          "start" : 1719196244679,
          "stop" : 1719196256729,
          "duration" : 12050
        }
      }, {
        "uid" : "b11b63d71bcfed8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/64//#testresult/b11b63d71bcfed8",
        "status" : "passed",
        "time" : {
          "start" : 1719109856430,
          "stop" : 1719109869432,
          "duration" : 13002
        }
      }, {
        "uid" : "819d6ec220076bef",
        "reportUrl" : "https://Nat754.github.io/PulseWave/63//#testresult/819d6ec220076bef",
        "status" : "passed",
        "time" : {
          "start" : 1719023153985,
          "stop" : 1719023164263,
          "duration" : 10278
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2b55e7cf48d6a941.json",
  "parameterValues" : [ ]
}