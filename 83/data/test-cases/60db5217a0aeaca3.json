{
  "uid" : "60db5217a0aeaca3",
  "name" : "DELETE Удалить авторизованного пользователя",
  "fullName" : "tests.test_api.test_api.TestAPI#test_delete_auth_users_me",
  "historyId" : "74147b46975ab4b428df8f7f14ca08af",
  "time" : {
    "start" : 1720751297709,
    "stop" : 1720751298296,
    "duration" : 587
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca9d90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf652ed0>\n\n    @allure.title(\"DELETE Удалить авторизованного пользователя\")\n    def test_delete_auth_users_me(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password3)\n\ntests/test_api/test_api.py:644: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720751239489,
      "stop" : 1720751239506,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720751297708,
      "stop" : 1720751297709,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720751239506,
      "stop" : 1720751239506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca9d90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf652ed0>\n\n    @allure.title(\"DELETE Удалить авторизованного пользователя\")\n    def test_delete_auth_users_me(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password3)\n\ntests/test_api/test_api.py:644: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720751297709,
        "stop" : 1720751298295,
        "duration" : 586
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1424-7"
  }, {
    "name" : "thread",
    "value" : "2286-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 19,
        "skipped" : 0,
        "passed" : 71,
        "unknown" : 0,
        "total" : 90
      },
      "items" : [ {
        "uid" : "64b20272c92fa423",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/64b20272c92fa423",
        "status" : "passed",
        "time" : {
          "start" : 1720665367850,
          "stop" : 1720665370265,
          "duration" : 2415
        }
      }, {
        "uid" : "c4bf35a7adf89e0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/c4bf35a7adf89e0a",
        "status" : "passed",
        "time" : {
          "start" : 1720578853855,
          "stop" : 1720578856807,
          "duration" : 2952
        }
      }, {
        "uid" : "4099eab89c26553e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/4099eab89c26553e",
        "status" : "passed",
        "time" : {
          "start" : 1720492463879,
          "stop" : 1720492466687,
          "duration" : 2808
        }
      }, {
        "uid" : "3c7055676e60deaf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/3c7055676e60deaf",
        "status" : "passed",
        "time" : {
          "start" : 1720406181541,
          "stop" : 1720406184511,
          "duration" : 2970
        }
      }, {
        "uid" : "a8b3cfabb2534da9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/a8b3cfabb2534da9",
        "status" : "passed",
        "time" : {
          "start" : 1720319813708,
          "stop" : 1720319816198,
          "duration" : 2490
        }
      }, {
        "uid" : "28c46c3a992828cd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/28c46c3a992828cd",
        "status" : "passed",
        "time" : {
          "start" : 1720232999056,
          "stop" : 1720233001534,
          "duration" : 2478
        }
      }, {
        "uid" : "fefdc953f73524f1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/fefdc953f73524f1",
        "status" : "passed",
        "time" : {
          "start" : 1720146739860,
          "stop" : 1720146742498,
          "duration" : 2638
        }
      }, {
        "uid" : "50eb9b5e3f2890a4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/50eb9b5e3f2890a4",
        "status" : "passed",
        "time" : {
          "start" : 1720060414066,
          "stop" : 1720060416814,
          "duration" : 2748
        }
      }, {
        "uid" : "54979b58e56a9e91",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/54979b58e56a9e91",
        "status" : "passed",
        "time" : {
          "start" : 1719973918020,
          "stop" : 1719973920529,
          "duration" : 2509
        }
      }, {
        "uid" : "fe09fd7f2f6423ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/fe09fd7f2f6423ed",
        "status" : "passed",
        "time" : {
          "start" : 1719887589821,
          "stop" : 1719887592375,
          "duration" : 2554
        }
      }, {
        "uid" : "ddcd5c3af9127f8e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/ddcd5c3af9127f8e",
        "status" : "passed",
        "time" : {
          "start" : 1719801601928,
          "stop" : 1719801604604,
          "duration" : 2676
        }
      }, {
        "uid" : "4fea77bcad16cfa4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/4fea77bcad16cfa4",
        "status" : "passed",
        "time" : {
          "start" : 1719715020778,
          "stop" : 1719715023740,
          "duration" : 2962
        }
      }, {
        "uid" : "d4d6533dda3eaea0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/d4d6533dda3eaea0",
        "status" : "passed",
        "time" : {
          "start" : 1719628367610,
          "stop" : 1719628370498,
          "duration" : 2888
        }
      }, {
        "uid" : "254ac88f52673719",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/254ac88f52673719",
        "status" : "passed",
        "time" : {
          "start" : 1719542046045,
          "stop" : 1719542048785,
          "duration" : 2740
        }
      }, {
        "uid" : "969d131e9348d677",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/969d131e9348d677",
        "status" : "passed",
        "time" : {
          "start" : 1719455520647,
          "stop" : 1719455523342,
          "duration" : 2695
        }
      }, {
        "uid" : "bf33c1b9ff8ac13d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/bf33c1b9ff8ac13d",
        "status" : "passed",
        "time" : {
          "start" : 1719369202696,
          "stop" : 1719369205680,
          "duration" : 2984
        }
      }, {
        "uid" : "b7f0a77d8d593f43",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/b7f0a77d8d593f43",
        "status" : "passed",
        "time" : {
          "start" : 1719282860838,
          "stop" : 1719282863777,
          "duration" : 2939
        }
      }, {
        "uid" : "81ab252d05f316c3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/81ab252d05f316c3",
        "status" : "passed",
        "time" : {
          "start" : 1719196526134,
          "stop" : 1719196529214,
          "duration" : 3080
        }
      }, {
        "uid" : "b58b56911da860ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/64//#testresult/b58b56911da860ed",
        "status" : "passed",
        "time" : {
          "start" : 1719110134405,
          "stop" : 1719110137495,
          "duration" : 3090
        }
      }, {
        "uid" : "36b42c73e9e5c8af",
        "reportUrl" : "https://Nat754.github.io/PulseWave/63//#testresult/36b42c73e9e5c8af",
        "status" : "passed",
        "time" : {
          "start" : 1719023396422,
          "stop" : 1719023399208,
          "duration" : 2786
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "60db5217a0aeaca3.json",
  "parameterValues" : [ ]
}