{
  "uid" : "c44acac6451e8b51",
  "name" : "PATCH Частично обновить задачу",
  "fullName" : "tests.test_api.test_api.TestAPI#test_patch_api_column_id_task_id",
  "historyId" : "dfe2f9a63692d074fcb147be38701049",
  "time" : {
    "start" : 1720751277822,
    "stop" : 1720751278411,
    "duration" : 589
  },
  "description" : "Перемещение между колонками возможно только PUT запросом",
  "descriptionHtml" : "<p>Перемещение между колонками возможно только PUT запросом</p>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca0d70>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf63da90>\n\n    @allure.title(\"PATCH Частично обновить задачу\")\n    def test_patch_api_column_id_task_id(self, use_api_base):\n        \"\"\"Перемещение между колонками возможно только PUT запросом\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720751239489,
      "stop" : 1720751239506,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720751277822,
      "stop" : 1720751277822,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720751239506,
      "stop" : 1720751239506,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Перемещение между колонками возможно только PUT запросом",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6be0ae3980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f6bdfca0d70>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6bdf63da90>\n\n    @allure.title(\"PATCH Частично обновить задачу\")\n    def test_patch_api_column_id_task_id(self, use_api_base):\n        \"\"\"Перемещение между колонками возможно только PUT запросом\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:354: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720751277822,
        "stop" : 1720751278410,
        "duration" : 588
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1424-7"
  }, {
    "name" : "thread",
    "value" : "2286-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 90
      },
      "items" : [ {
        "uid" : "307a904d03ca618",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/307a904d03ca618",
        "status" : "passed",
        "time" : {
          "start" : 1720665170007,
          "stop" : 1720665181265,
          "duration" : 11258
        }
      }, {
        "uid" : "df8887e746caccb9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/df8887e746caccb9",
        "status" : "passed",
        "time" : {
          "start" : 1720578640587,
          "stop" : 1720578652839,
          "duration" : 12252
        }
      }, {
        "uid" : "f43632787a970552",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/f43632787a970552",
        "status" : "passed",
        "time" : {
          "start" : 1720492261314,
          "stop" : 1720492272659,
          "duration" : 11345
        }
      }, {
        "uid" : "f7820e9286914e1e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/f7820e9286914e1e",
        "status" : "passed",
        "time" : {
          "start" : 1720405929060,
          "stop" : 1720405944005,
          "duration" : 14945
        }
      }, {
        "uid" : "dbeeb107b14a5917",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/dbeeb107b14a5917",
        "status" : "passed",
        "time" : {
          "start" : 1720319614046,
          "stop" : 1720319625864,
          "duration" : 11818
        }
      }, {
        "uid" : "ee6f32926e3d282c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/ee6f32926e3d282c",
        "status" : "passed",
        "time" : {
          "start" : 1720232802268,
          "stop" : 1720232813390,
          "duration" : 11122
        }
      }, {
        "uid" : "d5eee28fa539378b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/d5eee28fa539378b",
        "status" : "passed",
        "time" : {
          "start" : 1720146536798,
          "stop" : 1720146548679,
          "duration" : 11881
        }
      }, {
        "uid" : "365773fb1d69fbc8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/365773fb1d69fbc8",
        "status" : "passed",
        "time" : {
          "start" : 1720060214042,
          "stop" : 1720060225494,
          "duration" : 11452
        }
      }, {
        "uid" : "1f7d1341b6b3b56a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/1f7d1341b6b3b56a",
        "status" : "passed",
        "time" : {
          "start" : 1719973721274,
          "stop" : 1719973732563,
          "duration" : 11289
        }
      }, {
        "uid" : "f124d5b9471e1d3c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/f124d5b9471e1d3c",
        "status" : "passed",
        "time" : {
          "start" : 1719887385865,
          "stop" : 1719887397051,
          "duration" : 11186
        }
      }, {
        "uid" : "25350abf0d99f201",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/25350abf0d99f201",
        "status" : "passed",
        "time" : {
          "start" : 1719801405699,
          "stop" : 1719801416891,
          "duration" : 11192
        }
      }, {
        "uid" : "32e02d421796d575",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/32e02d421796d575",
        "status" : "passed",
        "time" : {
          "start" : 1719714825178,
          "stop" : 1719714836397,
          "duration" : 11219
        }
      }, {
        "uid" : "a59b7a246bd7a3bf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/a59b7a246bd7a3bf",
        "status" : "passed",
        "time" : {
          "start" : 1719628115943,
          "stop" : 1719628130726,
          "duration" : 14783
        }
      }, {
        "uid" : "c72ab05b91d6c53d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/c72ab05b91d6c53d",
        "status" : "passed",
        "time" : {
          "start" : 1719541837875,
          "stop" : 1719541849836,
          "duration" : 11961
        }
      }, {
        "uid" : "1d55ae035af61617",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/1d55ae035af61617",
        "status" : "passed",
        "time" : {
          "start" : 1719455323096,
          "stop" : 1719455334440,
          "duration" : 11344
        }
      }, {
        "uid" : "898f46d91fe078b9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/898f46d91fe078b9",
        "status" : "passed",
        "time" : {
          "start" : 1719368964098,
          "stop" : 1719368977868,
          "duration" : 13770
        }
      }, {
        "uid" : "627a878401887202",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/627a878401887202",
        "status" : "passed",
        "time" : {
          "start" : 1719282602342,
          "stop" : 1719282617225,
          "duration" : 14883
        }
      }, {
        "uid" : "f42a5d0808dee75e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/f42a5d0808dee75e",
        "status" : "passed",
        "time" : {
          "start" : 1719196271467,
          "stop" : 1719196285794,
          "duration" : 14327
        }
      }, {
        "uid" : "c33aea37c3c91b36",
        "reportUrl" : "https://Nat754.github.io/PulseWave/64//#testresult/c33aea37c3c91b36",
        "status" : "passed",
        "time" : {
          "start" : 1719109884571,
          "stop" : 1719109899325,
          "duration" : 14754
        }
      }, {
        "uid" : "9834428178471678",
        "reportUrl" : "https://Nat754.github.io/PulseWave/63//#testresult/9834428178471678",
        "status" : "passed",
        "time" : {
          "start" : 1719023176570,
          "stop" : 1719023189209,
          "duration" : 12639
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c44acac6451e8b51.json",
  "parameterValues" : [ ]
}