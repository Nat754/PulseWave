{
  "uid" : "9f087fb26b12bb19",
  "name" : "POST Подтверждение смены почты пользователя. Токен получить из ссылки auth/change_email/{token}.",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_auth_change_email_confirm",
  "historyId" : "45e5562a3450eddd1d35fac0e3834f4b",
  "time" : {
    "start" : 1720837660799,
    "stop" : 1720837661518,
    "duration" : 719
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efec4393980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7efec35b7110>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7efec2f345c0>\n\n    @allure.title(\"POST Подтверждение смены почты пользователя. Токен получить из ссылки auth/change_email/{token}.\")\n    def test_post_auth_change_email_confirm(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720837601433,
      "stop" : 1720837601433,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720837601416,
      "stop" : 1720837601433,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720837660798,
      "stop" : 1720837660798,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efec4393980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7efec35b7110>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7efec2f345c0>\n\n    @allure.title(\"POST Подтверждение смены почты пользователя. Токен получить из ссылки auth/change_email/{token}.\")\n    def test_post_auth_change_email_confirm(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720837660799,
        "stop" : 1720837661518,
        "duration" : 719
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1269-991"
  }, {
    "name" : "thread",
    "value" : "2257-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 20,
        "skipped" : 0,
        "passed" : 71,
        "unknown" : 0,
        "total" : 91
      },
      "items" : [ {
        "uid" : "e5d3f653edcb145e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/e5d3f653edcb145e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751295792,
          "stop" : 1720751296376,
          "duration" : 584
        }
      }, {
        "uid" : "6c5e54cd8083d48a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/6c5e54cd8083d48a",
        "status" : "passed",
        "time" : {
          "start" : 1720665346945,
          "stop" : 1720665350874,
          "duration" : 3929
        }
      }, {
        "uid" : "8f4e142a226c6967",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/8f4e142a226c6967",
        "status" : "passed",
        "time" : {
          "start" : 1720578832563,
          "stop" : 1720578836806,
          "duration" : 4243
        }
      }, {
        "uid" : "f00ba71734f5fdd9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/f00ba71734f5fdd9",
        "status" : "passed",
        "time" : {
          "start" : 1720492442869,
          "stop" : 1720492447160,
          "duration" : 4291
        }
      }, {
        "uid" : "3b94a84b0e89895f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/3b94a84b0e89895f",
        "status" : "passed",
        "time" : {
          "start" : 1720406157402,
          "stop" : 1720406162725,
          "duration" : 5323
        }
      }, {
        "uid" : "3eb856bca953be23",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/3eb856bca953be23",
        "status" : "passed",
        "time" : {
          "start" : 1720319793524,
          "stop" : 1720319797096,
          "duration" : 3572
        }
      }, {
        "uid" : "7215a3ccc2f56fdf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/7215a3ccc2f56fdf",
        "status" : "passed",
        "time" : {
          "start" : 1720232977587,
          "stop" : 1720232982007,
          "duration" : 4420
        }
      }, {
        "uid" : "ccce91521a0bdf7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/ccce91521a0bdf7",
        "status" : "passed",
        "time" : {
          "start" : 1720146710722,
          "stop" : 1720146715004,
          "duration" : 4282
        }
      }, {
        "uid" : "c83c282ad9ec593e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/c83c282ad9ec593e",
        "status" : "passed",
        "time" : {
          "start" : 1720060392250,
          "stop" : 1720060396908,
          "duration" : 4658
        }
      }, {
        "uid" : "87f220f5ff37a0c5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/87f220f5ff37a0c5",
        "status" : "passed",
        "time" : {
          "start" : 1719973896038,
          "stop" : 1719973900606,
          "duration" : 4568
        }
      }, {
        "uid" : "cd022291a16b015a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/cd022291a16b015a",
        "status" : "passed",
        "time" : {
          "start" : 1719887561496,
          "stop" : 1719887565543,
          "duration" : 4047
        }
      }, {
        "uid" : "fcf9f688022d89ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/fcf9f688022d89ed",
        "status" : "passed",
        "time" : {
          "start" : 1719801580228,
          "stop" : 1719801584221,
          "duration" : 3993
        }
      }, {
        "uid" : "9a28302d92233b53",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/9a28302d92233b53",
        "status" : "passed",
        "time" : {
          "start" : 1719715000144,
          "stop" : 1719715003870,
          "duration" : 3726
        }
      }, {
        "uid" : "62549d184f0b3116",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/62549d184f0b3116",
        "status" : "passed",
        "time" : {
          "start" : 1719628343892,
          "stop" : 1719628349162,
          "duration" : 5270
        }
      }, {
        "uid" : "5abc799cea62cdb4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/5abc799cea62cdb4",
        "status" : "passed",
        "time" : {
          "start" : 1719542023894,
          "stop" : 1719542028371,
          "duration" : 4477
        }
      }, {
        "uid" : "32e38c3da10e2910",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/32e38c3da10e2910",
        "status" : "passed",
        "time" : {
          "start" : 1719455499314,
          "stop" : 1719455503465,
          "duration" : 4151
        }
      }, {
        "uid" : "99849e9322d6eada",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/99849e9322d6eada",
        "status" : "passed",
        "time" : {
          "start" : 1719369179201,
          "stop" : 1719369184247,
          "duration" : 5046
        }
      }, {
        "uid" : "ba3ca7971e96904c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/ba3ca7971e96904c",
        "status" : "passed",
        "time" : {
          "start" : 1719282829995,
          "stop" : 1719282835040,
          "duration" : 5045
        }
      }, {
        "uid" : "164443a6dce7bda",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/164443a6dce7bda",
        "status" : "passed",
        "time" : {
          "start" : 1719196501456,
          "stop" : 1719196506982,
          "duration" : 5526
        }
      }, {
        "uid" : "2d408aae6db46059",
        "reportUrl" : "https://Nat754.github.io/PulseWave/64//#testresult/2d408aae6db46059",
        "status" : "passed",
        "time" : {
          "start" : 1719110109778,
          "stop" : 1719110115804,
          "duration" : 6026
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "9f087fb26b12bb19.json",
  "parameterValues" : [ ]
}