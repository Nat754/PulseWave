{
  "uid" : "d372571c47b8c54f",
  "name" : "PATCH Частично обновить доску",
  "fullName" : "tests.test_api.test_api.TestAPI#test_patch_api_workspace_id_boards_id",
  "historyId" : "8549e140c10cfecca8f69e57e57973d2",
  "time" : {
    "start" : 1720837629786,
    "stop" : 1720837630508,
    "duration" : 722
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efec4393980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7efec35b2150>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7efec2f1ac30>\n\n    @allure.title(\"PATCH Частично обновить доску\")\n    def test_patch_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720837601433,
      "stop" : 1720837601433,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720837629786,
      "stop" : 1720837629786,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720837601416,
      "stop" : 1720837601433,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7efec4393980>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7efec35b2150>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7efec2f1ac30>\n\n    @allure.title(\"PATCH Частично обновить доску\")\n    def test_patch_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720837629787,
        "stop" : 1720837630507,
        "duration" : 720
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1269-991"
  }, {
    "name" : "thread",
    "value" : "2257-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 3,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 91
      },
      "items" : [ {
        "uid" : "e34fd5458a024c3b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/e34fd5458a024c3b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751269662,
          "stop" : 1720751270243,
          "duration" : 581
        }
      }, {
        "uid" : "8af6f5731298953c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/8af6f5731298953c",
        "status" : "passed",
        "time" : {
          "start" : 1720665086979,
          "stop" : 1720665092042,
          "duration" : 5063
        }
      }, {
        "uid" : "f4631ed92f79b2c4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/f4631ed92f79b2c4",
        "status" : "passed",
        "time" : {
          "start" : 1720578549649,
          "stop" : 1720578555526,
          "duration" : 5877
        }
      }, {
        "uid" : "7f70f0c1b47e8716",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/7f70f0c1b47e8716",
        "status" : "passed",
        "time" : {
          "start" : 1720492177685,
          "stop" : 1720492183224,
          "duration" : 5539
        }
      }, {
        "uid" : "ca790ccc0117176d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/ca790ccc0117176d",
        "status" : "passed",
        "time" : {
          "start" : 1720405819468,
          "stop" : 1720405826642,
          "duration" : 7174
        }
      }, {
        "uid" : "6a88609e62c040e3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/6a88609e62c040e3",
        "status" : "passed",
        "time" : {
          "start" : 1720319529534,
          "stop" : 1720319535014,
          "duration" : 5480
        }
      }, {
        "uid" : "52273d1f13c72b7e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/52273d1f13c72b7e",
        "status" : "passed",
        "time" : {
          "start" : 1720232720552,
          "stop" : 1720232726081,
          "duration" : 5529
        }
      }, {
        "uid" : "43cae147afc264af",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/43cae147afc264af",
        "status" : "passed",
        "time" : {
          "start" : 1720146453824,
          "stop" : 1720146459628,
          "duration" : 5804
        }
      }, {
        "uid" : "9f2613286c386683",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/9f2613286c386683",
        "status" : "passed",
        "time" : {
          "start" : 1720060130714,
          "stop" : 1720060136051,
          "duration" : 5337
        }
      }, {
        "uid" : "7b11d95c0f160ed2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/7b11d95c0f160ed2",
        "status" : "passed",
        "time" : {
          "start" : 1719973637784,
          "stop" : 1719973643839,
          "duration" : 6055
        }
      }, {
        "uid" : "5d0d7059142052b7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/5d0d7059142052b7",
        "status" : "passed",
        "time" : {
          "start" : 1719887303452,
          "stop" : 1719887308523,
          "duration" : 5071
        }
      }, {
        "uid" : "5d001ec26f9cd588",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/5d001ec26f9cd588",
        "status" : "passed",
        "time" : {
          "start" : 1719801322837,
          "stop" : 1719801328554,
          "duration" : 5717
        }
      }, {
        "uid" : "6068f37bbdfe5e46",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/6068f37bbdfe5e46",
        "status" : "passed",
        "time" : {
          "start" : 1719714744101,
          "stop" : 1719714749791,
          "duration" : 5690
        }
      }, {
        "uid" : "93450317f261c43a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/93450317f261c43a",
        "status" : "passed",
        "time" : {
          "start" : 1719628008125,
          "stop" : 1719628015040,
          "duration" : 6915
        }
      }, {
        "uid" : "b67b64b8a33d8211",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/b67b64b8a33d8211",
        "status" : "passed",
        "time" : {
          "start" : 1719541751267,
          "stop" : 1719541757150,
          "duration" : 5883
        }
      }, {
        "uid" : "f9a3505a9f73a1b4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/f9a3505a9f73a1b4",
        "status" : "passed",
        "time" : {
          "start" : 1719455240049,
          "stop" : 1719455245357,
          "duration" : 5308
        }
      }, {
        "uid" : "7f5326d4be0108da",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/7f5326d4be0108da",
        "status" : "passed",
        "time" : {
          "start" : 1719368862329,
          "stop" : 1719368869010,
          "duration" : 6681
        }
      }, {
        "uid" : "3d13dc835e6bf777",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/3d13dc835e6bf777",
        "status" : "passed",
        "time" : {
          "start" : 1719282496423,
          "stop" : 1719282503301,
          "duration" : 6878
        }
      }, {
        "uid" : "f38735666ac60c72",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/f38735666ac60c72",
        "status" : "passed",
        "time" : {
          "start" : 1719196164811,
          "stop" : 1719196171649,
          "duration" : 6838
        }
      }, {
        "uid" : "19167f31c975fbba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/64//#testresult/19167f31c975fbba",
        "status" : "passed",
        "time" : {
          "start" : 1719109774003,
          "stop" : 1719109781311,
          "duration" : 7308
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d372571c47b8c54f.json",
  "parameterValues" : [ ]
}