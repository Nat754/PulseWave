{
  "uid" : "aa3f344f1a525b6d",
  "name" : "POST Запрос на смену почты",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_auth_change_email",
  "historyId" : "b05e07f6bb5e624e3a2d1bcc8ca2be0d",
  "time" : {
    "start" : 1720924628615,
    "stop" : 1720924629136,
    "duration" : 521
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f649e143620>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f649d3aef00>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f649ccb7890>\n\n    @allure.title(\"POST Запрос на смену почты\")\n    def test_post_auth_change_email(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1720924575277,
      "stop" : 1720924575294,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1720924575294,
      "stop" : 1720924575294,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1720924628615,
      "stop" : 1720924628615,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f649e143620>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f649d3aef00>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f649ccb7890>\n\n    @allure.title(\"POST Запрос на смену почты\")\n    def test_post_auth_change_email(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1720924628615,
        "stop" : 1720924629135,
        "duration" : 520
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1391-779"
  }, {
    "name" : "thread",
    "value" : "2337-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 10,
        "broken" : 11,
        "skipped" : 0,
        "passed" : 71,
        "unknown" : 0,
        "total" : 92
      },
      "items" : [ {
        "uid" : "a3549a0d70881259",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/a3549a0d70881259",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837660019,
          "stop" : 1720837660744,
          "duration" : 725
        }
      }, {
        "uid" : "73d4d1cfea1f2ec4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/73d4d1cfea1f2ec4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751295155,
          "stop" : 1720751295737,
          "duration" : 582
        }
      }, {
        "uid" : "dbc44e33c1f9f500",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/dbc44e33c1f9f500",
        "status" : "passed",
        "time" : {
          "start" : 1720665333886,
          "stop" : 1720665346943,
          "duration" : 13057
        }
      }, {
        "uid" : "299fd7820a059569",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/299fd7820a059569",
        "status" : "passed",
        "time" : {
          "start" : 1720578819415,
          "stop" : 1720578832561,
          "duration" : 13146
        }
      }, {
        "uid" : "8edae4bb108b22d3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/8edae4bb108b22d3",
        "status" : "passed",
        "time" : {
          "start" : 1720492421956,
          "stop" : 1720492442867,
          "duration" : 20911
        }
      }, {
        "uid" : "7c388e73ac903d9f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/7c388e73ac903d9f",
        "status" : "passed",
        "time" : {
          "start" : 1720406144159,
          "stop" : 1720406157400,
          "duration" : 13241
        }
      }, {
        "uid" : "f6930524c2d83026",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/f6930524c2d83026",
        "status" : "passed",
        "time" : {
          "start" : 1720319780311,
          "stop" : 1720319793522,
          "duration" : 13211
        }
      }, {
        "uid" : "7723b9a7c75fa72f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/7723b9a7c75fa72f",
        "status" : "passed",
        "time" : {
          "start" : 1720232964454,
          "stop" : 1720232977585,
          "duration" : 13131
        }
      }, {
        "uid" : "14bcd845345b408f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/14bcd845345b408f",
        "status" : "passed",
        "time" : {
          "start" : 1720146697785,
          "stop" : 1720146710720,
          "duration" : 12935
        }
      }, {
        "uid" : "31d6fbbad8f70501",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/31d6fbbad8f70501",
        "status" : "passed",
        "time" : {
          "start" : 1720060378938,
          "stop" : 1720060392248,
          "duration" : 13310
        }
      }, {
        "uid" : "92bba3094013a97f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/92bba3094013a97f",
        "status" : "passed",
        "time" : {
          "start" : 1719973883098,
          "stop" : 1719973896036,
          "duration" : 12938
        }
      }, {
        "uid" : "bf7730527d09022b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/bf7730527d09022b",
        "status" : "passed",
        "time" : {
          "start" : 1719887548544,
          "stop" : 1719887561493,
          "duration" : 12949
        }
      }, {
        "uid" : "808b52ae14e215c5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/808b52ae14e215c5",
        "status" : "passed",
        "time" : {
          "start" : 1719801567390,
          "stop" : 1719801580226,
          "duration" : 12836
        }
      }, {
        "uid" : "9c72b8aa76d9a55e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/9c72b8aa76d9a55e",
        "status" : "passed",
        "time" : {
          "start" : 1719714987476,
          "stop" : 1719715000142,
          "duration" : 12666
        }
      }, {
        "uid" : "381617bf8c29045c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/381617bf8c29045c",
        "status" : "passed",
        "time" : {
          "start" : 1719628330647,
          "stop" : 1719628343890,
          "duration" : 13243
        }
      }, {
        "uid" : "3db9aed440457b07",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/3db9aed440457b07",
        "status" : "passed",
        "time" : {
          "start" : 1719542010308,
          "stop" : 1719542023892,
          "duration" : 13584
        }
      }, {
        "uid" : "dab0a4c22db4e9a4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/dab0a4c22db4e9a4",
        "status" : "passed",
        "time" : {
          "start" : 1719455486219,
          "stop" : 1719455499312,
          "duration" : 13093
        }
      }, {
        "uid" : "25ae15b1930311fa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/25ae15b1930311fa",
        "status" : "passed",
        "time" : {
          "start" : 1719369165880,
          "stop" : 1719369179199,
          "duration" : 13319
        }
      }, {
        "uid" : "cf477083072ecf0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/cf477083072ecf0a",
        "status" : "passed",
        "time" : {
          "start" : 1719282816608,
          "stop" : 1719282829993,
          "duration" : 13385
        }
      }, {
        "uid" : "c64b67c15c93ae4a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/65//#testresult/c64b67c15c93ae4a",
        "status" : "passed",
        "time" : {
          "start" : 1719196483961,
          "stop" : 1719196501454,
          "duration" : 17493
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "aa3f344f1a525b6d.json",
  "parameterValues" : [ ]
}