{
  "uid" : "fa600b5468f85be",
  "name" : "PATCH Отметить прочтение уведомления",
  "fullName" : "tests.test_api.test_api.TestAPI#test_patch_api_notification_id_read",
  "historyId" : "e2b6f38de87a9a6ca0e23bc7e49b974d",
  "time" : {
    "start" : 1721010800201,
    "stop" : 1721010800826,
    "duration" : 625
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2773cb3950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2772e99b50>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f277283d3a0>\n\n    @allure.title(\"PATCH Отметить прочтение уведомления\")\n    def test_patch_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721010762414,
      "stop" : 1721010762432,
      "duration" : 18
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721010800200,
      "stop" : 1721010800200,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721010762432,
      "stop" : 1721010762432,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2773cb3950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2772e99b50>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f277283d3a0>\n\n    @allure.title(\"PATCH Отметить прочтение уведомления\")\n    def test_patch_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721010800201,
        "stop" : 1721010800826,
        "duration" : 625
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1024-477"
  }, {
    "name" : "thread",
    "value" : "2274-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 93
      },
      "items" : [ {
        "uid" : "47a533367287e26a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/47a533367287e26a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924615480,
          "stop" : 1720924616000,
          "duration" : 520
        }
      }, {
        "uid" : "73edb3e197bc18cf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/73edb3e197bc18cf",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837643717,
          "stop" : 1720837644420,
          "duration" : 703
        }
      }, {
        "uid" : "c8321c4ec02a61a3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/c8321c4ec02a61a3",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751281662,
          "stop" : 1720751282248,
          "duration" : 586
        }
      }, {
        "uid" : "d5668f1d3bfcc162",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/d5668f1d3bfcc162",
        "status" : "passed",
        "time" : {
          "start" : 1720665207184,
          "stop" : 1720665209405,
          "duration" : 2221
        }
      }, {
        "uid" : "f2f0c73b548fcabf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/f2f0c73b548fcabf",
        "status" : "passed",
        "time" : {
          "start" : 1720578681773,
          "stop" : 1720578684389,
          "duration" : 2616
        }
      }, {
        "uid" : "279822404a9664c2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/279822404a9664c2",
        "status" : "passed",
        "time" : {
          "start" : 1720492298838,
          "stop" : 1720492301049,
          "duration" : 2211
        }
      }, {
        "uid" : "9ab2cc21f4764022",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/9ab2cc21f4764022",
        "status" : "passed",
        "time" : {
          "start" : 1720405977548,
          "stop" : 1720405980650,
          "duration" : 3102
        }
      }, {
        "uid" : "604ba82403fc17d2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/604ba82403fc17d2",
        "status" : "passed",
        "time" : {
          "start" : 1720319652203,
          "stop" : 1720319654607,
          "duration" : 2404
        }
      }, {
        "uid" : "ad52952e469d8b2b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/ad52952e469d8b2b",
        "status" : "passed",
        "time" : {
          "start" : 1720232839274,
          "stop" : 1720232841675,
          "duration" : 2401
        }
      }, {
        "uid" : "2ca4b1d7d9f99caf",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/2ca4b1d7d9f99caf",
        "status" : "passed",
        "time" : {
          "start" : 1720146574552,
          "stop" : 1720146576794,
          "duration" : 2242
        }
      }, {
        "uid" : "4cc0490bee32eb66",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/4cc0490bee32eb66",
        "status" : "passed",
        "time" : {
          "start" : 1720060251727,
          "stop" : 1720060254119,
          "duration" : 2392
        }
      }, {
        "uid" : "7ffdfe6bc3435595",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/7ffdfe6bc3435595",
        "status" : "passed",
        "time" : {
          "start" : 1719973758708,
          "stop" : 1719973761047,
          "duration" : 2339
        }
      }, {
        "uid" : "782059f969ee2ec8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/782059f969ee2ec8",
        "status" : "passed",
        "time" : {
          "start" : 1719887424090,
          "stop" : 1719887426319,
          "duration" : 2229
        }
      }, {
        "uid" : "82f792de84b0fbe5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/82f792de84b0fbe5",
        "status" : "passed",
        "time" : {
          "start" : 1719801442953,
          "stop" : 1719801445211,
          "duration" : 2258
        }
      }, {
        "uid" : "bb5a4d203ebd27b2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/bb5a4d203ebd27b2",
        "status" : "passed",
        "time" : {
          "start" : 1719714863383,
          "stop" : 1719714865612,
          "duration" : 2229
        }
      }, {
        "uid" : "8f9b85595465dea9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/8f9b85595465dea9",
        "status" : "passed",
        "time" : {
          "start" : 1719628164847,
          "stop" : 1719628168006,
          "duration" : 3159
        }
      }, {
        "uid" : "16f9de2466c2913e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/16f9de2466c2913e",
        "status" : "passed",
        "time" : {
          "start" : 1719541877765,
          "stop" : 1719541880249,
          "duration" : 2484
        }
      }, {
        "uid" : "80bcd280324d932f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/80bcd280324d932f",
        "status" : "passed",
        "time" : {
          "start" : 1719455360760,
          "stop" : 1719455363041,
          "duration" : 2281
        }
      }, {
        "uid" : "118d4635d4a622a9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/118d4635d4a622a9",
        "status" : "passed",
        "time" : {
          "start" : 1719369010800,
          "stop" : 1719369013916,
          "duration" : 3116
        }
      }, {
        "uid" : "d259fe395d969680",
        "reportUrl" : "https://Nat754.github.io/PulseWave/66//#testresult/d259fe395d969680",
        "status" : "passed",
        "time" : {
          "start" : 1719282652393,
          "stop" : 1719282655572,
          "duration" : 3179
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "fa600b5468f85be.json",
  "parameterValues" : [ ]
}