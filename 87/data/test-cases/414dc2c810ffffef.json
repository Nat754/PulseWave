{
  "uid" : "414dc2c810ffffef",
  "name" : "PUT Обновить задачу",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_column_id_task_id",
  "historyId" : "24f2847e7891c58dbf4fcf3b730fd157",
  "time" : {
    "start" : 1721097002948,
    "stop" : 1721097003534,
    "duration" : 586
  },
  "description" : "Для перемещения между колонок нужно передать column - id новой колонки и index - куда ее вставить",
  "descriptionHtml" : "<p>Для перемещения между колонок нужно передать column - id новой колонки и index - куда ее вставить</p>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aa85f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f29784232c0>\n\n    @allure.title(\"PUT Обновить задачу\")\n    def test_put_api_column_id_task_id(self, use_api_base):\n        \"\"\"Для перемещения между колонок нужно передать column - id новой колонки и index - куда ее вставить\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721096968249,
      "stop" : 1721096968249,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721097002947,
      "stop" : 1721097002948,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721096968232,
      "stop" : 1721096968249,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "Для перемещения между колонок нужно передать column - id новой колонки и index - куда ее вставить",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aa85f0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f29784232c0>\n\n    @allure.title(\"PUT Обновить задачу\")\n    def test_put_api_column_id_task_id(self, use_api_base):\n        \"\"\"Для перемещения между колонок нужно передать column - id новой колонки и index - куда ее вставить\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721097002948,
        "stop" : 1721097003533,
        "duration" : 585
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 94
      },
      "items" : [ {
        "uid" : "c08fb9bc52343d02",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/c08fb9bc52343d02",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010795559,
          "stop" : 1721010796064,
          "duration" : 505
        }
      }, {
        "uid" : "56f01b9f559cc6c0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/56f01b9f559cc6c0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924610021,
          "stop" : 1720924610844,
          "duration" : 823
        }
      }, {
        "uid" : "1d0a92eca1ead299",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/1d0a92eca1ead299",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837638282,
          "stop" : 1720837639002,
          "duration" : 720
        }
      }, {
        "uid" : "fe828c59aa79c4fb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/fe828c59aa79c4fb",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751277182,
          "stop" : 1720751277764,
          "duration" : 582
        }
      }, {
        "uid" : "aef095d68f9e302b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/aef095d68f9e302b",
        "status" : "passed",
        "time" : {
          "start" : 1720665158427,
          "stop" : 1720665170005,
          "duration" : 11578
        }
      }, {
        "uid" : "170c35976eafc7ed",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/170c35976eafc7ed",
        "status" : "passed",
        "time" : {
          "start" : 1720578628461,
          "stop" : 1720578640585,
          "duration" : 12124
        }
      }, {
        "uid" : "ebc804ff59b7a04e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/ebc804ff59b7a04e",
        "status" : "passed",
        "time" : {
          "start" : 1720492250060,
          "stop" : 1720492261311,
          "duration" : 11251
        }
      }, {
        "uid" : "5d97ff0a0d7b4aae",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/5d97ff0a0d7b4aae",
        "status" : "passed",
        "time" : {
          "start" : 1720405914130,
          "stop" : 1720405929058,
          "duration" : 14928
        }
      }, {
        "uid" : "2f702971d93faf68",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/2f702971d93faf68",
        "status" : "passed",
        "time" : {
          "start" : 1720319602672,
          "stop" : 1720319614044,
          "duration" : 11372
        }
      }, {
        "uid" : "8d631e46cede991d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/8d631e46cede991d",
        "status" : "passed",
        "time" : {
          "start" : 1720232791228,
          "stop" : 1720232802265,
          "duration" : 11037
        }
      }, {
        "uid" : "f50c1d1342f7307a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/f50c1d1342f7307a",
        "status" : "passed",
        "time" : {
          "start" : 1720146525493,
          "stop" : 1720146536796,
          "duration" : 11303
        }
      }, {
        "uid" : "70cff200bccc35e4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/70cff200bccc35e4",
        "status" : "passed",
        "time" : {
          "start" : 1720060202497,
          "stop" : 1720060214040,
          "duration" : 11543
        }
      }, {
        "uid" : "fdfbeb3f1f59be45",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/fdfbeb3f1f59be45",
        "status" : "passed",
        "time" : {
          "start" : 1719973710013,
          "stop" : 1719973721272,
          "duration" : 11259
        }
      }, {
        "uid" : "f90362a0f5e5ea7b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/f90362a0f5e5ea7b",
        "status" : "passed",
        "time" : {
          "start" : 1719887374482,
          "stop" : 1719887385863,
          "duration" : 11381
        }
      }, {
        "uid" : "f939791821b981ec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/f939791821b981ec",
        "status" : "passed",
        "time" : {
          "start" : 1719801394103,
          "stop" : 1719801405696,
          "duration" : 11593
        }
      }, {
        "uid" : "8765d79614c5237b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/8765d79614c5237b",
        "status" : "passed",
        "time" : {
          "start" : 1719714814156,
          "stop" : 1719714825176,
          "duration" : 11020
        }
      }, {
        "uid" : "5d1e448d6f77851c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/5d1e448d6f77851c",
        "status" : "passed",
        "time" : {
          "start" : 1719628101044,
          "stop" : 1719628115940,
          "duration" : 14896
        }
      }, {
        "uid" : "17ebdecc496f6c9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/17ebdecc496f6c9",
        "status" : "passed",
        "time" : {
          "start" : 1719541826021,
          "stop" : 1719541837872,
          "duration" : 11851
        }
      }, {
        "uid" : "d33256e07f5e9ace",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/d33256e07f5e9ace",
        "status" : "passed",
        "time" : {
          "start" : 1719455311966,
          "stop" : 1719455323093,
          "duration" : 11127
        }
      }, {
        "uid" : "18f2ea31b3576126",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/18f2ea31b3576126",
        "status" : "passed",
        "time" : {
          "start" : 1719368950304,
          "stop" : 1719368964096,
          "duration" : 13792
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "414dc2c810ffffef.json",
  "parameterValues" : [ ]
}