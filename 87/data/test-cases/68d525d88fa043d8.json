{
  "uid" : "68d525d88fa043d8",
  "name" : "POST Сброс пароля",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_auth_users_reset_password",
  "historyId" : "9c0613067191a06a9a224ccd0de82c8f",
  "time" : {
    "start" : 1721097023218,
    "stop" : 1721097023803,
    "duration" : 585
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978ab1d90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2978433ad0>\n\n    @allure.title(\"POST Сброс пароля\")\n    def test_post_auth_users_reset_password(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password0)\n\ntests/test_api/test_api.py:624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721096968249,
      "stop" : 1721096968249,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721096968232,
      "stop" : 1721096968249,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721097023218,
      "stop" : 1721097023218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978ab1d90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2978433ad0>\n\n    @allure.title(\"POST Сброс пароля\")\n    def test_post_auth_users_reset_password(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password0)\n\ntests/test_api/test_api.py:624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721097023218,
        "stop" : 1721097023803,
        "duration" : 585
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 13,
        "skipped" : 0,
        "passed" : 81,
        "unknown" : 0,
        "total" : 94
      },
      "items" : [ {
        "uid" : "3a84895f8133e5b0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/3a84895f8133e5b0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010814302,
          "stop" : 1721010814807,
          "duration" : 505
        }
      }, {
        "uid" : "7ef4ab16a96cbda0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/7ef4ab16a96cbda0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924629769,
          "stop" : 1720924630290,
          "duration" : 521
        }
      }, {
        "uid" : "c671359d997a691a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/c671359d997a691a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837661577,
          "stop" : 1720837662298,
          "duration" : 721
        }
      }, {
        "uid" : "dbdc71f2b2f3e698",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/dbdc71f2b2f3e698",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751296434,
          "stop" : 1720751297016,
          "duration" : 582
        }
      }, {
        "uid" : "ef5d26469cf557b4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/ef5d26469cf557b4",
        "status" : "passed",
        "time" : {
          "start" : 1720665350876,
          "stop" : 1720665363294,
          "duration" : 12418
        }
      }, {
        "uid" : "b6d9ef3ca7a8efff",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/b6d9ef3ca7a8efff",
        "status" : "passed",
        "time" : {
          "start" : 1720578836808,
          "stop" : 1720578849041,
          "duration" : 12233
        }
      }, {
        "uid" : "4dd308b08e0dacae",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/4dd308b08e0dacae",
        "status" : "passed",
        "time" : {
          "start" : 1720492447162,
          "stop" : 1720492459523,
          "duration" : 12361
        }
      }, {
        "uid" : "f27db60b616d3005",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/f27db60b616d3005",
        "status" : "passed",
        "time" : {
          "start" : 1720406162728,
          "stop" : 1720406175346,
          "duration" : 12618
        }
      }, {
        "uid" : "af4e60569b197931",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/af4e60569b197931",
        "status" : "passed",
        "time" : {
          "start" : 1720319797098,
          "stop" : 1720319809114,
          "duration" : 12016
        }
      }, {
        "uid" : "b7f1dd6e840dd917",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/b7f1dd6e840dd917",
        "status" : "passed",
        "time" : {
          "start" : 1720232982009,
          "stop" : 1720232994250,
          "duration" : 12241
        }
      }, {
        "uid" : "727758acede1b934",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/727758acede1b934",
        "status" : "passed",
        "time" : {
          "start" : 1720146715006,
          "stop" : 1720146735254,
          "duration" : 20248
        }
      }, {
        "uid" : "e422c2838078b98e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/e422c2838078b98e",
        "status" : "passed",
        "time" : {
          "start" : 1720060396910,
          "stop" : 1720060409129,
          "duration" : 12219
        }
      }, {
        "uid" : "e2c1733170f23994",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/e2c1733170f23994",
        "status" : "passed",
        "time" : {
          "start" : 1719973900608,
          "stop" : 1719973912958,
          "duration" : 12350
        }
      }, {
        "uid" : "245af9cd8206ab5e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/245af9cd8206ab5e",
        "status" : "passed",
        "time" : {
          "start" : 1719887565545,
          "stop" : 1719887585436,
          "duration" : 19891
        }
      }, {
        "uid" : "1ec2a40f94aaa197",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/1ec2a40f94aaa197",
        "status" : "passed",
        "time" : {
          "start" : 1719801584223,
          "stop" : 1719801596591,
          "duration" : 12368
        }
      }, {
        "uid" : "e73a11db7854cf13",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/e73a11db7854cf13",
        "status" : "passed",
        "time" : {
          "start" : 1719715003872,
          "stop" : 1719715016033,
          "duration" : 12161
        }
      }, {
        "uid" : "b0dfce320bc0faf8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/b0dfce320bc0faf8",
        "status" : "passed",
        "time" : {
          "start" : 1719628349164,
          "stop" : 1719628361704,
          "duration" : 12540
        }
      }, {
        "uid" : "3805eff6414494d3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/3805eff6414494d3",
        "status" : "passed",
        "time" : {
          "start" : 1719542028373,
          "stop" : 1719542040591,
          "duration" : 12218
        }
      }, {
        "uid" : "faebc2e4028823ff",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/faebc2e4028823ff",
        "status" : "passed",
        "time" : {
          "start" : 1719455503467,
          "stop" : 1719455515788,
          "duration" : 12321
        }
      }, {
        "uid" : "85e9d443f49ffa57",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/85e9d443f49ffa57",
        "status" : "passed",
        "time" : {
          "start" : 1719369184249,
          "stop" : 1719369196894,
          "duration" : 12645
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "68d525d88fa043d8.json",
  "parameterValues" : [ ]
}