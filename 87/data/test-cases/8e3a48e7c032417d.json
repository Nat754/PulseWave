{
  "uid" : "8e3a48e7c032417d",
  "name" : "PUT Обновить доску",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_workspace_id_boards_id",
  "historyId" : "059274d599378196954cee6d2bc38e47",
  "time" : {
    "start" : 1721096993820,
    "stop" : 1721096994408,
    "duration" : 588
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aa9130>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f29784134d0>\n\n    @allure.title(\"PUT Обновить доску\")\n    def test_put_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721096968249,
      "stop" : 1721096968249,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721096968232,
      "stop" : 1721096968249,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721096993820,
      "stop" : 1721096993820,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aa9130>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f29784134d0>\n\n    @allure.title(\"PUT Обновить доску\")\n    def test_put_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721096993820,
        "stop" : 1721096994407,
        "duration" : 587
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 6,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 94
      },
      "items" : [ {
        "uid" : "45327dfab6c38661",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/45327dfab6c38661",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010787030,
          "stop" : 1721010787981,
          "duration" : 951
        }
      }, {
        "uid" : "569677c6e80acce4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/569677c6e80acce4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924601411,
          "stop" : 1720924601935,
          "duration" : 524
        }
      }, {
        "uid" : "45937241c396e9f8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/45937241c396e9f8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837629008,
          "stop" : 1720837629728,
          "duration" : 720
        }
      }, {
        "uid" : "aad8cdcf5416ebba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/aad8cdcf5416ebba",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751269024,
          "stop" : 1720751269605,
          "duration" : 581
        }
      }, {
        "uid" : "13a34889da6dea08",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/13a34889da6dea08",
        "status" : "passed",
        "time" : {
          "start" : 1720665081667,
          "stop" : 1720665086977,
          "duration" : 5310
        }
      }, {
        "uid" : "763dceb58d2eea9a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/763dceb58d2eea9a",
        "status" : "passed",
        "time" : {
          "start" : 1720578543480,
          "stop" : 1720578549647,
          "duration" : 6167
        }
      }, {
        "uid" : "fbf22aa072a1a535",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/fbf22aa072a1a535",
        "status" : "passed",
        "time" : {
          "start" : 1720492172036,
          "stop" : 1720492177683,
          "duration" : 5647
        }
      }, {
        "uid" : "9529c05c7c96c217",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/9529c05c7c96c217",
        "status" : "passed",
        "time" : {
          "start" : 1720405812592,
          "stop" : 1720405819466,
          "duration" : 6874
        }
      }, {
        "uid" : "d0d543fa445950f5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/d0d543fa445950f5",
        "status" : "passed",
        "time" : {
          "start" : 1720319524222,
          "stop" : 1720319529532,
          "duration" : 5310
        }
      }, {
        "uid" : "63ad2bbf5d0d2d69",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/63ad2bbf5d0d2d69",
        "status" : "passed",
        "time" : {
          "start" : 1720232714984,
          "stop" : 1720232720550,
          "duration" : 5566
        }
      }, {
        "uid" : "1beba4eede37b809",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/1beba4eede37b809",
        "status" : "passed",
        "time" : {
          "start" : 1720146448454,
          "stop" : 1720146453822,
          "duration" : 5368
        }
      }, {
        "uid" : "3f2c47904ac04a4e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/3f2c47904ac04a4e",
        "status" : "passed",
        "time" : {
          "start" : 1720060125220,
          "stop" : 1720060130712,
          "duration" : 5492
        }
      }, {
        "uid" : "e9f4c5b170e4cfb5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/e9f4c5b170e4cfb5",
        "status" : "passed",
        "time" : {
          "start" : 1719973632400,
          "stop" : 1719973637782,
          "duration" : 5382
        }
      }, {
        "uid" : "4742ee8af1e91b64",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/4742ee8af1e91b64",
        "status" : "passed",
        "time" : {
          "start" : 1719887298333,
          "stop" : 1719887303449,
          "duration" : 5116
        }
      }, {
        "uid" : "4be7d577755dbb29",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/4be7d577755dbb29",
        "status" : "passed",
        "time" : {
          "start" : 1719801317602,
          "stop" : 1719801322834,
          "duration" : 5232
        }
      }, {
        "uid" : "515bf6b8c3588dad",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/515bf6b8c3588dad",
        "status" : "passed",
        "time" : {
          "start" : 1719714738617,
          "stop" : 1719714744099,
          "duration" : 5482
        }
      }, {
        "uid" : "a552553f66dc374c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/a552553f66dc374c",
        "status" : "passed",
        "time" : {
          "start" : 1719628001007,
          "stop" : 1719628008123,
          "duration" : 7116
        }
      }, {
        "uid" : "38584c27f0ceeeb0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/38584c27f0ceeeb0",
        "status" : "passed",
        "time" : {
          "start" : 1719541745610,
          "stop" : 1719541751265,
          "duration" : 5655
        }
      }, {
        "uid" : "63fe2f9e387630a0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/63fe2f9e387630a0",
        "status" : "passed",
        "time" : {
          "start" : 1719455234259,
          "stop" : 1719455240047,
          "duration" : 5788
        }
      }, {
        "uid" : "879152337a46ebfc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/879152337a46ebfc",
        "status" : "passed",
        "time" : {
          "start" : 1719368855577,
          "stop" : 1719368862326,
          "duration" : 6749
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "8e3a48e7c032417d.json",
  "parameterValues" : [ ]
}