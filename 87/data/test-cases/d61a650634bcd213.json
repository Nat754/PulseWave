{
  "uid" : "d61a650634bcd213",
  "name" : "PUT Отметить прочтение уведомления",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_notification_id_read",
  "historyId" : "f49cd1c81b22b0a0b60727c97c258746",
  "time" : {
    "start" : 1721097008104,
    "stop" : 1721097008684,
    "duration" : 580
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aad0a0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f297842d2e0>\n\n    @allure.title(\"PUT Отметить прочтение уведомления\")\n    def test_put_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721096968249,
      "stop" : 1721096968249,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721096968232,
      "stop" : 1721096968249,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721097008104,
      "stop" : 1721097008104,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2979893950>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f2978aad0a0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f297842d2e0>\n\n    @allure.title(\"PUT Отметить прочтение уведомления\")\n    def test_put_api_notification_id_read(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email_auth, password0)\n\ntests/test_api/test_api.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721097008104,
        "stop" : 1721097008684,
        "duration" : 580
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 8,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 94
      },
      "items" : [ {
        "uid" : "1031042cc1414780",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/1031042cc1414780",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010800880,
          "stop" : 1721010801392,
          "duration" : 512
        }
      }, {
        "uid" : "cd35da6a6ede4098",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/cd35da6a6ede4098",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924616053,
          "stop" : 1720924616575,
          "duration" : 522
        }
      }, {
        "uid" : "90d32b958fdd0066",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/90d32b958fdd0066",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837644476,
          "stop" : 1720837645195,
          "duration" : 719
        }
      }, {
        "uid" : "268844e4edbe913d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/268844e4edbe913d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751282303,
          "stop" : 1720751282892,
          "duration" : 589
        }
      }, {
        "uid" : "4496c0929962b438",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/4496c0929962b438",
        "status" : "passed",
        "time" : {
          "start" : 1720665209408,
          "stop" : 1720665211544,
          "duration" : 2136
        }
      }, {
        "uid" : "6b5618bed7a62cb4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/6b5618bed7a62cb4",
        "status" : "passed",
        "time" : {
          "start" : 1720578684391,
          "stop" : 1720578686893,
          "duration" : 2502
        }
      }, {
        "uid" : "3f6ec707744e7d90",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/3f6ec707744e7d90",
        "status" : "passed",
        "time" : {
          "start" : 1720492301052,
          "stop" : 1720492303280,
          "duration" : 2228
        }
      }, {
        "uid" : "640552c732e6e16",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/640552c732e6e16",
        "status" : "passed",
        "time" : {
          "start" : 1720405980652,
          "stop" : 1720405983771,
          "duration" : 3119
        }
      }, {
        "uid" : "8856b9325457a575",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/8856b9325457a575",
        "status" : "passed",
        "time" : {
          "start" : 1720319654609,
          "stop" : 1720319657006,
          "duration" : 2397
        }
      }, {
        "uid" : "71b3ff4a049db3df",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/71b3ff4a049db3df",
        "status" : "passed",
        "time" : {
          "start" : 1720232841677,
          "stop" : 1720232844103,
          "duration" : 2426
        }
      }, {
        "uid" : "b5f116d8def569c1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/b5f116d8def569c1",
        "status" : "passed",
        "time" : {
          "start" : 1720146576797,
          "stop" : 1720146578983,
          "duration" : 2186
        }
      }, {
        "uid" : "1bbf1ca62ed5310b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/1bbf1ca62ed5310b",
        "status" : "passed",
        "time" : {
          "start" : 1720060254121,
          "stop" : 1720060256367,
          "duration" : 2246
        }
      }, {
        "uid" : "7b9d83092106edf3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/7b9d83092106edf3",
        "status" : "passed",
        "time" : {
          "start" : 1719973761050,
          "stop" : 1719973763247,
          "duration" : 2197
        }
      }, {
        "uid" : "4a8177b21336df1b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/4a8177b21336df1b",
        "status" : "passed",
        "time" : {
          "start" : 1719887426322,
          "stop" : 1719887428691,
          "duration" : 2369
        }
      }, {
        "uid" : "9b1d8547908486d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/9b1d8547908486d",
        "status" : "passed",
        "time" : {
          "start" : 1719801445213,
          "stop" : 1719801447432,
          "duration" : 2219
        }
      }, {
        "uid" : "b968193fbcb9f422",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/b968193fbcb9f422",
        "status" : "passed",
        "time" : {
          "start" : 1719714865614,
          "stop" : 1719714867853,
          "duration" : 2239
        }
      }, {
        "uid" : "5e53e7dde4658544",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/5e53e7dde4658544",
        "status" : "passed",
        "time" : {
          "start" : 1719628168009,
          "stop" : 1719628171014,
          "duration" : 3005
        }
      }, {
        "uid" : "26b756e24f941a5d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/26b756e24f941a5d",
        "status" : "passed",
        "time" : {
          "start" : 1719541880251,
          "stop" : 1719541882623,
          "duration" : 2372
        }
      }, {
        "uid" : "5f156e6cfb74c23f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/5f156e6cfb74c23f",
        "status" : "passed",
        "time" : {
          "start" : 1719455363043,
          "stop" : 1719455365499,
          "duration" : 2456
        }
      }, {
        "uid" : "4f8109c99a2b0628",
        "reportUrl" : "https://Nat754.github.io/PulseWave/67//#testresult/4f8109c99a2b0628",
        "status" : "passed",
        "time" : {
          "start" : 1719369013918,
          "stop" : 1719369016864,
          "duration" : 2946
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "d61a650634bcd213.json",
  "parameterValues" : [ ]
}