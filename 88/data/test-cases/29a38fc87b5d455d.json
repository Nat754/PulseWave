{
  "uid" : "29a38fc87b5d455d",
  "name" : "POST Создать задачу",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_column_id_task",
  "historyId" : "b3a0dec94fba2069f242de52bffa8877",
  "time" : {
    "start" : 1721183347819,
    "stop" : 1721183348404,
    "duration" : 585
  },
  "description" : "\n        responsible: Список ответственных пользователей. Передается массивом из id,например {\"responsible\": [1,2,3]}\n        deadline: Срок выполнения задачи\n        description: Описание\n        priority: Приоритет, число от 0 до 3, где 0 - высочайший приоритет\n        color_mark: Цвет метки\n        name_mark: Название метки\n        ",
  "descriptionHtml" : "<pre><code>    responsible: Список ответственных пользователей. Передается массивом из id,например {&quot;responsible&quot;: [1,2,3]}\n    deadline: Срок выполнения задачи\n    description: Описание\n    priority: Приоритет, число от 0 до 3, где 0 - высочайший приоритет\n    color_mark: Цвет метки\n    name_mark: Название метки\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a47a2090>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a413bb60>\n\n    @allure.title(\"POST Создать задачу\")\n    def test_post_api_column_id_task(self, use_api_base):\n        \"\"\"\n        responsible: Список ответственных пользователей. Передается массивом из id,например {\"responsible\": [1,2,3]}\n        deadline: Срок выполнения задачи\n        description: Описание\n        priority: Приоритет, число от 0 до 3, где 0 - высочайший приоритет\n        color_mark: Цвет метки\n        name_mark: Название метки\n        \"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721183314552,
      "stop" : 1721183314569,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721183314569,
      "stop" : 1721183314569,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721183347818,
      "stop" : 1721183347818,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        responsible: Список ответственных пользователей. Передается массивом из id,например {\"responsible\": [1,2,3]}\n        deadline: Срок выполнения задачи\n        description: Описание\n        priority: Приоритет, число от 0 до 3, где 0 - высочайший приоритет\n        color_mark: Цвет метки\n        name_mark: Название метки\n        ",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a47a2090>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a413bb60>\n\n    @allure.title(\"POST Создать задачу\")\n    def test_post_api_column_id_task(self, use_api_base):\n        \"\"\"\n        responsible: Список ответственных пользователей. Передается массивом из id,например {\"responsible\": [1,2,3]}\n        deadline: Срок выполнения задачи\n        description: Описание\n        priority: Приоритет, число от 0 до 3, где 0 - высочайший приоритет\n        color_mark: Цвет метки\n        name_mark: Название метки\n        \"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721183347819,
        "stop" : 1721183348404,
        "duration" : 585
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2301-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 95
      },
      "items" : [ {
        "uid" : "a476efb4c678c5ac",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/a476efb4c678c5ac",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097001010,
          "stop" : 1721097001594,
          "duration" : 584
        }
      }, {
        "uid" : "aad1006d7494c47f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/aad1006d7494c47f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010793609,
          "stop" : 1721010794376,
          "duration" : 767
        }
      }, {
        "uid" : "a5977d55ebac9181",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/a5977d55ebac9181",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924608297,
          "stop" : 1720924608818,
          "duration" : 521
        }
      }, {
        "uid" : "62f5f5cb543a176b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/62f5f5cb543a176b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837635968,
          "stop" : 1720837636670,
          "duration" : 702
        }
      }, {
        "uid" : "15ad70653eb5b2e6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/15ad70653eb5b2e6",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751275266,
          "stop" : 1720751275851,
          "duration" : 585
        }
      }, {
        "uid" : "e7baeb9cb7be29c0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/e7baeb9cb7be29c0",
        "status" : "passed",
        "time" : {
          "start" : 1720665133015,
          "stop" : 1720665140848,
          "duration" : 7833
        }
      }, {
        "uid" : "c5fc6a5fe9307c31",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/c5fc6a5fe9307c31",
        "status" : "passed",
        "time" : {
          "start" : 1720578600436,
          "stop" : 1720578609619,
          "duration" : 9183
        }
      }, {
        "uid" : "d0ac6827b6c7efa4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/d0ac6827b6c7efa4",
        "status" : "passed",
        "time" : {
          "start" : 1720492224327,
          "stop" : 1720492232756,
          "duration" : 8429
        }
      }, {
        "uid" : "6e133d88376a4fea",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/6e133d88376a4fea",
        "status" : "passed",
        "time" : {
          "start" : 1720405880950,
          "stop" : 1720405891286,
          "duration" : 10336
        }
      }, {
        "uid" : "41b1d35895c7a3f5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/41b1d35895c7a3f5",
        "status" : "passed",
        "time" : {
          "start" : 1720319577733,
          "stop" : 1720319585710,
          "duration" : 7977
        }
      }, {
        "uid" : "42eb30765e1d1302",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/42eb30765e1d1302",
        "status" : "passed",
        "time" : {
          "start" : 1720232766351,
          "stop" : 1720232774192,
          "duration" : 7841
        }
      }, {
        "uid" : "e4ea4ab290cc8f9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/e4ea4ab290cc8f9",
        "status" : "passed",
        "time" : {
          "start" : 1720146500926,
          "stop" : 1720146508391,
          "duration" : 7465
        }
      }, {
        "uid" : "c279736ee725d0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/c279736ee725d0c",
        "status" : "passed",
        "time" : {
          "start" : 1720060177117,
          "stop" : 1720060185075,
          "duration" : 7958
        }
      }, {
        "uid" : "499f68fc62ba9dfd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/499f68fc62ba9dfd",
        "status" : "passed",
        "time" : {
          "start" : 1719973684764,
          "stop" : 1719973692748,
          "duration" : 7984
        }
      }, {
        "uid" : "d893743893911008",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/d893743893911008",
        "status" : "passed",
        "time" : {
          "start" : 1719887349353,
          "stop" : 1719887356797,
          "duration" : 7444
        }
      }, {
        "uid" : "a37917b8e188c80f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/a37917b8e188c80f",
        "status" : "passed",
        "time" : {
          "start" : 1719801369723,
          "stop" : 1719801377343,
          "duration" : 7620
        }
      }, {
        "uid" : "1ac416a4d148fa4f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/1ac416a4d148fa4f",
        "status" : "passed",
        "time" : {
          "start" : 1719714790248,
          "stop" : 1719714797527,
          "duration" : 7279
        }
      }, {
        "uid" : "1943e58c25eeb160",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/1943e58c25eeb160",
        "status" : "passed",
        "time" : {
          "start" : 1719628067934,
          "stop" : 1719628078222,
          "duration" : 10288
        }
      }, {
        "uid" : "32cea0411e8ccf0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/32cea0411e8ccf0c",
        "status" : "passed",
        "time" : {
          "start" : 1719541799666,
          "stop" : 1719541808140,
          "duration" : 8474
        }
      }, {
        "uid" : "7e8f733f272813c9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/7e8f733f272813c9",
        "status" : "passed",
        "time" : {
          "start" : 1719455286648,
          "stop" : 1719455294742,
          "duration" : 8094
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "29a38fc87b5d455d.json",
  "parameterValues" : [ ]
}