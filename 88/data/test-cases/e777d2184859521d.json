{
  "uid" : "e777d2184859521d",
  "name" : "POST Создать комментарий",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_task_id_comment",
  "historyId" : "f479f8818ad48f4137d135e8b9b3a698",
  "time" : {
    "start" : 1721183356245,
    "stop" : 1721183356829,
    "duration" : 584
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a47a4ef0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a414ac60>\n\n    @allure.title(\"POST Создать комментарий\")\n    def test_post_api_task_id_comment(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721183314552,
      "stop" : 1721183314569,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721183356244,
      "stop" : 1721183356244,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721183314569,
      "stop" : 1721183314569,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a47a4ef0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a414ac60>\n\n    @allure.title(\"POST Создать комментарий\")\n    def test_post_api_task_id_comment(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:434: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721183356245,
        "stop" : 1721183356829,
        "duration" : 584
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2301-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 7,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 95
      },
      "items" : [ {
        "uid" : "f52072fe09eb3033",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/f52072fe09eb3033",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097009387,
          "stop" : 1721097009973,
          "duration" : 586
        }
      }, {
        "uid" : "863be6ec0bd94875",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/863be6ec0bd94875",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010802009,
          "stop" : 1721010802757,
          "duration" : 748
        }
      }, {
        "uid" : "4ff8a4f957bfd7c4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/4ff8a4f957bfd7c4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924617209,
          "stop" : 1720924617730,
          "duration" : 521
        }
      }, {
        "uid" : "2e9ffe724fc2e7e5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/2e9ffe724fc2e7e5",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837646028,
          "stop" : 1720837646749,
          "duration" : 721
        }
      }, {
        "uid" : "f282bdc7bd2e8e29",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/f282bdc7bd2e8e29",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751283593,
          "stop" : 1720751284172,
          "duration" : 579
        }
      }, {
        "uid" : "75ff306ef5799459",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/75ff306ef5799459",
        "status" : "passed",
        "time" : {
          "start" : 1720665213601,
          "stop" : 1720665223292,
          "duration" : 9691
        }
      }, {
        "uid" : "38da46b61ca7dfaa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/38da46b61ca7dfaa",
        "status" : "passed",
        "time" : {
          "start" : 1720578688781,
          "stop" : 1720578699295,
          "duration" : 10514
        }
      }, {
        "uid" : "112c394f8590be0d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/112c394f8590be0d",
        "status" : "passed",
        "time" : {
          "start" : 1720492305029,
          "stop" : 1720492314430,
          "duration" : 9401
        }
      }, {
        "uid" : "d7c1b48bf2f0fa96",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/d7c1b48bf2f0fa96",
        "status" : "passed",
        "time" : {
          "start" : 1720405986195,
          "stop" : 1720405999037,
          "duration" : 12842
        }
      }, {
        "uid" : "e2f370bd346853e0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/e2f370bd346853e0",
        "status" : "passed",
        "time" : {
          "start" : 1720319659006,
          "stop" : 1720319668875,
          "duration" : 9869
        }
      }, {
        "uid" : "13cd61a006161c9f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/13cd61a006161c9f",
        "status" : "passed",
        "time" : {
          "start" : 1720232845796,
          "stop" : 1720232855272,
          "duration" : 9476
        }
      }, {
        "uid" : "630c1374ba4c207a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/630c1374ba4c207a",
        "status" : "passed",
        "time" : {
          "start" : 1720146580727,
          "stop" : 1720146590251,
          "duration" : 9524
        }
      }, {
        "uid" : "dbbff7bdf69d6eb0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/dbbff7bdf69d6eb0",
        "status" : "passed",
        "time" : {
          "start" : 1720060258091,
          "stop" : 1720060267736,
          "duration" : 9645
        }
      }, {
        "uid" : "d483e2fc4fde0e8d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/d483e2fc4fde0e8d",
        "status" : "passed",
        "time" : {
          "start" : 1719973764975,
          "stop" : 1719973774500,
          "duration" : 9525
        }
      }, {
        "uid" : "271368a5c9ca2aad",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/271368a5c9ca2aad",
        "status" : "passed",
        "time" : {
          "start" : 1719887430614,
          "stop" : 1719887440174,
          "duration" : 9560
        }
      }, {
        "uid" : "cd9fab3d44f4ec14",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/cd9fab3d44f4ec14",
        "status" : "passed",
        "time" : {
          "start" : 1719801449201,
          "stop" : 1719801458730,
          "duration" : 9529
        }
      }, {
        "uid" : "b4c73e3631bf48b6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/b4c73e3631bf48b6",
        "status" : "passed",
        "time" : {
          "start" : 1719714869470,
          "stop" : 1719714878801,
          "duration" : 9331
        }
      }, {
        "uid" : "d71827eca55e04ae",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/d71827eca55e04ae",
        "status" : "passed",
        "time" : {
          "start" : 1719628173282,
          "stop" : 1719628186093,
          "duration" : 12811
        }
      }, {
        "uid" : "b5d4ede68e7791c4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/b5d4ede68e7791c4",
        "status" : "passed",
        "time" : {
          "start" : 1719541884528,
          "stop" : 1719541894552,
          "duration" : 10024
        }
      }, {
        "uid" : "f3d1ccf43384fc51",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/f3d1ccf43384fc51",
        "status" : "passed",
        "time" : {
          "start" : 1719455367235,
          "stop" : 1719455376616,
          "duration" : 9381
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "e777d2184859521d.json",
  "parameterValues" : [ ]
}