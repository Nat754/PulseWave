{
  "uid" : "f5271548def29126",
  "name" : "POST Удаление приглашенного пользователей из РП",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace_id_kick_user",
  "historyId" : "05c66b2b87d252b9fb2dfede3cc6d9f8",
  "time" : {
    "start" : 1721183329698,
    "stop" : 1721183330285,
    "duration" : 587
  },
  "description" : "Удаление как из участников так и из приглашенных",
  "descriptionHtml" : "<p>Удаление как из участников так и из приглашенных</p>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a479a3c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a412ad50>\n\n    @allure.title(\"POST Удаление приглашенного пользователей из РП\")\n    def test_post_api_workspace_id_kick_user(self, use_api_base):\n        \"\"\"Удаление как из участников так и из приглашенных\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721183314552,
      "stop" : 1721183314569,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721183329698,
      "stop" : 1721183329698,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721183314569,
      "stop" : 1721183314569,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Удаление как из участников так и из приглашенных",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f42a55c3740>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f42a479a3c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f42a412ad50>\n\n    @allure.title(\"POST Удаление приглашенного пользователей из РП\")\n    def test_post_api_workspace_id_kick_user(self, use_api_base):\n        \"\"\"Удаление как из участников так и из приглашенных\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721183329698,
        "stop" : 1721183330284,
        "duration" : 586
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az768-641"
  }, {
    "name" : "thread",
    "value" : "2301-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 23,
        "skipped" : 0,
        "passed" : 72,
        "unknown" : 0,
        "total" : 95
      },
      "items" : [ {
        "uid" : "309f141d3b2f8b23",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/309f141d3b2f8b23",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096982934,
          "stop" : 1721096983713,
          "duration" : 779
        }
      }, {
        "uid" : "dc7e5ea4b384faf1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/dc7e5ea4b384faf1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010776538,
          "stop" : 1721010777379,
          "duration" : 841
        }
      }, {
        "uid" : "71f69139e462c472",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/71f69139e462c472",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924590495,
          "stop" : 1720924591392,
          "duration" : 897
        }
      }, {
        "uid" : "37be181a65b8ae3d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/37be181a65b8ae3d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837617018,
          "stop" : 1720837617720,
          "duration" : 702
        }
      }, {
        "uid" : "fc91508df7bed34c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/fc91508df7bed34c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751256148,
          "stop" : 1720751257650,
          "duration" : 1502
        }
      }, {
        "uid" : "97164c9df19995fe",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/97164c9df19995fe",
        "status" : "passed",
        "time" : {
          "start" : 1720665022065,
          "stop" : 1720665025147,
          "duration" : 3082
        }
      }, {
        "uid" : "4aeb698e86100a56",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/4aeb698e86100a56",
        "status" : "passed",
        "time" : {
          "start" : 1720578481453,
          "stop" : 1720578485209,
          "duration" : 3756
        }
      }, {
        "uid" : "24185d5d99be456b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/24185d5d99be456b",
        "status" : "passed",
        "time" : {
          "start" : 1720492109176,
          "stop" : 1720492112159,
          "duration" : 2983
        }
      }, {
        "uid" : "469136c2f9d38d10",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/469136c2f9d38d10",
        "status" : "passed",
        "time" : {
          "start" : 1720405735862,
          "stop" : 1720405739586,
          "duration" : 3724
        }
      }, {
        "uid" : "e2df52141700faa4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/e2df52141700faa4",
        "status" : "passed",
        "time" : {
          "start" : 1720319461864,
          "stop" : 1720319465739,
          "duration" : 3875
        }
      }, {
        "uid" : "854d63aabf1862ca",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/854d63aabf1862ca",
        "status" : "passed",
        "time" : {
          "start" : 1720232654379,
          "stop" : 1720232656865,
          "duration" : 2486
        }
      }, {
        "uid" : "dc5c009a7f030959",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/dc5c009a7f030959",
        "status" : "passed",
        "time" : {
          "start" : 1720146389610,
          "stop" : 1720146392450,
          "duration" : 2840
        }
      }, {
        "uid" : "4523ac77e766859e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/4523ac77e766859e",
        "status" : "passed",
        "time" : {
          "start" : 1720060061292,
          "stop" : 1720060063942,
          "duration" : 2650
        }
      }, {
        "uid" : "85f98769d805a7bd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/85f98769d805a7bd",
        "status" : "passed",
        "time" : {
          "start" : 1719973568661,
          "stop" : 1719973571741,
          "duration" : 3080
        }
      }, {
        "uid" : "d32cdd08bad943e6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/d32cdd08bad943e6",
        "status" : "passed",
        "time" : {
          "start" : 1719887239330,
          "stop" : 1719887242194,
          "duration" : 2864
        }
      }, {
        "uid" : "322d7309ac92d586",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/322d7309ac92d586",
        "status" : "passed",
        "time" : {
          "start" : 1719801257227,
          "stop" : 1719801260211,
          "duration" : 2984
        }
      }, {
        "uid" : "f279a30677272421",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/f279a30677272421",
        "status" : "passed",
        "time" : {
          "start" : 1719714674866,
          "stop" : 1719714677813,
          "duration" : 2947
        }
      }, {
        "uid" : "57141dd858ca6cdd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/57141dd858ca6cdd",
        "status" : "passed",
        "time" : {
          "start" : 1719627927393,
          "stop" : 1719627931832,
          "duration" : 4439
        }
      }, {
        "uid" : "d4c9c573123bd5f1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/d4c9c573123bd5f1",
        "status" : "passed",
        "time" : {
          "start" : 1719541684076,
          "stop" : 1719541687410,
          "duration" : 3334
        }
      }, {
        "uid" : "e8658a2fd74a33cc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/68//#testresult/e8658a2fd74a33cc",
        "status" : "passed",
        "time" : {
          "start" : 1719455173063,
          "stop" : 1719455176381,
          "duration" : 3318
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "f5271548def29126.json",
  "parameterValues" : [ ]
}