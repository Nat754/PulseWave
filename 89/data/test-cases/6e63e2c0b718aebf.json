{
  "uid" : "6e63e2c0b718aebf",
  "name" : "POST Подтверждение приглашения в РП",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace_confirm_invite",
  "historyId" : "c23dd85bddb9dc1409aaef04feeefb24",
  "time" : {
    "start" : 1721269701243,
    "stop" : 1721269701747,
    "duration" : 504
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5a7eb2b620>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f5a7dca0350>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f5a7d676450>\n\n    @allure.title(\"POST Подтверждение приглашения в РП\")\n    def test_post_api_workspace_confirm_invite(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721269701243,
      "stop" : 1721269701243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721269678993,
      "stop" : 1721269678993,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721269678976,
      "stop" : 1721269678993,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5a7eb2b620>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f5a7dca0350>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f5a7d676450>\n\n    @allure.title(\"POST Подтверждение приглашения в РП\")\n    def test_post_api_workspace_confirm_invite(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721269701243,
        "stop" : 1721269701747,
        "duration" : 504
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1215-390"
  }, {
    "name" : "thread",
    "value" : "2261-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 81,
        "unknown" : 0,
        "total" : 96
      },
      "items" : [ {
        "uid" : "85dd83397be43230",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/85dd83397be43230",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183338227,
          "stop" : 1721183338816,
          "duration" : 589
        }
      }, {
        "uid" : "9e08206aa6397334",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/9e08206aa6397334",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096991237,
          "stop" : 1721096991820,
          "duration" : 583
        }
      }, {
        "uid" : "e76f3ed97f3218b9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/e76f3ed97f3218b9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010784320,
          "stop" : 1721010785008,
          "duration" : 688
        }
      }, {
        "uid" : "dca6556dc5e45a99",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/dca6556dc5e45a99",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924598826,
          "stop" : 1720924599348,
          "duration" : 522
        }
      }, {
        "uid" : "4dfff2ee32346329",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/4dfff2ee32346329",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837625869,
          "stop" : 1720837626589,
          "duration" : 720
        }
      }, {
        "uid" : "9055b2cd4a496417",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/9055b2cd4a496417",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751265613,
          "stop" : 1720751266200,
          "duration" : 587
        }
      }, {
        "uid" : "efb1533a5e34b5c0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/efb1533a5e34b5c0",
        "status" : "passed",
        "time" : {
          "start" : 1720665051050,
          "stop" : 1720665068158,
          "duration" : 17108
        }
      }, {
        "uid" : "60a27bf0e6332f91",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/60a27bf0e6332f91",
        "status" : "passed",
        "time" : {
          "start" : 1720578512638,
          "stop" : 1720578529839,
          "duration" : 17201
        }
      }, {
        "uid" : "7d7ca7a853523859",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/7d7ca7a853523859",
        "status" : "passed",
        "time" : {
          "start" : 1720492141766,
          "stop" : 1720492159089,
          "duration" : 17323
        }
      }, {
        "uid" : "3a381b978a11f048",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/3a381b978a11f048",
        "status" : "passed",
        "time" : {
          "start" : 1720405775931,
          "stop" : 1720405795531,
          "duration" : 19600
        }
      }, {
        "uid" : "7704daa8294a1105",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/7704daa8294a1105",
        "status" : "passed",
        "time" : {
          "start" : 1720319494659,
          "stop" : 1720319511372,
          "duration" : 16713
        }
      }, {
        "uid" : "848508cfda1f51b8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/848508cfda1f51b8",
        "status" : "passed",
        "time" : {
          "start" : 1720232685192,
          "stop" : 1720232702193,
          "duration" : 17001
        }
      }, {
        "uid" : "764b11a127e45583",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/764b11a127e45583",
        "status" : "passed",
        "time" : {
          "start" : 1720146419534,
          "stop" : 1720146436317,
          "duration" : 16783
        }
      }, {
        "uid" : "fc2cb6736f1c3171",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/fc2cb6736f1c3171",
        "status" : "passed",
        "time" : {
          "start" : 1720060094520,
          "stop" : 1720060111586,
          "duration" : 17066
        }
      }, {
        "uid" : "c8aca4d828083af2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/c8aca4d828083af2",
        "status" : "passed",
        "time" : {
          "start" : 1719973601681,
          "stop" : 1719973618924,
          "duration" : 17243
        }
      }, {
        "uid" : "702150b41224021f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/702150b41224021f",
        "status" : "passed",
        "time" : {
          "start" : 1719887268503,
          "stop" : 1719887285225,
          "duration" : 16722
        }
      }, {
        "uid" : "fa5c080297a5f9c3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/fa5c080297a5f9c3",
        "status" : "passed",
        "time" : {
          "start" : 1719801286913,
          "stop" : 1719801304473,
          "duration" : 17560
        }
      }, {
        "uid" : "ae0a3e1d4693bc1e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/ae0a3e1d4693bc1e",
        "status" : "passed",
        "time" : {
          "start" : 1719714705171,
          "stop" : 1719714726113,
          "duration" : 20942
        }
      }, {
        "uid" : "9ff13f020e176fb5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/9ff13f020e176fb5",
        "status" : "passed",
        "time" : {
          "start" : 1719627965344,
          "stop" : 1719627984663,
          "duration" : 19319
        }
      }, {
        "uid" : "cf9f9a0a715bb197",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/cf9f9a0a715bb197",
        "status" : "passed",
        "time" : {
          "start" : 1719541714728,
          "stop" : 1719541731938,
          "duration" : 17210
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6e63e2c0b718aebf.json",
  "parameterValues" : [ ]
}