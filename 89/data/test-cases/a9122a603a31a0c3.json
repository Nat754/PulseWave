{
  "uid" : "a9122a603a31a0c3",
  "name" : "POST Регистрация ранее зарегистрированного пользователя",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_auth_user",
  "historyId" : "ce220593eb18c8976b98ac28948b279f",
  "time" : {
    "start" : 1721269695812,
    "stop" : 1721269696619,
    "duration" : 807
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f5a7eb2b620>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f5a7dc9e270>\n\n    @allure.title(\"POST Регистрация ранее зарегистрированного пользователя\")\n    def test_post_create_auth_user(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER)\n>       print(response.json())\n\ntests/test_api/test_api.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721269678993,
      "stop" : 1721269678993,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721269678976,
      "stop" : 1721269678993,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1215-390"
  }, {
    "name" : "thread",
    "value" : "2261-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 10,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 96
      },
      "items" : [ {
        "uid" : "8c396307834a034f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/8c396307834a034f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183331964,
          "stop" : 1721183332971,
          "duration" : 1007
        }
      }, {
        "uid" : "16dbe3f690bd35e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/16dbe3f690bd35e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096986049,
          "stop" : 1721096986634,
          "duration" : 585
        }
      }, {
        "uid" : "d83c4d499c42a19c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/d83c4d499c42a19c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010779230,
          "stop" : 1721010779916,
          "duration" : 686
        }
      }, {
        "uid" : "da69634b7e1d6926",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/da69634b7e1d6926",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924593243,
          "stop" : 1720924594159,
          "duration" : 916
        }
      }, {
        "uid" : "433c20ce3bcbb65b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/433c20ce3bcbb65b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837619329,
          "stop" : 1720837620247,
          "duration" : 918
        }
      }, {
        "uid" : "d44011d5af5e2a20",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/d44011d5af5e2a20",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751259812,
          "stop" : 1720751261229,
          "duration" : 1417
        }
      }, {
        "uid" : "85e1092ab99eeccb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/85e1092ab99eeccb",
        "status" : "passed",
        "time" : {
          "start" : 1720665031243,
          "stop" : 1720665031764,
          "duration" : 521
        }
      }, {
        "uid" : "aac0d0c7e490a7c6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/aac0d0c7e490a7c6",
        "status" : "passed",
        "time" : {
          "start" : 1720578492908,
          "stop" : 1720578493521,
          "duration" : 613
        }
      }, {
        "uid" : "ef666b52649729c3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/ef666b52649729c3",
        "status" : "passed",
        "time" : {
          "start" : 1720492119993,
          "stop" : 1720492120893,
          "duration" : 900
        }
      }, {
        "uid" : "d759bec3ac150370",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/d759bec3ac150370",
        "status" : "passed",
        "time" : {
          "start" : 1720405750765,
          "stop" : 1720405752128,
          "duration" : 1363
        }
      }, {
        "uid" : "ead42bbb929745bd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/ead42bbb929745bd",
        "status" : "passed",
        "time" : {
          "start" : 1720319473397,
          "stop" : 1720319474319,
          "duration" : 922
        }
      }, {
        "uid" : "bf44923da7b27a7b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/bf44923da7b27a7b",
        "status" : "passed",
        "time" : {
          "start" : 1720232664704,
          "stop" : 1720232665486,
          "duration" : 782
        }
      }, {
        "uid" : "532625c7d09848f6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/532625c7d09848f6",
        "status" : "passed",
        "time" : {
          "start" : 1720146399764,
          "stop" : 1720146400290,
          "duration" : 526
        }
      }, {
        "uid" : "c72c2abf871eea0a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/c72c2abf871eea0a",
        "status" : "passed",
        "time" : {
          "start" : 1720060073683,
          "stop" : 1720060074226,
          "duration" : 543
        }
      }, {
        "uid" : "f861c339878e062e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/f861c339878e062e",
        "status" : "passed",
        "time" : {
          "start" : 1719973579822,
          "stop" : 1719973580739,
          "duration" : 917
        }
      }, {
        "uid" : "bd60186b0f4a594f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/bd60186b0f4a594f",
        "status" : "passed",
        "time" : {
          "start" : 1719887249831,
          "stop" : 1719887250358,
          "duration" : 527
        }
      }, {
        "uid" : "5a12a6d3a1ed7961",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/5a12a6d3a1ed7961",
        "status" : "passed",
        "time" : {
          "start" : 1719801267211,
          "stop" : 1719801267913,
          "duration" : 702
        }
      }, {
        "uid" : "58b709d0dbef1ad6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/58b709d0dbef1ad6",
        "status" : "passed",
        "time" : {
          "start" : 1719714685530,
          "stop" : 1719714686068,
          "duration" : 538
        }
      }, {
        "uid" : "93c169d489476703",
        "reportUrl" : "https://Nat754.github.io/PulseWave/70//#testresult/93c169d489476703",
        "status" : "passed",
        "time" : {
          "start" : 1719627941601,
          "stop" : 1719627942400,
          "duration" : 799
        }
      }, {
        "uid" : "cccf2bb4bcce973c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/69//#testresult/cccf2bb4bcce973c",
        "status" : "passed",
        "time" : {
          "start" : 1719541694493,
          "stop" : 1719541695082,
          "duration" : 589
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "a9122a603a31a0c3.json",
  "parameterValues" : [ ]
}