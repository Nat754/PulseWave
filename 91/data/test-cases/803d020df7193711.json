{
  "uid" : "803d020df7193711",
  "name" : "GET Информация о конкретной доске",
  "fullName" : "tests.test_api.test_api.TestAPI#test_get_api_workspace_id_boards_id",
  "historyId" : "598466f1e967902f5c12e56dfbd26f4c",
  "time" : {
    "start" : 1721442355811,
    "stop" : 1721442356404,
    "duration" : 593
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2767671e80>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27665a8950>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2765f2c4d0>\n\n    @allure.title(\"GET Информация о конкретной доске\")\n    def test_get_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721442355810,
      "stop" : 1721442355810,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721442329930,
      "stop" : 1721442329947,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721442329947,
      "stop" : 1721442329947,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2767671e80>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27665a8950>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2765f2c4d0>\n\n    @allure.title(\"GET Информация о конкретной доске\")\n    def test_get_api_workspace_id_boards_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721442355811,
        "stop" : 1721442356403,
        "duration" : 592
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1205-817"
  }, {
    "name" : "thread",
    "value" : "2323-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 10,
        "skipped" : 28,
        "passed" : 60,
        "unknown" : 0,
        "total" : 98
      },
      "items" : [ {
        "uid" : "42fa1e19e01d8d3a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/42fa1e19e01d8d3a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356135793,
          "stop" : 1721356136573,
          "duration" : 780
        }
      }, {
        "uid" : "e58ea9bfa983868a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/e58ea9bfa983868a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269703610,
          "stop" : 1721269704113,
          "duration" : 503
        }
      }, {
        "uid" : "98b7788fcba1655",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/98b7788fcba1655",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183340186,
          "stop" : 1721183340774,
          "duration" : 588
        }
      }, {
        "uid" : "8c0304a2b0634f9d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/8c0304a2b0634f9d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096993178,
          "stop" : 1721096993765,
          "duration" : 587
        }
      }, {
        "uid" : "48170fcf4c8d8ef9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/48170fcf4c8d8ef9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010786206,
          "stop" : 1721010786976,
          "duration" : 770
        }
      }, {
        "uid" : "4e0e5fefa56a05dc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/4e0e5fefa56a05dc",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924600830,
          "stop" : 1720924601358,
          "duration" : 528
        }
      }, {
        "uid" : "95d83ef24b32ca70",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/95d83ef24b32ca70",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837628232,
          "stop" : 1720837628952,
          "duration" : 720
        }
      }, {
        "uid" : "b9e463b3edea615f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/b9e463b3edea615f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751268387,
          "stop" : 1720751268970,
          "duration" : 583
        }
      }, {
        "uid" : "1cafc847135c57da",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/1cafc847135c57da",
        "status" : "passed",
        "time" : {
          "start" : 1720665075917,
          "stop" : 1720665081665,
          "duration" : 5748
        }
      }, {
        "uid" : "3d0538a1f4f96e2b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/3d0538a1f4f96e2b",
        "status" : "passed",
        "time" : {
          "start" : 1720578537519,
          "stop" : 1720578543478,
          "duration" : 5959
        }
      }, {
        "uid" : "90b560a9de68189d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/90b560a9de68189d",
        "status" : "passed",
        "time" : {
          "start" : 1720492166918,
          "stop" : 1720492172034,
          "duration" : 5116
        }
      }, {
        "uid" : "263ef3d35d824290",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/263ef3d35d824290",
        "status" : "passed",
        "time" : {
          "start" : 1720405805616,
          "stop" : 1720405812589,
          "duration" : 6973
        }
      }, {
        "uid" : "c1277b7604b50537",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/c1277b7604b50537",
        "status" : "passed",
        "time" : {
          "start" : 1720319518690,
          "stop" : 1720319524220,
          "duration" : 5530
        }
      }, {
        "uid" : "4ef584d2ea0ac6f8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/4ef584d2ea0ac6f8",
        "status" : "passed",
        "time" : {
          "start" : 1720232709583,
          "stop" : 1720232714981,
          "duration" : 5398
        }
      }, {
        "uid" : "1d5da14cd34aff33",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/1d5da14cd34aff33",
        "status" : "passed",
        "time" : {
          "start" : 1720146443010,
          "stop" : 1720146448452,
          "duration" : 5442
        }
      }, {
        "uid" : "2bb31fc570b0a1f4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/2bb31fc570b0a1f4",
        "status" : "passed",
        "time" : {
          "start" : 1720060118852,
          "stop" : 1720060125218,
          "duration" : 6366
        }
      }, {
        "uid" : "924d63f975e6cb08",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/924d63f975e6cb08",
        "status" : "passed",
        "time" : {
          "start" : 1719973627289,
          "stop" : 1719973632398,
          "duration" : 5109
        }
      }, {
        "uid" : "b4951013d70d332d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/b4951013d70d332d",
        "status" : "passed",
        "time" : {
          "start" : 1719887293140,
          "stop" : 1719887298330,
          "duration" : 5190
        }
      }, {
        "uid" : "ea5d2bbbea9d90cb",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/ea5d2bbbea9d90cb",
        "status" : "passed",
        "time" : {
          "start" : 1719801311777,
          "stop" : 1719801317600,
          "duration" : 5823
        }
      }, {
        "uid" : "8daffc2c0a2c57ba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/8daffc2c0a2c57ba",
        "status" : "passed",
        "time" : {
          "start" : 1719714733147,
          "stop" : 1719714738615,
          "duration" : 5468
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "803d020df7193711.json",
  "parameterValues" : [ ]
}