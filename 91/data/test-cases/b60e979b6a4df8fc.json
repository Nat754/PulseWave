{
  "uid" : "b60e979b6a4df8fc",
  "name" : "POST Пригласить пользователя по email",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace_id_invite_user",
  "historyId" : "9b1c87f412dc0c1af080c2189c372ffd",
  "time" : {
    "start" : 1721442343243,
    "stop" : 1721442344281,
    "duration" : 1038
  },
  "description" : "Пользователи добавляются по одному. Если пользователя не существует, он будет создан",
  "descriptionHtml" : "<p>Пользователи добавляются по одному. Если пользователя не существует, он будет создан</p>\n",
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2767671e80>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27665a60c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2765f2ca10>\n\n    @allure.title(\"POST Пригласить пользователя по email\")\n    def test_post_api_workspace_id_invite_user(self, use_api_base):\n        \"\"\"Пользователи добавляются по одному. Если пользователя не существует, он будет создан\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721442329930,
      "stop" : 1721442329947,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721442329947,
      "stop" : 1721442329947,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721442343243,
      "stop" : 1721442343243,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "Пользователи добавляются по одному. Если пользователя не существует, он будет создан",
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f2767671e80>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f27665a60c0>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f2765f2ca10>\n\n    @allure.title(\"POST Пригласить пользователя по email\")\n    def test_post_api_workspace_id_invite_user(self, use_api_base):\n        \"\"\"Пользователи добавляются по одному. Если пользователя не существует, он будет создан\"\"\"\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721442343243,
        "stop" : 1721442344262,
        "duration" : 1019
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1205-817"
  }, {
    "name" : "thread",
    "value" : "2323-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 17,
        "skipped" : 0,
        "passed" : 81,
        "unknown" : 0,
        "total" : 98
      },
      "items" : [ {
        "uid" : "354bba2b23a64e9e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/354bba2b23a64e9e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356117183,
          "stop" : 1721356118393,
          "duration" : 1210
        }
      }, {
        "uid" : "d3e271403b0ccb06",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/d3e271403b0ccb06",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269691902,
          "stop" : 1721269692747,
          "duration" : 845
        }
      }, {
        "uid" : "d05e8254f7ae09fc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/d05e8254f7ae09fc",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183327869,
          "stop" : 1721183328850,
          "duration" : 981
        }
      }, {
        "uid" : "88f69515756db599",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/88f69515756db599",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096981294,
          "stop" : 1721096981893,
          "duration" : 599
        }
      }, {
        "uid" : "37d9171ccdff29ff",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/37d9171ccdff29ff",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010774981,
          "stop" : 1721010775670,
          "duration" : 689
        }
      }, {
        "uid" : "49ffb6584c482d18",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/49ffb6584c482d18",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924588155,
          "stop" : 1720924589483,
          "duration" : 1328
        }
      }, {
        "uid" : "8fe2f42c602c556e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/8fe2f42c602c556e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837614890,
          "stop" : 1720837616014,
          "duration" : 1124
        }
      }, {
        "uid" : "4b9aaa5e9adb9400",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/4b9aaa5e9adb9400",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751253051,
          "stop" : 1720751254508,
          "duration" : 1457
        }
      }, {
        "uid" : "411647c72e1c4cc5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/411647c72e1c4cc5",
        "status" : "passed",
        "time" : {
          "start" : 1720665006865,
          "stop" : 1720665018045,
          "duration" : 11180
        }
      }, {
        "uid" : "680261b6728e0450",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/680261b6728e0450",
        "status" : "passed",
        "time" : {
          "start" : 1720578473038,
          "stop" : 1720578477195,
          "duration" : 4157
        }
      }, {
        "uid" : "4986a2c9ba2bbd44",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/4986a2c9ba2bbd44",
        "status" : "passed",
        "time" : {
          "start" : 1720492094991,
          "stop" : 1720492102424,
          "duration" : 7433
        }
      }, {
        "uid" : "ff2226780b053648",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/ff2226780b053648",
        "status" : "passed",
        "time" : {
          "start" : 1720405723224,
          "stop" : 1720405731629,
          "duration" : 8405
        }
      }, {
        "uid" : "cd6f5c9014f21d3e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/cd6f5c9014f21d3e",
        "status" : "passed",
        "time" : {
          "start" : 1720319454548,
          "stop" : 1720319458406,
          "duration" : 3858
        }
      }, {
        "uid" : "d64678e9df9fe269",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/d64678e9df9fe269",
        "status" : "passed",
        "time" : {
          "start" : 1720232646640,
          "stop" : 1720232650120,
          "duration" : 3480
        }
      }, {
        "uid" : "ae819a942415d21d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/ae819a942415d21d",
        "status" : "passed",
        "time" : {
          "start" : 1720146382476,
          "stop" : 1720146386014,
          "duration" : 3538
        }
      }, {
        "uid" : "49973eabefc4df2b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/49973eabefc4df2b",
        "status" : "passed",
        "time" : {
          "start" : 1720060050291,
          "stop" : 1720060057776,
          "duration" : 7485
        }
      }, {
        "uid" : "4f075c45921b7115",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/4f075c45921b7115",
        "status" : "passed",
        "time" : {
          "start" : 1719973561785,
          "stop" : 1719973565871,
          "duration" : 4086
        }
      }, {
        "uid" : "9f8721569831d89f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/9f8721569831d89f",
        "status" : "passed",
        "time" : {
          "start" : 1719887231993,
          "stop" : 1719887235757,
          "duration" : 3764
        }
      }, {
        "uid" : "f1caf339cdbbc09e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/f1caf339cdbbc09e",
        "status" : "passed",
        "time" : {
          "start" : 1719801246142,
          "stop" : 1719801249926,
          "duration" : 3784
        }
      }, {
        "uid" : "e39f9fada0ec2056",
        "reportUrl" : "https://Nat754.github.io/PulseWave/71//#testresult/e39f9fada0ec2056",
        "status" : "passed",
        "time" : {
          "start" : 1719714667907,
          "stop" : 1719714671323,
          "duration" : 3416
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "b60e979b6a4df8fc.json",
  "parameterValues" : [ ]
}