{
  "uid" : "645e8b72d5432f8c",
  "name" : "POST Создать стикер к задаче",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_task_id_sticker",
  "historyId" : "15c7beb0356344830714c93b55aa7dfe",
  "time" : {
    "start" : 1721529094359,
    "stop" : 1721529095636,
    "duration" : 1277
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f340a28f8f0>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f34094aba10>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f3408e2eb10>\n\n    @pytest.mark.xfail\n    @allure.title(\"POST Создать стикер к задаче\")\n    def test_post_api_task_id_sticker(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721529051485,
      "stop" : 1721529051502,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721529051502,
      "stop" : 1721529051502,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721529094359,
      "stop" : 1721529094359,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f340a28f8f0>\ns = '<!DOCTYPE html>\\n<html lang=\"ru\">\\n\\n<head>\\n  <meta charset=\"UTF-8\" />\\n  <link rel=\"shortcut icon\" href=\"./svg/favi... absolute; left: -9999px\" alt=\"\" />\\n    </div>\\n  </noscript>\\n  <!-- /Yandex.Metrika counter -->\\n</body>\\n\\n</html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f34094aba10>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f3408e2eb10>\n\n    @pytest.mark.xfail\n    @allure.title(\"POST Создать стикер к задаче\")\n    def test_post_api_task_id_sticker(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721529094359,
        "stop" : 1721529095636,
        "duration" : 1277
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.xfail"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az984-641"
  }, {
    "name" : "thread",
    "value" : "2260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 0,
        "skipped" : 99,
        "passed" : 0,
        "unknown" : 0,
        "total" : 99
      },
      "items" : [ {
        "uid" : "2e1fbe05321a460d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/2e1fbe05321a460d",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442374351,
          "stop" : 1721442374933,
          "duration" : 582
        }
      }, {
        "uid" : "9849fd3bd239c6c2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/9849fd3bd239c6c2",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356158575,
          "stop" : 1721356159355,
          "duration" : 780
        }
      }, {
        "uid" : "418f32f90f64e269",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/418f32f90f64e269",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269720993,
          "stop" : 1721269721504,
          "duration" : 511
        }
      }, {
        "uid" : "40eee2e8dc6cb0b0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/40eee2e8dc6cb0b0",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183358861,
          "stop" : 1721183359447,
          "duration" : 586
        }
      }, {
        "uid" : "8c1f59ddd768b12",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/8c1f59ddd768b12",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097012871,
          "stop" : 1721097013457,
          "duration" : 586
        }
      }, {
        "uid" : "39820c6e5fbcae4c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/39820c6e5fbcae4c",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010804523,
          "stop" : 1721010805329,
          "duration" : 806
        }
      }, {
        "uid" : "3703925d64d4c18a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/3703925d64d4c18a",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924620188,
          "stop" : 1720924620709,
          "duration" : 521
        }
      }, {
        "uid" : "43d103acd3897f2b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/43d103acd3897f2b",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837649164,
          "stop" : 1720837649885,
          "duration" : 721
        }
      }, {
        "uid" : "2875353a61b21514",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/2875353a61b21514",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751286188,
          "stop" : 1720751286768,
          "duration" : 580
        }
      }, {
        "uid" : "436a0390ef68abda",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/436a0390ef68abda",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720665253512,
          "stop" : 1720665263329,
          "duration" : 9817
        }
      }, {
        "uid" : "e980a7ed2111aff3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/e980a7ed2111aff3",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720578732798,
          "stop" : 1720578743152,
          "duration" : 10354
        }
      }, {
        "uid" : "3607b80bd9e69d61",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/3607b80bd9e69d61",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720492344148,
          "stop" : 1720492353183,
          "duration" : 9035
        }
      }, {
        "uid" : "e849a71ec4dee9f8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/e849a71ec4dee9f8",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720406039361,
          "stop" : 1720406053315,
          "duration" : 13954
        }
      }, {
        "uid" : "1a179d7ee925978c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/1a179d7ee925978c",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720319698462,
          "stop" : 1720319708898,
          "duration" : 10436
        }
      }, {
        "uid" : "56619441a57eb189",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/56619441a57eb189",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720232885091,
          "stop" : 1720232894555,
          "duration" : 9464
        }
      }, {
        "uid" : "3116a61e5133bc0f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/3116a61e5133bc0f",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720146620186,
          "stop" : 1720146629755,
          "duration" : 9569
        }
      }, {
        "uid" : "40b74b4b905b44d1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/40b74b4b905b44d1",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1720060298537,
          "stop" : 1720060307967,
          "duration" : 9430
        }
      }, {
        "uid" : "ecf10aa85ddab049",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/ecf10aa85ddab049",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1719973804480,
          "stop" : 1719973814080,
          "duration" : 9600
        }
      }, {
        "uid" : "1fe14114f4626e39",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/1fe14114f4626e39",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1719887469622,
          "stop" : 1719887479262,
          "duration" : 9640
        }
      }, {
        "uid" : "dd13bae51b72815c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/72//#testresult/dd13bae51b72815c",
        "status" : "skipped",
        "statusDetails" : "XFAIL\n\nAssertionError: Unexpected status code. Expected: 201. Actual: 500",
        "time" : {
          "start" : 1719801488045,
          "stop" : 1719801496958,
          "duration" : 8913
        }
      } ]
    },
    "tags" : [ "@pytest.mark.xfail" ]
  },
  "source" : "645e8b72d5432f8c.json",
  "parameterValues" : [ ]
}