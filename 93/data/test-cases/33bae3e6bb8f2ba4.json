{
  "uid" : "33bae3e6bb8f2ba4",
  "name" : "POST Подтверждение сброса пароля. Когда пользователь переходит по ссылке     auth/password/reset/confirm/{uid}/{token}",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_auth_users_reset_password_confirm",
  "historyId" : "955584523e44b3e59bd87d6626c56c0c",
  "time" : {
    "start" : 1721615620383,
    "stop" : 1721615621458,
    "duration" : 1075
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8e2b7476e0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f8e2a9ba150>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f8e2a2e1850>\n\n    @allure.title(\"POST Подтверждение сброса пароля. Когда пользователь переходит по ссылке \\\n    auth/password/reset/confirm/{uid}/{token}\")\n    def test_post_auth_users_reset_password_confirm(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password0)\n\ntests/test_api/test_api.py:634: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721615537532,
      "stop" : 1721615537532,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721615537515,
      "stop" : 1721615537532,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721615620382,
      "stop" : 1721615620382,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f8e2b7476e0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f8e2a9ba150>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f8e2a2e1850>\n\n    @allure.title(\"POST Подтверждение сброса пароля. Когда пользователь переходит по ссылке \\\n    auth/password/reset/confirm/{uid}/{token}\")\n    def test_post_auth_users_reset_password_confirm(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email2, password0)\n\ntests/test_api/test_api.py:634: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721615620383,
        "stop" : 1721615621458,
        "duration" : 1075
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1052-207"
  }, {
    "name" : "thread",
    "value" : "2269-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 12,
        "skipped" : 30,
        "passed" : 58,
        "unknown" : 0,
        "total" : 100
      },
      "items" : [ {
        "uid" : "f832df4ce010d13f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/f832df4ce010d13f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721529105591,
          "stop" : 1721529106108,
          "duration" : 517
        }
      }, {
        "uid" : "d375a1335300243f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/d375a1335300243f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442385289,
          "stop" : 1721442385872,
          "duration" : 583
        }
      }, {
        "uid" : "e1cd28e8b62f6124",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/e1cd28e8b62f6124",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356172785,
          "stop" : 1721356173562,
          "duration" : 777
        }
      }, {
        "uid" : "13108e86de127906",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/13108e86de127906",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269730961,
          "stop" : 1721269731787,
          "duration" : 826
        }
      }, {
        "uid" : "f0327fcce3ba3784",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/f0327fcce3ba3784",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183369856,
          "stop" : 1721183370444,
          "duration" : 588
        }
      }, {
        "uid" : "7bb458256bc7abb9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/7bb458256bc7abb9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097023861,
          "stop" : 1721097024445,
          "duration" : 584
        }
      }, {
        "uid" : "422aa2d7e7b95079",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/422aa2d7e7b95079",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010814861,
          "stop" : 1721010815369,
          "duration" : 508
        }
      }, {
        "uid" : "6595fb2a5e6363d0",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/6595fb2a5e6363d0",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924630343,
          "stop" : 1720924630863,
          "duration" : 520
        }
      }, {
        "uid" : "af27c7a9b67e0431",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/af27c7a9b67e0431",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837662355,
          "stop" : 1720837663075,
          "duration" : 720
        }
      }, {
        "uid" : "5f6ba06ed203cc7a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/5f6ba06ed203cc7a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751297070,
          "stop" : 1720751297655,
          "duration" : 585
        }
      }, {
        "uid" : "ebc10806424e7ed3",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/ebc10806424e7ed3",
        "status" : "passed",
        "time" : {
          "start" : 1720665363296,
          "stop" : 1720665367848,
          "duration" : 4552
        }
      }, {
        "uid" : "5bbea930ec283d4d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/5bbea930ec283d4d",
        "status" : "passed",
        "time" : {
          "start" : 1720578849043,
          "stop" : 1720578853853,
          "duration" : 4810
        }
      }, {
        "uid" : "1ae055ec80aefd3a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/1ae055ec80aefd3a",
        "status" : "passed",
        "time" : {
          "start" : 1720492459526,
          "stop" : 1720492463876,
          "duration" : 4350
        }
      }, {
        "uid" : "52f9f5e02e07dbb9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/52f9f5e02e07dbb9",
        "status" : "passed",
        "time" : {
          "start" : 1720406175348,
          "stop" : 1720406181539,
          "duration" : 6191
        }
      }, {
        "uid" : "8d2cbcf8b55a9b5c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/8d2cbcf8b55a9b5c",
        "status" : "passed",
        "time" : {
          "start" : 1720319809116,
          "stop" : 1720319813706,
          "duration" : 4590
        }
      }, {
        "uid" : "270736e1f6b25765",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/270736e1f6b25765",
        "status" : "passed",
        "time" : {
          "start" : 1720232994252,
          "stop" : 1720232999054,
          "duration" : 4802
        }
      }, {
        "uid" : "e31889bbe6a7780b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/e31889bbe6a7780b",
        "status" : "passed",
        "time" : {
          "start" : 1720146735256,
          "stop" : 1720146739858,
          "duration" : 4602
        }
      }, {
        "uid" : "fc17bcac94f1f5e9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/fc17bcac94f1f5e9",
        "status" : "passed",
        "time" : {
          "start" : 1720060409131,
          "stop" : 1720060414064,
          "duration" : 4933
        }
      }, {
        "uid" : "dc6d7558d4957684",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/dc6d7558d4957684",
        "status" : "passed",
        "time" : {
          "start" : 1719973912960,
          "stop" : 1719973918018,
          "duration" : 5058
        }
      }, {
        "uid" : "1b6db16b6bcc4266",
        "reportUrl" : "https://Nat754.github.io/PulseWave/73//#testresult/1b6db16b6bcc4266",
        "status" : "passed",
        "time" : {
          "start" : 1719887585438,
          "stop" : 1719887589819,
          "duration" : 4381
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "33bae3e6bb8f2ba4.json",
  "parameterValues" : [ ]
}