{
  "uid" : "1b9e635bf78d7d29",
  "name" : "POST Регистрация пользователя без пароля",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user_no_passwrd",
  "historyId" : "f6950d9b2602969f3fea01b98051c6e4",
  "time" : {
    "start" : 1721701778278,
    "stop" : 1721701779156,
    "duration" : 878
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4d31839b0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fc4d23bfe90>\n\n    @allure.title(\"POST Регистрация пользователя без пароля\")\n    def test_post_create_user_no_passwrd(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_PASSWORD)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"password\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n\ntests/test_api/test_api.py:665: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721701704232,
      "stop" : 1721701704232,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721701704215,
      "stop" : 1721701704231,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4d31839b0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fc4d23bfe90>\n\n    @allure.title(\"POST Регистрация пользователя без пароля\")\n    def test_post_create_user_no_passwrd(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_PASSWORD)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"password\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n\ntests/test_api/test_api.py:665: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Expected message: ['Это поле не может быть пустым.']",
      "time" : {
        "start" : 1721701779156,
        "stop" : 1721701779156,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 665, in test_post_create_user_no_passwrd\n    f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"password\"]}'\n                                                                                           ^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1424-207"
  }, {
    "name" : "thread",
    "value" : "2264-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 101
      },
      "items" : [ {
        "uid" : "5e73a11f3babad8c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/93//#testresult/5e73a11f3babad8c",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721615623737,
          "stop" : 1721615624787,
          "duration" : 1050
        }
      }, {
        "uid" : "6299c4a7b6c7b635",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/6299c4a7b6c7b635",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721529107309,
          "stop" : 1721529107827,
          "duration" : 518
        }
      }, {
        "uid" : "94209d05f35baf8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/94209d05f35baf8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442387215,
          "stop" : 1721442387804,
          "duration" : 589
        }
      }, {
        "uid" : "d209c923465ac864",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/d209c923465ac864",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356175293,
          "stop" : 1721356176076,
          "duration" : 783
        }
      }, {
        "uid" : "225c8a7ca668b378",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/225c8a7ca668b378",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269732956,
          "stop" : 1721269733460,
          "duration" : 504
        }
      }, {
        "uid" : "f67ed1cf1f20766f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/f67ed1cf1f20766f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183371801,
          "stop" : 1721183372387,
          "duration" : 586
        }
      }, {
        "uid" : "ee798be0c61f48a1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/ee798be0c61f48a1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097025784,
          "stop" : 1721097026373,
          "duration" : 589
        }
      }, {
        "uid" : "636d078f156600d2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/636d078f156600d2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010816848,
          "stop" : 1721010817354,
          "duration" : 506
        }
      }, {
        "uid" : "1cf3382c14f85316",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/1cf3382c14f85316",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924632064,
          "stop" : 1720924632583,
          "duration" : 519
        }
      }, {
        "uid" : "520b6f782319963f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/520b6f782319963f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837664670,
          "stop" : 1720837665396,
          "duration" : 726
        }
      }, {
        "uid" : "207b30039cb14bc2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/207b30039cb14bc2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751298986,
          "stop" : 1720751299570,
          "duration" : 584
        }
      }, {
        "uid" : "cd91b672f478e92e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/cd91b672f478e92e",
        "status" : "passed",
        "time" : {
          "start" : 1720665370895,
          "stop" : 1720665371539,
          "duration" : 644
        }
      }, {
        "uid" : "778695e1e37f4999",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/778695e1e37f4999",
        "status" : "passed",
        "time" : {
          "start" : 1720578857419,
          "stop" : 1720578858037,
          "duration" : 618
        }
      }, {
        "uid" : "a79d18deb9db5f16",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/a79d18deb9db5f16",
        "status" : "passed",
        "time" : {
          "start" : 1720492467212,
          "stop" : 1720492467743,
          "duration" : 531
        }
      }, {
        "uid" : "e06d5f1df33cec34",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/e06d5f1df33cec34",
        "status" : "passed",
        "time" : {
          "start" : 1720406185304,
          "stop" : 1720406186102,
          "duration" : 798
        }
      }, {
        "uid" : "aa5380ed048be44f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/aa5380ed048be44f",
        "status" : "passed",
        "time" : {
          "start" : 1720319816837,
          "stop" : 1720319817376,
          "duration" : 539
        }
      }, {
        "uid" : "305316dbd34df9f9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/305316dbd34df9f9",
        "status" : "passed",
        "time" : {
          "start" : 1720233002190,
          "stop" : 1720233002728,
          "duration" : 538
        }
      }, {
        "uid" : "56450ec537574469",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/56450ec537574469",
        "status" : "passed",
        "time" : {
          "start" : 1720146743030,
          "stop" : 1720146743565,
          "duration" : 535
        }
      }, {
        "uid" : "3b09b89960f1da09",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/3b09b89960f1da09",
        "status" : "passed",
        "time" : {
          "start" : 1720060417347,
          "stop" : 1720060417886,
          "duration" : 539
        }
      }, {
        "uid" : "efbde93ca0198e97",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/efbde93ca0198e97",
        "status" : "passed",
        "time" : {
          "start" : 1719973921180,
          "stop" : 1719973921715,
          "duration" : 535
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "1b9e635bf78d7d29.json",
  "parameterValues" : [ ]
}