{
  "uid" : "5e8fb1fc98c89cfa",
  "name" : "POST Повторная отправка ссылки с приглашением пользователя",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_api_workspace_id_resend_invite",
  "historyId" : "c1e5cfd81ea84d54690bb29757903f90",
  "time" : {
    "start" : 1721717021331,
    "stop" : 1721717022875,
    "duration" : 1544
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6862771e80>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f686169da60>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f686106f770>\n\n    @allure.title(\"POST Повторная отправка ссылки с приглашением пользователя\")\n    def test_post_api_workspace_id_resend_invite(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721717005132,
      "stop" : 1721717005132,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721717021330,
      "stop" : 1721717021331,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721717005114,
      "stop" : 1721717005131,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6862771e80>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f686169da60>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f686106f770>\n\n    @allure.title(\"POST Повторная отправка ссылки с приглашением пользователя\")\n    def test_post_api_workspace_id_resend_invite(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721717021331,
        "stop" : 1721717022875,
        "duration" : 1544
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az525-468"
  }, {
    "name" : "thread",
    "value" : "2268-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 29,
        "skipped" : 0,
        "passed" : 73,
        "unknown" : 0,
        "total" : 102
      },
      "items" : [ {
        "uid" : "8d787a3094cdee69",
        "reportUrl" : "https://Nat754.github.io/PulseWave/94//#testresult/8d787a3094cdee69",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721701718928,
          "stop" : 1721701720134,
          "duration" : 1206
        }
      }, {
        "uid" : "a291c9f241f8d0e2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/93//#testresult/a291c9f241f8d0e2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721615553160,
          "stop" : 1721615555192,
          "duration" : 2032
        }
      }, {
        "uid" : "1f307646f2d4e6f5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/1f307646f2d4e6f5",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721529065063,
          "stop" : 1721529065920,
          "duration" : 857
        }
      }, {
        "uid" : "31e3055452f1c5aa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/31e3055452f1c5aa",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442344335,
          "stop" : 1721442345339,
          "duration" : 1004
        }
      }, {
        "uid" : "ffa2bb2b8229508f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/ffa2bb2b8229508f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356118446,
          "stop" : 1721356119761,
          "duration" : 1315
        }
      }, {
        "uid" : "170f558f59c0bef9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/170f558f59c0bef9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269692803,
          "stop" : 1721269693512,
          "duration" : 709
        }
      }, {
        "uid" : "11df34740cecbeec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/11df34740cecbeec",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183328911,
          "stop" : 1721183329638,
          "duration" : 727
        }
      }, {
        "uid" : "e8ab1423e9247f2e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/e8ab1423e9247f2e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096981949,
          "stop" : 1721096982875,
          "duration" : 926
        }
      }, {
        "uid" : "85e93f8ab533291f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/85e93f8ab533291f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010775724,
          "stop" : 1721010776481,
          "duration" : 757
        }
      }, {
        "uid" : "c9e71b92c323a788",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/c9e71b92c323a788",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924589536,
          "stop" : 1720924590439,
          "duration" : 903
        }
      }, {
        "uid" : "fa4c64b9afa34c1",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/fa4c64b9afa34c1",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837616069,
          "stop" : 1720837616961,
          "duration" : 892
        }
      }, {
        "uid" : "4fc960c363a0fac9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/4fc960c363a0fac9",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751254563,
          "stop" : 1720751256090,
          "duration" : 1527
        }
      }, {
        "uid" : "3705aff5d3902d0c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/3705aff5d3902d0c",
        "status" : "passed",
        "time" : {
          "start" : 1720665018048,
          "stop" : 1720665022063,
          "duration" : 4015
        }
      }, {
        "uid" : "c331ba137226ffe4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/c331ba137226ffe4",
        "status" : "passed",
        "time" : {
          "start" : 1720578477198,
          "stop" : 1720578481451,
          "duration" : 4253
        }
      }, {
        "uid" : "b3ad5a98c783d5fa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/b3ad5a98c783d5fa",
        "status" : "passed",
        "time" : {
          "start" : 1720492102426,
          "stop" : 1720492109173,
          "duration" : 6747
        }
      }, {
        "uid" : "ede1f61663e0c32e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/ede1f61663e0c32e",
        "status" : "passed",
        "time" : {
          "start" : 1720405731631,
          "stop" : 1720405735860,
          "duration" : 4229
        }
      }, {
        "uid" : "b78c9773a49fee61",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/b78c9773a49fee61",
        "status" : "passed",
        "time" : {
          "start" : 1720319458409,
          "stop" : 1720319461862,
          "duration" : 3453
        }
      }, {
        "uid" : "6e61846d927d12fa",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/6e61846d927d12fa",
        "status" : "passed",
        "time" : {
          "start" : 1720232650122,
          "stop" : 1720232654376,
          "duration" : 4254
        }
      }, {
        "uid" : "c9d851d52adb30f6",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/c9d851d52adb30f6",
        "status" : "passed",
        "time" : {
          "start" : 1720146386016,
          "stop" : 1720146389607,
          "duration" : 3591
        }
      }, {
        "uid" : "74baaf38d204487b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/74baaf38d204487b",
        "status" : "passed",
        "time" : {
          "start" : 1720060057778,
          "stop" : 1720060061290,
          "duration" : 3512
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "5e8fb1fc98c89cfa.json",
  "parameterValues" : [ ]
}