{
  "uid" : "92944eb9b8a62bec",
  "name" : "PUT Обновить все данные РП (на данный момент только имя)",
  "fullName" : "tests.test_api.test_api.TestAPI#test_put_api_workspace_id",
  "historyId" : "51ec249381422907b0e48cdbf8188807",
  "time" : {
    "start" : 1721717033069,
    "stop" : 1721717035208,
    "duration" : 2139
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6862771e80>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f68616a3b90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6861068890>\n\n    @allure.title(\"PUT Обновить все данные РП (на данный момент только имя)\")\n    def test_put_api_workspace_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "use_api_base",
    "time" : {
      "start" : 1721717033069,
      "stop" : 1721717033069,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721717005132,
      "stop" : 1721717005132,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721717005114,
      "stop" : 1721717005131,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f6862771e80>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7f68616a3b90>\nuse_api_base = <api_testing.api_base.ApiBase object at 0x7f6861068890>\n\n    @allure.title(\"PUT Обновить все данные РП (на данный момент только имя)\")\n    def test_put_api_workspace_id(self, use_api_base):\n>       jwt = use_api_base.create_jwt(email1, password0)\n\ntests/test_api/test_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi_testing/api_base.py:86: in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Получить access токен пользователя на емайл",
      "time" : {
        "start" : 1721717033069,
        "stop" : 1721717035207,
        "duration" : 2138
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/api_testing/api_base.py\", line 86, in create_jwt\n    jwt = f\"JWT {response.json()['access']}\"\n                 ^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az525-468"
  }, {
    "name" : "thread",
    "value" : "2268-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 21,
        "skipped" : 0,
        "passed" : 81,
        "unknown" : 0,
        "total" : 102
      },
      "items" : [ {
        "uid" : "b936166a1d8dcc8b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/94//#testresult/b936166a1d8dcc8b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721701728204,
          "stop" : 1721701729223,
          "duration" : 1019
        }
      }, {
        "uid" : "bd2cbee8255b7be2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/93//#testresult/bd2cbee8255b7be2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721615563643,
          "stop" : 1721615565102,
          "duration" : 1459
        }
      }, {
        "uid" : "e07a74f8febc3df8",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/e07a74f8febc3df8",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721529071720,
          "stop" : 1721529072241,
          "duration" : 521
        }
      }, {
        "uid" : "288ef183f33a5049",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/288ef183f33a5049",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442351465,
          "stop" : 1721442352050,
          "duration" : 585
        }
      }, {
        "uid" : "3e02a5f4cbe9dab",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/3e02a5f4cbe9dab",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356128791,
          "stop" : 1721356129575,
          "duration" : 784
        }
      }, {
        "uid" : "5d081c79bfd0795b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/5d081c79bfd0795b",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269699353,
          "stop" : 1721269700066,
          "duration" : 713
        }
      }, {
        "uid" : "cb5af41b54375fd",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/cb5af41b54375fd",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183335890,
          "stop" : 1721183336877,
          "duration" : 987
        }
      }, {
        "uid" : "80e0d35891312e2e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/80e0d35891312e2e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721096988975,
          "stop" : 1721096989899,
          "duration" : 924
        }
      }, {
        "uid" : "91d8b8bf9a8871e5",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/91d8b8bf9a8871e5",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010782154,
          "stop" : 1721010782845,
          "duration" : 691
        }
      }, {
        "uid" : "fcd7f58976cbe7c4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/fcd7f58976cbe7c4",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924596704,
          "stop" : 1720924597224,
          "duration" : 520
        }
      }, {
        "uid" : "9ec66e05e3613530",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/9ec66e05e3613530",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837623164,
          "stop" : 1720837623886,
          "duration" : 722
        }
      }, {
        "uid" : "66c2d2f7fb26915f",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/66c2d2f7fb26915f",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751263689,
          "stop" : 1720751264276,
          "duration" : 587
        }
      }, {
        "uid" : "88ee392e7a95176d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/88ee392e7a95176d",
        "status" : "passed",
        "time" : {
          "start" : 1720665038951,
          "stop" : 1720665043028,
          "duration" : 4077
        }
      }, {
        "uid" : "e7d6df9d00769715",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/e7d6df9d00769715",
        "status" : "passed",
        "time" : {
          "start" : 1720578500755,
          "stop" : 1720578504732,
          "duration" : 3977
        }
      }, {
        "uid" : "f553acb88abbb16a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/f553acb88abbb16a",
        "status" : "passed",
        "time" : {
          "start" : 1720492128573,
          "stop" : 1720492132683,
          "duration" : 4110
        }
      }, {
        "uid" : "6d2757a2829265ba",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/6d2757a2829265ba",
        "status" : "passed",
        "time" : {
          "start" : 1720405761542,
          "stop" : 1720405766400,
          "duration" : 4858
        }
      }, {
        "uid" : "588887eea2967af2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/588887eea2967af2",
        "status" : "passed",
        "time" : {
          "start" : 1720319482021,
          "stop" : 1720319486456,
          "duration" : 4435
        }
      }, {
        "uid" : "4cd96666ec0e107d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/4cd96666ec0e107d",
        "status" : "passed",
        "time" : {
          "start" : 1720232672924,
          "stop" : 1720232676537,
          "duration" : 3613
        }
      }, {
        "uid" : "69ac25b03cec57d9",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/69ac25b03cec57d9",
        "status" : "passed",
        "time" : {
          "start" : 1720146408141,
          "stop" : 1720146411979,
          "duration" : 3838
        }
      }, {
        "uid" : "4e5bbd047c1f4497",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/4e5bbd047c1f4497",
        "status" : "passed",
        "time" : {
          "start" : 1720060081848,
          "stop" : 1720060085644,
          "duration" : 3796
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "92944eb9b8a62bec.json",
  "parameterValues" : [ ]
}