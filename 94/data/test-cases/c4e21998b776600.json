{
  "uid" : "c4e21998b776600",
  "name" : "POST Регистрация пользователя без электронной почты",
  "fullName" : "tests.test_api.test_api.TestAPI#test_post_create_user_no_email",
  "historyId" : "3264f1f7ef33726afff2a1ca864c49f1",
  "time" : {
    "start" : 1721701777369,
    "stop" : 1721701778228,
    "duration" : 859
  },
  "status" : "broken",
  "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
  "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4d31839b0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fc4d23becc0>\n\n    @allure.title(\"POST Регистрация пользователя без электронной почты\")\n    def test_post_create_user_no_email(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_EMAIL)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"email\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n\ntests/test_api/test_api.py:656: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721701704232,
      "stop" : 1721701704232,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721701704215,
      "stop" : 1721701704231,
      "duration" : 16
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
    "statusTrace" : "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fc4d31839b0>\ns = '<!DOCTYPE html>\\n<html lang=\"en-US\">\\n  <head>\\n    \\n    <meta charset=\"utf-8\" />\\n    <meta http-equiv=\"X-UA-Compat...script nonce=\"\">\\n      performance.mark(\\'frontend_boot_js_done_time_seconds\\');\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api.test_api.TestAPI object at 0x7fc4d23becc0>\n\n    @allure.title(\"POST Регистрация пользователя без электронной почты\")\n    def test_post_create_user_no_email(self):\n        url = f'{self.constant.BASE_URL}auth/users/'\n        response = requests.post(url, json=self.constant.CREATE_USER_NO_EMAIL)\n        with allure.step(f\"Expected message: {self.constant.NO_DATA}\"):\n            assert response.json()[\"email\"] == self.constant.NO_DATA, \\\n>               f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n\ntests/test_api/test_api.py:656: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py:975: JSONDecodeError",
    "steps" : [ {
      "name" : "Expected message: ['Это поле не может быть пустым.']",
      "time" : {
        "start" : 1721701778228,
        "stop" : 1721701778228,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n",
      "statusTrace" : "  File \"/home/runner/work/PulseWave/PulseWave/tests/test_api/test_api.py\", line 656, in test_post_create_user_no_email\n    f'Expected message: {self.constant.NO_DATA}, actual message: {response.json()[\"email\"]}'\n                                                                                        ^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование API"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_api"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestAPI"
  }, {
    "name" : "host",
    "value" : "fv-az1424-207"
  }, {
    "name" : "thread",
    "value" : "2264-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_api.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 86,
        "unknown" : 0,
        "total" : 101
      },
      "items" : [ {
        "uid" : "d4ad9fa9f4b8c9d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/93//#testresult/d4ad9fa9f4b8c9d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721615622615,
          "stop" : 1721615623688,
          "duration" : 1073
        }
      }, {
        "uid" : "52af795b19439e12",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/52af795b19439e12",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721529106737,
          "stop" : 1721529107259,
          "duration" : 522
        }
      }, {
        "uid" : "3f9bc527c9420a51",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/3f9bc527c9420a51",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721442386569,
          "stop" : 1721442387165,
          "duration" : 596
        }
      }, {
        "uid" : "498f7a4fa5461591",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/498f7a4fa5461591",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721356174455,
          "stop" : 1721356175243,
          "duration" : 788
        }
      }, {
        "uid" : "ddbec16852388703",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/ddbec16852388703",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721269732404,
          "stop" : 1721269732906,
          "duration" : 502
        }
      }, {
        "uid" : "d8dd781bca8137e",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/d8dd781bca8137e",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721183371154,
          "stop" : 1721183371749,
          "duration" : 595
        }
      }, {
        "uid" : "e43fe9b0526eb352",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/e43fe9b0526eb352",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721097025149,
          "stop" : 1721097025731,
          "duration" : 582
        }
      }, {
        "uid" : "305e3a0a67a6d1b2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/305e3a0a67a6d1b2",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1721010815991,
          "stop" : 1721010816798,
          "duration" : 807
        }
      }, {
        "uid" : "b49f60bb49e4053a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/b49f60bb49e4053a",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720924631494,
          "stop" : 1720924632015,
          "duration" : 521
        }
      }, {
        "uid" : "9dfaeca66eb106dc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/9dfaeca66eb106dc",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720837663912,
          "stop" : 1720837664618,
          "duration" : 706
        }
      }, {
        "uid" : "be98187c8b7f9c8d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/be98187c8b7f9c8d",
        "status" : "broken",
        "statusDetails" : "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)",
        "time" : {
          "start" : 1720751298354,
          "stop" : 1720751298937,
          "duration" : 583
        }
      }, {
        "uid" : "3d3f6c329583795c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/3d3f6c329583795c",
        "status" : "passed",
        "time" : {
          "start" : 1720665370267,
          "stop" : 1720665370893,
          "duration" : 626
        }
      }, {
        "uid" : "9b25eb9cac7e1268",
        "reportUrl" : "https://Nat754.github.io/PulseWave/81//#testresult/9b25eb9cac7e1268",
        "status" : "passed",
        "time" : {
          "start" : 1720578856809,
          "stop" : 1720578857417,
          "duration" : 608
        }
      }, {
        "uid" : "7b0a9de4c022ac78",
        "reportUrl" : "https://Nat754.github.io/PulseWave/80//#testresult/7b0a9de4c022ac78",
        "status" : "passed",
        "time" : {
          "start" : 1720492466689,
          "stop" : 1720492467210,
          "duration" : 521
        }
      }, {
        "uid" : "310789640f983ce4",
        "reportUrl" : "https://Nat754.github.io/PulseWave/79//#testresult/310789640f983ce4",
        "status" : "passed",
        "time" : {
          "start" : 1720406184513,
          "stop" : 1720406185302,
          "duration" : 789
        }
      }, {
        "uid" : "838732e372213002",
        "reportUrl" : "https://Nat754.github.io/PulseWave/78//#testresult/838732e372213002",
        "status" : "passed",
        "time" : {
          "start" : 1720319816200,
          "stop" : 1720319816835,
          "duration" : 635
        }
      }, {
        "uid" : "4907efd908dbd69b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/77//#testresult/4907efd908dbd69b",
        "status" : "passed",
        "time" : {
          "start" : 1720233001536,
          "stop" : 1720233002188,
          "duration" : 652
        }
      }, {
        "uid" : "3b586d221d516559",
        "reportUrl" : "https://Nat754.github.io/PulseWave/76//#testresult/3b586d221d516559",
        "status" : "passed",
        "time" : {
          "start" : 1720146742500,
          "stop" : 1720146743028,
          "duration" : 528
        }
      }, {
        "uid" : "501d5a1d311c57e7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/75//#testresult/501d5a1d311c57e7",
        "status" : "passed",
        "time" : {
          "start" : 1720060416816,
          "stop" : 1720060417345,
          "duration" : 529
        }
      }, {
        "uid" : "f19f923434c8bbd2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/74//#testresult/f19f923434c8bbd2",
        "status" : "passed",
        "time" : {
          "start" : 1719973920531,
          "stop" : 1719973921179,
          "duration" : 648
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "c4e21998b776600.json",
  "parameterValues" : [ ]
}