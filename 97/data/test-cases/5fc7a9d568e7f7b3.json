{
  "uid" : "5fc7a9d568e7f7b3",
  "name" : "1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку",
  "fullName" : "tests.test_signup_page.test_signup_page.TestSignupPage#test_signup_with_correct_data_and_agree",
  "historyId" : "3f1a9a03cb3169fb36bf4b166c8deeee",
  "time" : {
    "start" : 1722000015566,
    "stop" : 1722000033723,
    "duration" : 18157
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <svg data-v-1d5f154c=\"\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"avatar__icon\">...</svg> is not clickable at point (1800, 32). Other element would receive the click: <div data-v-91c04aa2=\"\" data-v-72c59a66=\"\" class=\"loader\">...</div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x563b1fe9bc5a <unknown>\n#1 0x563b1fb7ee2c <unknown>\n#2 0x563b1fbd2406 <unknown>\n#3 0x563b1fbd0246 <unknown>\n#4 0x563b1fbcdc27 <unknown>\n#5 0x563b1fbcca60 <unknown>\n#6 0x563b1fbc015f <unknown>\n#7 0x563b1fbee5c2 <unknown>\n#8 0x563b1fbbfad9 <unknown>\n#9 0x563b1fbee78e <unknown>\n#10 0x563b1fc0d303 <unknown>\n#11 0x563b1fbee363 <unknown>\n#12 0x563b1fbbe247 <unknown>\n#13 0x563b1fbbeb9e <unknown>\n#14 0x563b1fe6222b <unknown>\n#15 0x563b1fe662d1 <unknown>\n#16 0x563b1fe4dade <unknown>\n#17 0x563b1fe66e32 <unknown>\n#18 0x563b1fe3277f <unknown>\n#19 0x563b1fe8b618 <unknown>\n#20 0x563b1fe8b7f0 <unknown>\n#21 0x563b1fe9ad8c <unknown>\n#22 0x7f13a1694ac3 <unknown>",
  "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7ff1c0e1b410>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7ff1c0e53a40>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"840a97bac3b678dd1bce055695c69991\")>\n\n    @allure.title(\"1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку\")\n    @pytest.mark.smoke\n    def test_signup_with_correct_data_and_agree(self, signup_page_open, driver):\n        with allure.step('Заполнить поле email корректными данными'):\n            signup_page_open.put_data_to_email_field(email1)\n        with allure.step('Заполнить поле пароль сильным паролем'):\n            signup_page_open.put_data_to_password_field(password0)\n        with allure.step('Заполнить поле подтверждение пароля сильным паролем'):\n            signup_page_open.put_data_to_confirm_password_field(password0)\n        signup_page_open.check_pulsewave_policy_message().click()\n        signup_page_open.click_button_submit()\n        element = signup_page_open.get_send_invite_message()\n        with allure.step(f'Получено сообщение необходимости подтвердить регистрацию: \"{self.signup.INVITE_MSG}\"'):\n            assert element.text == self.signup.INVITE_MSG, 'Нет сообщения успеха'\n        time.sleep(10)\n        link = signup_page_open.get_confirm_signup_to_email(email1, password1)\n        driver.get(link)\n        signup_page_open.click_button_submit()\n>       signup_page_open.click_button_avatar()\n\ntests/test_signup_page/test_signup_page.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/signup_page.py:93: in click_button_avatar\n    self.element_is_clickable(self.locator.BUTTON_AVATAR).click()\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff1c0e53e00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x563b1fe8b7f0 \\\\u003Cunknown>\\\\n#21 0x563b1fe9ad8c \\\\u003Cunknown>\\\\n#22 0x7f13a1694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <svg data-v-1d5f154c=\"\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"avatar__icon\">...</svg> is not clickable at point (1800, 32). Other element would receive the click: <div data-v-91c04aa2=\"\" data-v-72c59a66=\"\" class=\"loader\">...</div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x563b1fe9bc5a <unknown>\nE       #1 0x563b1fb7ee2c <unknown>\nE       #2 0x563b1fbd2406 <unknown>\nE       #3 0x563b1fbd0246 <unknown>\nE       #4 0x563b1fbcdc27 <unknown>\nE       #5 0x563b1fbcca60 <unknown>\nE       #6 0x563b1fbc015f <unknown>\nE       #7 0x563b1fbee5c2 <unknown>\nE       #8 0x563b1fbbfad9 <unknown>\nE       #9 0x563b1fbee78e <unknown>\nE       #10 0x563b1fc0d303 <unknown>\nE       #11 0x563b1fbee363 <unknown>\nE       #12 0x563b1fbbe247 <unknown>\nE       #13 0x563b1fbbeb9e <unknown>\nE       #14 0x563b1fe6222b <unknown>\nE       #15 0x563b1fe662d1 <unknown>\nE       #16 0x563b1fe4dade <unknown>\nE       #17 0x563b1fe66e32 <unknown>\nE       #18 0x563b1fe3277f <unknown>\nE       #19 0x563b1fe8b618 <unknown>\nE       #20 0x563b1fe8b7f0 <unknown>\nE       #21 0x563b1fe9ad8c <unknown>\nE       #22 0x7f13a1694ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "signup_page_open",
    "time" : {
      "start" : 1722000012389,
      "stop" : 1722000015565,
      "duration" : 3176
    },
    "status" : "passed",
    "steps" : [ {
      "name" : "Проверка видимости кнопки 'Принимаю все' в сообщении о принятии файлов cookie",
      "time" : {
        "start" : 1722000015505,
        "stop" : 1722000015536,
        "duration" : 31
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  }, {
    "name" : "clear_allure_results_folder",
    "time" : {
      "start" : 1721999067423,
      "stop" : 1721999067424,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1722000012191,
      "stop" : 1722000012388,
      "duration" : 197
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1721999067406,
      "stop" : 1721999067423,
      "duration" : 17
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <svg data-v-1d5f154c=\"\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"avatar__icon\">...</svg> is not clickable at point (1800, 32). Other element would receive the click: <div data-v-91c04aa2=\"\" data-v-72c59a66=\"\" class=\"loader\">...</div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x563b1fe9bc5a <unknown>\n#1 0x563b1fb7ee2c <unknown>\n#2 0x563b1fbd2406 <unknown>\n#3 0x563b1fbd0246 <unknown>\n#4 0x563b1fbcdc27 <unknown>\n#5 0x563b1fbcca60 <unknown>\n#6 0x563b1fbc015f <unknown>\n#7 0x563b1fbee5c2 <unknown>\n#8 0x563b1fbbfad9 <unknown>\n#9 0x563b1fbee78e <unknown>\n#10 0x563b1fc0d303 <unknown>\n#11 0x563b1fbee363 <unknown>\n#12 0x563b1fbbe247 <unknown>\n#13 0x563b1fbbeb9e <unknown>\n#14 0x563b1fe6222b <unknown>\n#15 0x563b1fe662d1 <unknown>\n#16 0x563b1fe4dade <unknown>\n#17 0x563b1fe66e32 <unknown>\n#18 0x563b1fe3277f <unknown>\n#19 0x563b1fe8b618 <unknown>\n#20 0x563b1fe8b7f0 <unknown>\n#21 0x563b1fe9ad8c <unknown>\n#22 0x7f13a1694ac3 <unknown>",
    "statusTrace" : "self = <tests.test_signup_page.test_signup_page.TestSignupPage object at 0x7ff1c0e1b410>\nsignup_page_open = <pages.signup_page.SignUpPage object at 0x7ff1c0e53a40>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"840a97bac3b678dd1bce055695c69991\")>\n\n    @allure.title(\"1.3, 1.3.1, 1.15 Регистрация с корректными email и паролем и с согласием на подписку\")\n    @pytest.mark.smoke\n    def test_signup_with_correct_data_and_agree(self, signup_page_open, driver):\n        with allure.step('Заполнить поле email корректными данными'):\n            signup_page_open.put_data_to_email_field(email1)\n        with allure.step('Заполнить поле пароль сильным паролем'):\n            signup_page_open.put_data_to_password_field(password0)\n        with allure.step('Заполнить поле подтверждение пароля сильным паролем'):\n            signup_page_open.put_data_to_confirm_password_field(password0)\n        signup_page_open.check_pulsewave_policy_message().click()\n        signup_page_open.click_button_submit()\n        element = signup_page_open.get_send_invite_message()\n        with allure.step(f'Получено сообщение необходимости подтвердить регистрацию: \"{self.signup.INVITE_MSG}\"'):\n            assert element.text == self.signup.INVITE_MSG, 'Нет сообщения успеха'\n        time.sleep(10)\n        link = signup_page_open.get_confirm_signup_to_email(email1, password1)\n        driver.get(link)\n        signup_page_open.click_button_submit()\n>       signup_page_open.click_button_avatar()\n\ntests/test_signup_page/test_signup_page.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/signup_page.py:93: in click_button_avatar\n    self.element_is_clickable(self.locator.BUTTON_AVATAR).click()\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff1c0e53e00>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x563b1fe8b7f0 \\\\u003Cunknown>\\\\n#21 0x563b1fe9ad8c \\\\u003Cunknown>\\\\n#22 0x7f13a1694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <svg data-v-1d5f154c=\"\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"avatar__icon\">...</svg> is not clickable at point (1800, 32). Other element would receive the click: <div data-v-91c04aa2=\"\" data-v-72c59a66=\"\" class=\"loader\">...</div>\nE         (Session info: chrome-headless-shell=126.0.6478.182)\nE       Stacktrace:\nE       #0 0x563b1fe9bc5a <unknown>\nE       #1 0x563b1fb7ee2c <unknown>\nE       #2 0x563b1fbd2406 <unknown>\nE       #3 0x563b1fbd0246 <unknown>\nE       #4 0x563b1fbcdc27 <unknown>\nE       #5 0x563b1fbcca60 <unknown>\nE       #6 0x563b1fbc015f <unknown>\nE       #7 0x563b1fbee5c2 <unknown>\nE       #8 0x563b1fbbfad9 <unknown>\nE       #9 0x563b1fbee78e <unknown>\nE       #10 0x563b1fc0d303 <unknown>\nE       #11 0x563b1fbee363 <unknown>\nE       #12 0x563b1fbbe247 <unknown>\nE       #13 0x563b1fbbeb9e <unknown>\nE       #14 0x563b1fe6222b <unknown>\nE       #15 0x563b1fe662d1 <unknown>\nE       #16 0x563b1fe4dade <unknown>\nE       #17 0x563b1fe66e32 <unknown>\nE       #18 0x563b1fe3277f <unknown>\nE       #19 0x563b1fe8b618 <unknown>\nE       #20 0x563b1fe8b7f0 <unknown>\nE       #21 0x563b1fe9ad8c <unknown>\nE       #22 0x7f13a1694ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "Заполнить поле email корректными данными",
      "time" : {
        "start" : 1722000015566,
        "stop" : 1722000015640,
        "duration" : 74
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле пароль сильным паролем",
      "time" : {
        "start" : 1722000015640,
        "stop" : 1722000015695,
        "duration" : 55
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Заполнить поле подтверждение пароля сильным паролем",
      "time" : {
        "start" : 1722000015695,
        "stop" : 1722000015750,
        "duration" : 55
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Видимость сообщения: 'Я согласен получать новости и обновления PulseWave'",
      "time" : {
        "start" : 1722000015750,
        "stop" : 1722000015773,
        "duration" : 23
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Подтвердить изменения'",
      "time" : {
        "start" : 1722000015814,
        "stop" : 1722000015864,
        "duration" : 50
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получено сообщения о подтверждении регистрации",
      "time" : {
        "start" : 1722000015864,
        "stop" : 1722000018448,
        "duration" : 2584
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получено сообщение необходимости подтвердить регистрацию: \"Регистрация\nМы отправили вам письмо на test_pulsewave0@mail.ru.\nДля подтверждения регистрации и активации учётной записи пройдите по ссылке в письме.\nПисьмо не пришло?\nПроверьте папку Спам и нажмите кнопку «Отправить повторно».\"",
      "time" : {
        "start" : 1722000018448,
        "stop" : 1722000018458,
        "duration" : 10
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Получить ссылку подтверждения регистрации пользователя на емайл",
      "time" : {
        "start" : 1722000028458,
        "stop" : 1722000031460,
        "duration" : 3002
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Подтвердить изменения'",
      "time" : {
        "start" : 1722000031714,
        "stop" : 1722000032303,
        "duration" : 589
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажать на иконку аватара",
      "time" : {
        "start" : 1722000032304,
        "stop" : 1722000033721,
        "duration" : 1417
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <svg data-v-1d5f154c=\"\" width=\"45\" height=\"45\" viewBox=\"0 0 45 45\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"avatar__icon\">...</svg> is not clickable at point (1800, 32). Other element would receive the click: <div data-v-91c04aa2=\"\" data-v-72c59a66=\"\" class=\"loader\">...</div>\n  (Session info: chrome-headless-shell=126.0.6478.182)\nStacktrace:\n#0 0x563b1fe9bc5a <unknown>\n#1 0x563b1fb7ee2c <unknown>\n#2 0x563b1fbd2406 <unknown>\n#3 0x563b1fbd0246 <unknown>\n#4 0x563b1fbcdc27 <unknown>\n#5 0x563b1fbcca60 <unknown>\n#6 0x563b1fbc015f <unknown>\n#7 0x563b1fbee5c2 <unknown>\n#8 0x563b1fbbfad9 <unknown>\n#9 0x563b1fbee78e <unknown>\n#10 0x563b1fc0d303 <unknown>\n#11 0x563b1fbee363 <unknown>\n#12 0x563b1fbbe247 <unknown>\n#13 0x563b1fbbeb9e <unknown>\n#14 0x563b1fe6222b <unknown>\n#15 0x563b1fe662d1 <unknown>\n#16 0x563b1fe4dade <unknown>\n#17 0x563b1fe66e32 <unknown>\n#18 0x563b1fe3277f <unknown>\n#19 0x563b1fe8b618 <unknown>\n#20 0x563b1fe8b7f0 <unknown>\n#21 0x563b1fe9ad8c <unknown>\n#22 0x7f13a1694ac3 <unknown>\n\n",
      "statusTrace" : "  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/PulseWave/PulseWave/pages/signup_page.py\", line 93, in click_button_avatar\n    self.element_is_clickable(self.locator.BUTTON_AVATAR).click()\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.4/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "a8e01314e9c1ec28",
      "name" : "Screenshot",
      "source" : "a8e01314e9c1ec28.png",
      "type" : "image/png",
      "size" : 49728
    }, {
      "uid" : "a3083dc56e66c0ba",
      "name" : "HTML source",
      "source" : "a3083dc56e66c0ba.html",
      "type" : "text/html",
      "size" : 78949
    } ],
    "parameters" : [ ],
    "stepsCount" : 10,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1722000033995,
      "stop" : 1722000034056,
      "duration" : 61
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Тестирование страницы 'Регистрация'"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests.test_signup_page"
  }, {
    "name" : "suite",
    "value" : "test_signup_page"
  }, {
    "name" : "subSuite",
    "value" : "TestSignupPage"
  }, {
    "name" : "host",
    "value" : "fv-az1196-380"
  }, {
    "name" : "thread",
    "value" : "2282-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_signup_page.test_signup_page"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "browser",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 4,
        "skipped" : 30,
        "passed" : 75,
        "unknown" : 0,
        "total" : 109
      },
      "items" : [ {
        "uid" : "b0e975e3cef7f468",
        "reportUrl" : "https://Nat754.github.io/PulseWave/97//#testresult/b0e975e3cef7f468",
        "status" : "passed",
        "time" : {
          "start" : 1721961651856,
          "stop" : 1721961669727,
          "duration" : 17871
        }
      }, {
        "uid" : "73897880cde56758",
        "reportUrl" : "https://Nat754.github.io/PulseWave/96//#testresult/73897880cde56758",
        "status" : "passed",
        "time" : {
          "start" : 1721875300090,
          "stop" : 1721875318225,
          "duration" : 18135
        }
      }, {
        "uid" : "480d52afe7b9aa60",
        "reportUrl" : "https://Nat754.github.io/PulseWave/213//#testresult/480d52afe7b9aa60",
        "status" : "passed",
        "time" : {
          "start" : 1721797838436,
          "stop" : 1721797856261,
          "duration" : 17825
        }
      }, {
        "uid" : "60f63a0c7c718486",
        "reportUrl" : "https://Nat754.github.io/PulseWave/95//#testresult/60f63a0c7c718486",
        "status" : "passed",
        "time" : {
          "start" : 1721788838487,
          "stop" : 1721788856467,
          "duration" : 17980
        }
      }, {
        "uid" : "56a1b5bad4d2b5db",
        "reportUrl" : "https://Nat754.github.io/PulseWave/213//#testresult/56a1b5bad4d2b5db",
        "status" : "passed",
        "time" : {
          "start" : 1721766074696,
          "stop" : 1721766091828,
          "duration" : 17132
        }
      }, {
        "uid" : "74f2f9865148eb3a",
        "reportUrl" : "https://Nat754.github.io/PulseWave/94//#testresult/74f2f9865148eb3a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561acf6ebc7a <unknown>\n#1 0x561acf3cee2c <unknown>\n#2 0x561acf41b661 <unknown>\n#3 0x561acf41b751 <unknown>\n#4 0x561acf45ff64 <unknown>\n#5 0x561acf43e5ed <unknown>\n#6 0x561acf45d303 <unknown>\n#7 0x561acf43e363 <unknown>\n#8 0x561acf40e247 <unknown>\n#9 0x561acf40eb9e <unknown>\n#10 0x561acf6b224b <unknown>\n#11 0x561acf6b62f1 <unknown>\n#12 0x561acf69dafe <unknown>\n#13 0x561acf6b6e52 <unknown>\n#14 0x561acf68279f <unknown>\n#15 0x561acf6db638 <unknown>\n#16 0x561acf6db810 <unknown>\n#17 0x561acf6eadac <unknown>\n#18 0x7fa103694ac3 <unknown>",
        "time" : {
          "start" : 1721718521747,
          "stop" : 1721718542505,
          "duration" : 20758
        }
      }, {
        "uid" : "b448d7ec3bfb5206",
        "reportUrl" : "https://Nat754.github.io/PulseWave/94//#testresult/b448d7ec3bfb5206",
        "status" : "passed",
        "time" : {
          "start" : 1721717642906,
          "stop" : 1721717661972,
          "duration" : 19066
        }
      }, {
        "uid" : "9430d24fede5aff7",
        "reportUrl" : "https://Nat754.github.io/PulseWave/94//#testresult/9430d24fede5aff7",
        "status" : "passed",
        "time" : {
          "start" : 1721702267023,
          "stop" : 1721702284533,
          "duration" : 17510
        }
      }, {
        "uid" : "98e14078d63fc77c",
        "reportUrl" : "https://Nat754.github.io/PulseWave/93//#testresult/98e14078d63fc77c",
        "status" : "passed",
        "time" : {
          "start" : 1721616188351,
          "stop" : 1721616206657,
          "duration" : 18306
        }
      }, {
        "uid" : "f29317ba58d897d2",
        "reportUrl" : "https://Nat754.github.io/PulseWave/92//#testresult/f29317ba58d897d2",
        "status" : "passed",
        "time" : {
          "start" : 1721529564362,
          "stop" : 1721529581695,
          "duration" : 17333
        }
      }, {
        "uid" : "88d5cf87b8dae4db",
        "reportUrl" : "https://Nat754.github.io/PulseWave/91//#testresult/88d5cf87b8dae4db",
        "status" : "passed",
        "time" : {
          "start" : 1721442875411,
          "stop" : 1721442892455,
          "duration" : 17044
        }
      }, {
        "uid" : "9ab81c5e0987909d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/90//#testresult/9ab81c5e0987909d",
        "status" : "passed",
        "time" : {
          "start" : 1721356769692,
          "stop" : 1721356787706,
          "duration" : 18014
        }
      }, {
        "uid" : "b7490d15f814d012",
        "reportUrl" : "https://Nat754.github.io/PulseWave/89//#testresult/b7490d15f814d012",
        "status" : "passed",
        "time" : {
          "start" : 1721270170631,
          "stop" : 1721270187914,
          "duration" : 17283
        }
      }, {
        "uid" : "86297f5cded7deec",
        "reportUrl" : "https://Nat754.github.io/PulseWave/88//#testresult/86297f5cded7deec",
        "status" : "passed",
        "time" : {
          "start" : 1721183868638,
          "stop" : 1721183885626,
          "duration" : 16988
        }
      }, {
        "uid" : "6431539e5d4b5b18",
        "reportUrl" : "https://Nat754.github.io/PulseWave/87//#testresult/6431539e5d4b5b18",
        "status" : "passed",
        "time" : {
          "start" : 1721097522425,
          "stop" : 1721097539320,
          "duration" : 16895
        }
      }, {
        "uid" : "8997a40522c3f4dc",
        "reportUrl" : "https://Nat754.github.io/PulseWave/86//#testresult/8997a40522c3f4dc",
        "status" : "passed",
        "time" : {
          "start" : 1721011259803,
          "stop" : 1721011280815,
          "duration" : 21012
        }
      }, {
        "uid" : "375e4c13f385377b",
        "reportUrl" : "https://Nat754.github.io/PulseWave/85//#testresult/375e4c13f385377b",
        "status" : "passed",
        "time" : {
          "start" : 1720925075757,
          "stop" : 1720925106699,
          "duration" : 30942
        }
      }, {
        "uid" : "c4cdf49156f17300",
        "reportUrl" : "https://Nat754.github.io/PulseWave/84//#testresult/c4cdf49156f17300",
        "status" : "passed",
        "time" : {
          "start" : 1720838226588,
          "stop" : 1720838244761,
          "duration" : 18173
        }
      }, {
        "uid" : "6bfc992886043618",
        "reportUrl" : "https://Nat754.github.io/PulseWave/83//#testresult/6bfc992886043618",
        "status" : "passed",
        "time" : {
          "start" : 1720751783385,
          "stop" : 1720751804480,
          "duration" : 21095
        }
      }, {
        "uid" : "a0d0d075e4cdfa4d",
        "reportUrl" : "https://Nat754.github.io/PulseWave/82//#testresult/a0d0d075e4cdfa4d",
        "status" : "passed",
        "time" : {
          "start" : 1720665838617,
          "stop" : 1720665855628,
          "duration" : 17011
        }
      } ]
    },
    "tags" : [ "smoke" ]
  },
  "source" : "5fc7a9d568e7f7b3.json",
  "parameterValues" : [ "'chrome'" ]
}